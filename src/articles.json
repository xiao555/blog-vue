[{"intro":"<p>对于一个mock服务来说，热更新是一个很重要的功能，不用每次更改mock数据之后还要重启一下，提高开发效率。热更新的对象有两种：配置文件和mock数据文件。</p>\n","content":"<p>对于一个mock服务来说，热更新是一个很重要的功能，不用每次更改mock数据之后还要重启一下，提高开发效率。热更新的对象有两种：配置文件和mock数据文件。</p>\n<h3 id=\"配置文件\">配置文件</h3>\n<p>以我们目前项目中的使用MockServer方式来说，我们目前是作为express中间件的形式挂载在本地开发时启动的Node服务上：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// vue.config.js</span>\n<span class=\"hljs-keyword\">const</span> mock = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cf-mock-server/express-mw'</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">devServer</span>: {\n    <span class=\"hljs-attr\">after</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">app</span>) =&gt;</span> {\n     app.use(mock({\n      <span class=\"hljs-attr\">config</span>: path.join(__dirname, <span class=\"hljs-string\">'./mock-server/config.js'</span>)\n     }))\n    }\n  }\n}</code></pre>\n<p>传入的config指向配置文件的绝对路径。这里的mock方法根据传入的选项初始化中间件并返回中间件的处理函数：</p>\n<pre><code class=\"language-javascript\">exports.expressMockMiddleware = <span class=\"hljs-function\">(<span class=\"hljs-params\">options</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">try</span> {\n    initMiddleware(options) <span class=\"hljs-comment\">// 初始化中间件</span>\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'\\n'</span>)\n    handleError(error)\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">async</span> (req, res, next) =&gt; {\n    ...\n  }\n}</code></pre>\n<p>初始化方法解析并监听了配置文件，如果文件改动则重新解析配置文件：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">/**\n * 初始化中间件\n *\n * @param {object} options\n */</span>\nfunction initMiddleware (<span class=\"hljs-keyword\">options</span>) {\n  <span class=\"hljs-comment\">// 获取完整路径</span>\n  let confFile = typeof <span class=\"hljs-keyword\">options</span>.config === <span class=\"hljs-string\">'object'</span>\n    ? null\n    : utils.getFullPathOfFile(<span class=\"hljs-keyword\">options</span>.config, [<span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.json'</span>])\n  <span class=\"hljs-comment\">// 初始化数据</span>\n  Object.<span class=\"hljs-keyword\">assign</span>(<span class=\"hljs-keyword\">options</span>, {\n    confFile, <span class=\"hljs-comment\">// mock配置文件路径</span>\n    dataFilePath: <span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">// 数据文件基础路径</span>\n    apiConf: null, <span class=\"hljs-comment\">// API配置</span>\n  })\n\n  <span class=\"hljs-comment\">// 监听mock配置文件改动，热更新API配置</span>\n  <span class=\"hljs-keyword\">options</span>.confFile &amp;&amp; utils.watch([<span class=\"hljs-keyword\">options</span>.confFile], (<span class=\"hljs-keyword\">file</span>) =&gt; {\n    <span class=\"hljs-built-in\">log</span>.warning(`<span class=\"hljs-symbol\">$</span>{<span class=\"hljs-keyword\">file</span>} changed!`)\n    delete require.cache[<span class=\"hljs-keyword\">file</span>]\n    handleConfig(<span class=\"hljs-keyword\">options</span>)\n  })\n  <span class=\"hljs-comment\">// 解析配置文件</span>\n  handleConfig(<span class=\"hljs-keyword\">options</span>)\n}</code></pre>\n<p>解析的结果都挂载到options对象上，然后中间件的处理函数也是从options对象上获取解析后的API配置。所以对于配置文件的热更新其实就是<strong>监听文件改变+更新文件处理结果的引用</strong>。</p>\n<h3 id=\"mock数据\">Mock数据</h3>\n<p>最初设计MockServer的时候，mock数据支持多种格式：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> Mock = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cf-mock-server'</span>)\n\n<span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Mock({\n  <span class=\"hljs-attr\">config</span>: {\n    <span class=\"hljs-attr\">dataFile</span>: <span class=\"hljs-string\">'./mockData'</span>,\n    <span class=\"hljs-attr\">api</span>: {\n      <span class=\"hljs-string\">'GET /api/users/all'</span>: <span class=\"hljs-string\">'[{\"name\":\"tom\"},{\"name\":\"jerry\"}]'</span>,\n      <span class=\"hljs-string\">'GET /api/users/?name=tom'</span>: <span class=\"hljs-string\">'users/tom.json'</span>,\n      <span class=\"hljs-string\">'GET /api/users/?name=/^A.*\\\\^$/'</span>: <span class=\"hljs-string\">'users/tom.js'</span>,\n      <span class=\"hljs-string\">'GET /api/users/?name=*'</span>: <span class=\"hljs-string\">'users/tom.txt'</span>,\n      <span class=\"hljs-string\">'POST /api/users'</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (req.body.name === <span class=\"hljs-string\">'tom'</span>) {\n          res.status(<span class=\"hljs-number\">200</span>).send({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'Create user success!'</span> })\n        }\n      },\n    }\n  },\n  <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>,\n})\n\napp.run()</code></pre>\n<p>JSON字符串和函数的就不必说了，跟随配置文件改动。那JS文件，JSON文件，TXT文件这些是怎么支持热更新的呢？可以看一下读取文件的处理：</p>\n<pre><code class=\"language-javascript\">/**\n * 读取文件\n *\n * @param <span class=\"hljs-built_in\">{string</span>} file - 文件路径\n * @returns {object} {\n *   header: {},\n *   body: Response Data,\n * }\n */\n<span class=\"hljs-keyword\">function</span> readFile (file) {\n  file = getFullPathOfFile(file, [<span class=\"hljs-string\">'.json'</span>, <span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.txt'</span>])\n\n  <span class=\"hljs-keyword\">let</span> ext =<span class=\"hljs-built_in\"> path</span>.extname(file)\n  <span class=\"hljs-keyword\">let</span> content = readFileSync(file, <span class=\"hljs-string\">'utf-8'</span>)\n  <span class=\"hljs-keyword\">switch</span> (ext) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'.json'</span>:\n      <span class=\"hljs-keyword\">return</span> {\n        header: {},\n        body: JSON.parse(content)\n      }\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'.txt'</span>:\n      <span class=\"hljs-keyword\">let</span> [header, body] = <span class=\"hljs-variable\">$crlf</span>.crlf(content, <span class=\"hljs-variable\">$crlf</span>.LF).split(<span class=\"hljs-string\">'\\n\\n'</span>)\n      <span class=\"hljs-keyword\">return</span> {\n        header: header.split(<span class=\"hljs-string\">'\\n'</span>).reduce((obj, <span class=\"hljs-type\">item</span>) =&gt; {\n          <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-type\">item</span>.includes(<span class=\"hljs-string\">': '</span>)) <span class=\"hljs-keyword\">return</span> obj\n          <span class=\"hljs-keyword\">let</span> <span class=\"hljs-built_in\">[key</span>, <span class=\"hljs-keyword\">value</span>] = <span class=\"hljs-type\">item</span>.split(<span class=\"hljs-string\">': '</span>)\n          obj<span class=\"hljs-built_in\">[key</span>] = <span class=\"hljs-keyword\">value</span>\n          <span class=\"hljs-keyword\">return</span> obj\n        }, {}),\n        body: JSON.parse(body)\n      }\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'.js'</span>:\n      <span class=\"hljs-keyword\">delete</span> require.cache[file]\n      <span class=\"hljs-keyword\">return</span> require(file)\n    default:\n      <span class=\"hljs-keyword\">return</span> content\n  }\n}\n</code></pre>\n<p>JSON文件和TXT文件都是每次读取文件内容，自然是最新的。而JS文件则先清缓存再重新require.</p>\n<h3 id=\"requirecache\">require.cache</h3>\n<p>假如我们有一个js文件,  被引用了两次：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// hello.js</span>\nconsole.log(<span class=\"hljs-string\">'Hello World!'</span>)\n\n<span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'./hello'</span>)</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'./hello'</span>)</span></span></code></pre>\n<p>执行一下index:</p>\n<pre><code class=\"language-javascript\">➜  test <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">index</span>.js\nHello World!\n➜  test</code></pre>\n<p>可以看到console.log只执行了一次。第一次require的时候，node会执行模块的代码，然后缓存起来，第二次require的时候就会从缓存中拿。而这个缓存就是require.cache:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// index.js</span>\nconsole.<span class=\"hljs-keyword\">log</span>(<span class=\"hljs-keyword\">require</span>.<span class=\"hljs-keyword\">cache</span>)\n<span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">'./hello'</span>)\nconsole.<span class=\"hljs-keyword\">log</span>(<span class=\"hljs-keyword\">require</span>.<span class=\"hljs-keyword\">cache</span>)\n<span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">'./hello'</span>)\n\n➜  test node index.js\n{ <span class=\"hljs-string\">'/Users/zhangruiwu/Desktop/test/index.js'</span>:\n   Module {\n     id: <span class=\"hljs-string\">'.'</span>,\n     exports: {},\n     <span class=\"hljs-keyword\">parent</span>: <span class=\"hljs-built_in\">null</span>,\n     filename: <span class=\"hljs-string\">'/Users/zhangruiwu/Desktop/test/index.js'</span>,\n     loaded: <span class=\"hljs-literal\">false</span>,\n     children: <span class=\"hljs-meta\">[</span><span class=\"hljs-meta\">]</span>,\n     paths:\n      <span class=\"hljs-meta\">[</span> <span class=\"hljs-string\">'/Users/zhangruiwu/Desktop/test/node_modules'</span>,\n        <span class=\"hljs-string\">'/Users/zhangruiwu/Desktop/node_modules'</span>,\n        <span class=\"hljs-string\">'/Users/zhangruiwu/node_modules'</span>,\n        <span class=\"hljs-string\">'/Users/node_modules'</span>,\n        <span class=\"hljs-string\">'/node_modules'</span> <span class=\"hljs-meta\">]</span> } }\nHello World!\n{ '/Users/zhangruiwu/Desktop/test/index.js':\n   Module { ... },\n  '/Users/zhangruiwu/Desktop/test/hello.js':\n   Module { ... }\n}\n➜  test</code></pre>\n<p>可以看到一开始，require.cache只有<code>index.js</code>本身，第一次require后就有了hello.js。\n缓存的是Module对象，其中exports是模块输出的内容。第二次require的时候先去缓存中看一下，如果有的话取缓存，没有的话执行模块代码。所以我们需要清空一下缓存才会重新执行新的模块代码。</p>\n<h3 id=\"拆分js文件\">拆分js文件</h3>\n<p>有时候为了方便维护，会这么配置mock数据</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// config.js</span>\n<span class=\"hljs-string\">'GET XXXX'</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xxx.js'</span>)\n\n<span class=\"hljs-comment\">// xxx.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) </span>{ ... }</code></pre>\n<p>这样配置本质上是之前说的函数的方法，只是做了下代码拆分。但是修改<code>xxx.js</code>文件后就不会进行热更新了。而且随着项目越来越多，<code>config.js</code>也可能越来越大，这时候我们按模块拆分出来的js也不会进行热更新。</p>\n<p>为了处理这种情况，我们 需要进一步获取配置文件引用了哪些js文件，监听他们的改动，更新配置。</p>\n<h4 id=\"获取配置文件引用了哪些js文件\">获取配置文件引用了哪些js文件</h4>\n<p>首先，如何获取配置文件引用了哪些js文件？观察上面输出的Module对象，发现有个children对，get:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> watchFiles = []\n\n<span class=\"hljs-keyword\">if</span> (options.confFile) {\n  watchFiles.push(options.confFile)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">collectChildren</span> <span class=\"hljs-params\">(parent)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">parent</span>.length === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">parent</span>.children.<span class=\"hljs-keyword\">forEach</span>(children =&gt; {\n      <span class=\"hljs-comment\">// 过滤掉第三方依赖</span>\n      <span class=\"hljs-keyword\">if</span> (children.filename.includes(<span class=\"hljs-string\">'node_modules'</span>)) <span class=\"hljs-keyword\">return</span>\n      watchFiles.push(children.filename)\n      collectChildren(children)\n    })\n  }\n  collectChildren(<span class=\"hljs-keyword\">require</span>.cache[options.confFile])\n}</code></pre>\n<p>这是对于有配置文件的情况，如果配置直接传JSON数据的话就不能用这种方法了。所以增加了一个配置项<code>watchs</code>, 最终处理方案：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> watchFiles = []\n\n<span class=\"hljs-keyword\">if</span> (options.confFile) {\n  watchFiles.push(options.confFile)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">collectChildren</span> <span class=\"hljs-params\">(parent)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">parent</span>.length === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">parent</span>.children.<span class=\"hljs-keyword\">forEach</span>(children =&gt; {\n      <span class=\"hljs-keyword\">if</span> (children.filename.includes(<span class=\"hljs-string\">'node_modules'</span>)) <span class=\"hljs-keyword\">return</span>\n      watchFiles.push(children.filename)\n      collectChildren(children)\n    })\n  }\n  collectChildren(<span class=\"hljs-keyword\">require</span>.cache[options.confFile])\n}\n\n<span class=\"hljs-keyword\">if</span> (options.watchs) {\n  options.watchs.<span class=\"hljs-keyword\">forEach</span>(filepath =&gt; {\n    <span class=\"hljs-keyword\">if</span> (fs.statSync(filepath).isDirectory()) {\n      watchFiles.push(...utils.files(filepath))\n    } <span class=\"hljs-keyword\">else</span> {\n      watchFiles.push(filepath)\n    }\n  })\n}\n\nwatchFiles = [...<span class=\"hljs-keyword\">new</span> Set(watchFiles)]</code></pre>\n<h4 id=\"监听并更新配置\">监听并更新配置</h4>\n<p>获取了需要监听的文件之后，就要开始监听改动了，一开始我是这么处理的：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 监听mock配置文件改动，热更新API配置</span>\nwatchFiles.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; utils.watch(watchFiles, (<span class=\"hljs-keyword\">file</span>) =&gt; {\n  <span class=\"hljs-built-in\">log</span>.warning(`<span class=\"hljs-symbol\">$</span>{<span class=\"hljs-keyword\">file</span>} changed!`)\n  delete require.cache[<span class=\"hljs-keyword\">file</span>]\n  handleConfig(<span class=\"hljs-keyword\">options</span>)\n})</code></pre>\n<p>谁改动了清谁的缓存，看着没毛病，可是实际执行起来发现并没有实现热更新的效果。为啥呢？想了一下，虽然清了改动文件的缓存，但是入口的配置文件的缓存并没有清，执行handleConfig时，里面require了配置文件，还是走的缓存。所以改动文件的父文件都要清一下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 监听mock配置文件改动，热更新API配置</span>\nwatchFiles.length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; utils.watch(watchFiles, (file) =&gt; {\n  log.warning(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${file}</span> changed!`</span>)\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-built_in\">module</span> = <span class=\"hljs-built_in\">require</span>.cache[file]\n  <span class=\"hljs-keyword\">if</span> (options.confFile) {\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">module</span>.filename !== options.confFile) {\n      <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">require</span>.cache[<span class=\"hljs-built_in\">module</span>.filename]\n      <span class=\"hljs-built_in\">module</span> = <span class=\"hljs-built_in\">module</span>.parent\n    }\n  }\n  <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">require</span>.cache[<span class=\"hljs-built_in\">module</span>.filename]\n  handleConfig(options)\n})</code></pre>\n<p>OK, MockServer的热更新机制就更加完善了！</p>\n<p>npm地址：<a href=\"https://www.npmjs.com/package/cf-mock-server\">https://www.npmjs.com/package/cf-mock-server</a></p>\n","title":"MockServer中的热更新","tags":["node"],"slug":"hot-update-in-mockserver","createDate":1585220447984,"id":"hot-update-in-mockserver","thumb":"https://images.unsplash.com/photo-1586626381781-a0885cf82fec?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"content":"<p>无名小辈</p>\n","title":"About Me","tags":[],"slug":"about-me","createDate":1583208169205,"id":"about-me","thumb":"https://images.unsplash.com/photo-1581838998255-531eb68a5055?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>Node.js是能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。它让JS脱离了浏览器的限制，在更多的平台上运行。近几年是越来越火。让它这么火的原因有哪些呢？</p>\n<ul>\n<li>基于C++的Chrome V8引擎让它速度非常快</li>\n<li>事件循环与异步I/0让它可以轻松处理高并发</li>\n<li>统一技术栈</li>\n<li>服务端渲染（同构Web应用）</li>\n<li>...</li>\n</ul>\n<p>本文主要就第二点谈谈，什么是事件循环与异步I/O，以及他们是怎样处理高并发的。</p>\n","content":"<p>Node.js是能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。它让JS脱离了浏览器的限制，在更多的平台上运行。近几年是越来越火。让它这么火的原因有哪些呢？</p>\n<ul>\n<li>基于C++的Chrome V8引擎让它速度非常快</li>\n<li>事件循环与异步I/0让它可以轻松处理高并发</li>\n<li>统一技术栈</li>\n<li>服务端渲染（同构Web应用）</li>\n<li>...</li>\n</ul>\n<p>本文主要就第二点谈谈，什么是事件循环与异步I/O，以及他们是怎样处理高并发的。</p>\n<h2 id=\"什么是异步\">什么是异步</h2>\n<p>计算机领域中的同步和异步的概念和我们平时生活中的同步和异步是不一样的：</p>\n<pre><code>同步就是整个处理过程顺序执行，当各个过程都执行完毕，并返回结果。是一种线性执行的方式，执行的流程不能跨越。\n\n异步则是只是发送了调用的指令，调用者无需等待被调用的方法完全执行完毕；而是继续执行下面的流程。是一种并行处理的方式，不必等待一个程序执行完，可以执行其它的任务</code></pre><p>我们经常听到的Ajax请求的A就是异步(Asynchronous)的意思。浏览器中JavaScript在单线程上执行，而且与UI渲染共用一个线程。这意味着在js执行的时候，UI渲染和响应是处于停滞状态的。这就是为什么我们用js进行大量计算时页面会卡主。</p>\n<p>如果前端发请求是通过同步的方式，那么js需要等到后端返回数据后才能继续执行。这期间UI将停顿，无法响应用户的交互行为。但是通过发送异步请求，js和UI渲染可以继续执行，等收到响应的数据执行回调即可。用户体验更佳。</p>\n<h2 id=\"什么是io\">什么是I/O</h2>\n<p>I/O在计算机中指Input/Output，也就是输入和输出。比如磁盘I/O，网络I/O等进行数据交换的操作。</p>\n<h3 id=\"什么是异步io\">什么是异步I/O</h3>\n<p>计算机在发展过程中将组件进行了抽象，分为I/O设备和计算设备。通常CPU与I/O是可以并行的。假如有一下代码：</p>\n<pre><code><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">db</span>.<span class=\"hljs-keyword\">query</span>(<span class=\"hljs-string\">\"select * from T\"</span>);\n<span class=\"hljs-comment\">// use result</span></code></pre><p>思考一下执行这行SQL的时候，其实是调用了I/O操作，那么在数据返回之前，CPU在干嘛？是不是空闲了。</p>\n<p>假如处理一个请求需要来自查询两份数据，第一个耗时M，第二个耗时N，采用同步的方式，代码如下：</p>\n<pre><code><span class=\"hljs-comment\">// 消费时间为M</span>\n<span class=\"hljs-selector-tag\">getData</span>(<span class=\"hljs-string\">'from_db'</span>);\n<span class=\"hljs-comment\">// 消费时间为N</span>\n<span class=\"hljs-selector-tag\">getData</span>(<span class=\"hljs-string\">'from_remote_api'</span>);</code></pre><p>第一个资源获取后才会获取第二个资源，总耗时 M+N。但是如果采用异步的方式：</p>\n<pre><code>getData(<span class=\"hljs-string\">'from_db'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n<span class=\"hljs-comment\">// 消费时间为M</span>\n});\n\ngetData(<span class=\"hljs-string\">'from_remote_api'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n<span class=\"hljs-comment\">// 消费时间为N</span>\n});</code></pre><p>第一个资源并不会阻塞第二个资源的获取，总耗时max(M, N)。随着应用越来越复杂，同步和异步的优劣会越来越明显。</p>\n<p>I/O是昂贵的，<strong>异步I/O能更快的响应资源</strong>。</p>\n<p><img src=\"https://xiao555.netlify.com/28b0c513315b4c13a96a46f7ac7bac6b_image.png\" alt=\"28b0c513315b4c13a96a46f7ac7bac6b_image.png\"></p>\n<p>官方有个小例子也体现了异步的高效：<a href=\"https://nodejs.org/en/docs/guides/simple-profiling/\">https://nodejs.org/en/docs/guides/simple-profiling/</a></p>\n<p>在登录注册的逻辑中，我们经常会用到加密算法，这种复杂计算是很耗CPU的。上面的文章提到使用同步代码进行加密计算时，每秒处理的请求数是5，而改成了异步代码进行加密计算时，每秒处理的请求数变成四舍五入就是20，提升了4倍的性能。</p>\n<h2 id=\"异步io的实现\">异步I/O的实现</h2>\n<p>异步I/O并非Node原创。下面我们看一下操作系统对异步I/O的支持情况。</p>\n<h3 id=\"阻塞与非阻塞\">阻塞与非阻塞</h3>\n<p>在讨论同步/异步时，我们也尝尝听到阻塞和非阻塞，从效果上讲异步和非阻塞好像是一回事。但是对于计算机内核来说，它们是两回事。操作系统内核对于I/O只有两种方式：阻塞与非阻塞。</p>\n<p>阻塞I/O是调用之后一定要等到数据返回，这个调用才结束。</p>\n<p><img src=\"https://xiao555.netlify.com/4d19e938b5644a81924735fca57a4723_image.png\" alt=\"4d19e938b5644a81924735fca57a4723_image.png\"></p>\n<p>阻塞I/O造成CPU等待I/O, 浪费等待时间，CPU的处理能力不能得到充分利用。为了提高性能，内核提供了非阻塞I/O。</p>\n<p><img src=\"https://xiao555.netlify.com/803ca124254e42198715f684acc85f1e_image.png\" alt=\"803ca124254e42198715f684acc85f1e_image.png\"></p>\n<p>操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符(fd)进行管理。进行I/O调用时，先打开文件描述符，再根据文件描述符去实现文件的数据读写。</p>\n<p>非阻塞I/O在调用后不带数据立即返回，CPU可以继续处理其他事务，提升了性能。但带来的问题是，我们并不知道I/O是否完成。为了获取完整的数据，程序需要重复调用I/O来确认，即<strong>轮询</strong>。</p>\n<p>现有的轮询技术主要有：read, select, poll和epoll。</p>\n<p>read是最原始，性能最低的一种，通过重复调用来检查I/O状态获取完整的数据。在得到数据前，CPU一直耗在等待上。</p>\n<p><img src=\"https://xiao555.netlify.com/30ebef2fb9304bf2b07bf3680ab9e7b0_image.png\" alt=\"30ebef2fb9304bf2b07bf3680ab9e7b0_image.png\"></p>\n<p>select在read基础上进行了改进，可以同时监听多个文件描述符，进行非阻塞调用后，通过不断遍历每个文件描述符上的事件状态来判断I/O是否完成，属于多路复用I/O的一种。它的限制是状态存储在一个1024长度的数组中，所以最多同时检查1024个文件描述符。</p>\n<p><img src=\"https://xiao555.netlify.com/e4f98fc94dc6422b944cd208e5c6c94f_image.png\" alt=\"e4f98fc94dc6422b944cd208e5c6c94f_image.png\"></p>\n<p>poll跟sellect类似，进行了一些改进，采用链表的方式突破数组的长度限制。但是poll和select都需要遍历，当文件描述符比较多的时候，性能比较低。</p>\n<p>epoll是Linux下效率最高的I/O事件通知机制，如果没有检查到I/O事件，会进行休眠，直到事件将它唤醒。利用了事件通知，执行回调的方式，而不是遍历查询，不会浪费CPU，执行效率高。但是如果I/O事件并不多的情况下，epoll并非性能最高的，毕竟实现事件通知机制也会有一定消耗。</p>\n<p><img src=\"https://xiao555.netlify.com/eac966fd47684d69a005ff291ee1fb9f_image.png\" alt=\"eac966fd47684d69a005ff291ee1fb9f_image.png\"></p>\n<p>如果要形象的描述一下这几个轮询，可以理解为公司有好几个需求(I/O事件)需要开发，每个需求分配了一个产品(线程)，每个需求交给一个开发去完成(进行I/O调用)，每个产品需要不断的去问对应的开发需求(I/O调用)是否完成，这就是read。</p>\n<p>后来公司引入了jira统一管理需求，把这几个需求在jira上都交给一个产品(线程)去管理，每个需求还是交给一个开发去完成(进行I/O调用)，但只需要这个产品去不断查看每个jira的状态即可(遍历)，这种就是select和poll的方式。</p>\n<p>再后来公司又启用了企业微信，开发开发完后直接在企业微信上通知(事件通知)产品开发完了，不用产品一个一个去查看状态了，这种就是epoll的方式。</p>\n<h3 id=\"异步io的理想与现实\">异步I/O的理想与现实</h3>\n<p>我们期望的异步I/O是应用程序发起I/O调用后，无须通过遍历或者事件通知等方式轮询，可以直接处理后续逻辑，只需要在I/O完成后将数据返回给应用程序执行回调。</p>\n<p><img src=\"https://xiao555.netlify.com/3b9cb346c07149638576a41fabff06f6_image.png\" alt=\"3b9cb346c07149638576a41fabff06f6_image.png\"></p>\n<p>而现实中的异步I/O大多是通过线程池的方式来间接实现的。让部分线程进行阻塞I/O或者非阻塞I/O加轮询技术来完成数据获取，让一个线程进行计算处理，通过线程之间的通信进行数据传递，可以轻松实现异步I/O。</p>\n<p><img src=\"https://xiao555.netlify.com/8f524f1ae111459f99a01b58674b6bd9_image.png\" alt=\"8f524f1ae111459f99a01b58674b6bd9_image.png\"></p>\n<h3 id=\"跨平台的异步io实现\">跨平台的异步I/O实现</h3>\n<p>Node是跨平台的，上面我们说的就是Unix系统，在Windows平台上，本身提供了一个理想的异步I/O——IOCP，虽然它内部仍然是线程池的原理，只不过这些线程池是有系统内核管理的而非应用程序。Node提供了libuv作为抽象封装层，兼容了不同平台间的差异。</p>\n<p><img src=\"https://xiao555.netlify.com/de7a832ab9af4b6dad29b499873f0efb_image.png\" alt=\"de7a832ab9af4b6dad29b499873f0efb_image.png\"></p>\n<p>所以虽然我们常说Node是单线程的，其实只是说js执行在单线程中，内部完成I/O任务的另有线程池。</p>\n<h3 id=\"node的异步io\">Node的异步I/O</h3>\n<p>介绍完异步I/O的实现，还要说一下Node的执行模型，完成整个异步I/O的有事件循环，观察者和请求对象等。</p>\n<h4 id=\"事件循环\">事件循环</h4>\n<p>在进程启动时，Node便会创建一个类似于while(true)的循环，每执行一次循环体的过程我们称为Tick。每个Tick的过程就是查看是否有事件待处理，如果有，就取出事件及其相关的回调函数。如果存在关联的回调函数，就执行它们。然后进入下个循环，如果不再有事件处理，就退出进程。</p>\n<p><img src=\"https://xiao555.netlify.com/bdecb4903b1e4bd9b892a1e82a0644b4_image.png\" alt=\"bdecb4903b1e4bd9b892a1e82a0644b4_image.png\"></p>\n<h4 id=\"观察者\">观察者</h4>\n<p>在每个Tick的过程中，如何判断是否有事件需要处理呢？这里就要引入观察者的概念，每个事件循环中有一个或多个观察者，而判断是否有事件要处理就是向这些观察者询问。</p>\n<p>在浏览器中，事件可以能来自用户交互行为，比如点击一个按钮等等，都有对应的观察者。在Node中，事件可能来自网络请求，文件I/O等，这些事件对应的观察者有文件I/O观察者，网络I/O观察者等。</p>\n<p>事件循环是一个典型的生产者/消费者模型。异步I/O、网络请求等则是事件的生产者，源源不断为Node提供不同类型的事件，这些事件被传递到对应的观察者那里，事件循环则从观察者那里取出事件并处理。</p>\n<h4 id=\"请求对象\">请求对象</h4>\n<p>异步I/O的回调函数不是由我们开发者调用的。从js发起调用到内核执行完I/O操作的过渡过程中，存在一种中间产物，叫做请求对象。</p>\n<p>以<code>fs.open()</code>为例，从js调用Node的核心模块(fs)，核心模块调用C++内建模块，内建模块通过libuv进行系统调用。libuv进行系统调用过程中，创建了一个请求对象，从js层传入的参数和当前方法都被封装在这个请求对象中，回调函数也设置在这个对象的oncomplete_sym属性上。对象包装完毕后，就被推入线程池中等待执行。</p>\n<p>至此，js调用立即返回，由JavaScript层面发起的异步调用的第一阶段就此结束。 JavaScript线程可以继续执行当前任务的后续操作。当前的I/O操作在线程池中等待执行，不管它是否阻塞I/O，都不会影响到JavaScript线程的后续执行，如此就达到了异步的目的。</p>\n<p>请求对象是异步I/O过程中的重要中间产物，所有的状态都保存在这个对象中，包括送入线程池等待执行以及I/O操作完毕后的回调处理。</p>\n<h4 id=\"执行回调\">执行回调</h4>\n<p>组装好请求对象、送入I/O线程池等待执行，实际上完成了异步I/O的第一部分，回调通知是第二部分。</p>\n<p>在事件循环的每次Tick过程中，也存在I/O观察者去检查线程池中是否有执行完的请求，如果存在，会将请求对象加到I/O观察者的队列中，然后将其当做事件处理。</p>\n<p>I/O观察者回调函数的行为就是取出请求对象的result属性作为参数，取出oncomplete_sym属性作为方法，然后调用执行，以此达到调用JavaScript中传入的回调函数的目的。</p>\n<p>以Windows平台上的IOCP为例，整个异步I/O的流程大概是：</p>\n<p><img src=\"https://xiao555.netlify.com/61ad2742e89c4c249712ce65c4e387ae_image.png\" alt=\"61ad2742e89c4c249712ce65c4e387ae_image.png\"></p>\n<p>事件循环、观察者、请求对象、I/O线程池这四者共同构成了Node异步I/O模型的基本要素。</p>\n<h2 id=\"事件驱动\">事件驱动</h2>\n<p>事件驱动是在持续的事物管理过程中，由当前时间节点上出现的事件引起的调用可用资源执行相关任务，解决问题，防止事物堆积的一种策略。前面介绍异步的实现原理也基本勾勒处理事件驱动的实质，即通过主循环加事件触发的方式来运行程序。基于Node构建的Web服务器也是通过事件驱动来处理请求的。</p>\n<p><img src=\"https://xiao555.netlify.com/9142627df5b34afcbc6450c11f0ea42a_image.png\" alt=\"9142627df5b34afcbc6450c11f0ea42a_image.png\"></p>\n<p>下面为几种经典的服务器模型</p>\n<ul>\n<li>同步式。对于同步式的服务，一次只能处理一个请求，并且其余请求都处于等待状态。</li>\n<li>每进程/每请求。为每个请求启动一个进程，这样可以处理多个请求，但是它不具备扩展性，因为系统资源只有那么多。</li>\n<li>每线程/每请求。为每个请求启动一个线程来处理。尽管线程比进程要轻量，但是由于每个线程都占用一定内存，当大并发请求到来时，内存将会很快用光，导致服务器缓慢。</li>\n</ul>\n<p>多线程优点是可以高效利用多核CPU，缺点是创建线程需要消耗内存，CPU在线程之间进行上下文切换需要花费时间，还有最头痛的状态同步问题等等。Apache采用的是每线程/每请求的方式，而Nginx则是事件驱动，我们看一下这两个的性能比较：</p>\n<p><img src=\"https://xiao555.netlify.com/67bbbba6a2d34116a2bee74664c9d606_image.png\" alt=\"67bbbba6a2d34116a2bee74664c9d606_image.png\">\n<img src=\"https://xiao555.netlify.com/34e201b99a0f4197b9b66fd53af3886c_image.png\" alt=\"34e201b99a0f4197b9b66fd53af3886c_image.png\"></p>\n<p>我们可以看到，随着并发数的增加，nginx每秒处理的请求数更多(省去了多线程上下文切换的消耗)，占用的内存基本不变，apache内存线性增加(每个线程占用一定的内存)。所以事件驱动在处理高并发时性能是非常高的。</p>\n<p>参考链接：\n《深入浅出Node.js》\n<a href=\"https://blog.csdn.net/shiyong1949/article/details/80854656\">https://blog.csdn.net/shiyong1949/article/details/80854656</a>\n<a href=\"https://nodejs.org/en/docs/guides/simple-profiling/\">https://nodejs.org/en/docs/guides/simple-profiling/</a>\n<a href=\"https://www.zhihu.com/question/28594409\">https://www.zhihu.com/question/28594409</a>\n<a href=\"http://s3.amazonaws.com/four.livejournal/20091117/jsconf.pdf\">http://s3.amazonaws.com/four.livejournal/20091117/jsconf.pdf</a></p>\n","title":"深入浅出Node.js之事件循环与异步I/O","tags":["Node.js"],"slug":"in-depth-explanation-of-the-event-loop-and-asynchronous-i%2Fo-of-node.js","createDate":1575367200000,"id":"in-depth-explanation-of-the-event-loop-and-asynchronous-i%2Fo-of-node.js","thumb":"https://images.unsplash.com/photo-1580337603547-6209ef255d26?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>看到这个标题，有人可能会疑惑：提高组件复用性不是我们应该拥抱的一件事情吗，为什么要拒绝它？是的，大多数情况下我们需要尽量复用组件，代码层面的组件复用提高了代码的复用性，便于维护。页面渲染层面的组件复用提高了性能。但是，在有些场景下是会遇到不需要组件复用的情况。</p>\n","content":"<p>看到这个标题，有人可能会疑惑：提高组件复用性不是我们应该拥抱的一件事情吗，为什么要拒绝它？是的，大多数情况下我们需要尽量复用组件，代码层面的组件复用提高了代码的复用性，便于维护。页面渲染层面的组件复用提高了性能。但是，在有些场景下是会遇到不需要组件复用的情况。</p>\n<p>Vue在渲染页面的时候，就会尽量去复用已有元素，就会出现上个tab的输入框被带到下一个tab中，切换tab后列表中的图片没变等问题。对于这种问题，最简单的办法就是加个key。</p>\n<blockquote>\n<p><code>key</code> 的特殊属性主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。使用 key，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</p>\n</blockquote>\n<p>上述是引用Vue官方文档的说法。可以处理绝大部分不想复用的情况。然而前几天却遇到了一个key处理不了(其实可以，但很麻烦，不优雅)的情况。故事是这样的:</p>\n<p>我们项目一开始的路由结构：</p>\n<pre><code class=\"language-javascript\">// 文件结构\n- product\n  - <span class=\"hljs-keyword\">Index</span>.vue\n  - product-list\n  - product-detail\n- <span class=\"hljs-keyword\">order</span>\n  - <span class=\"hljs-keyword\">Index</span>.vue\n  - <span class=\"hljs-keyword\">order</span>-list\n  - <span class=\"hljs-keyword\">order</span>-detail\n\n// vue-router\n{\n  <span class=\"hljs-type\">path</span>: <span class=\"hljs-string\">'/product'</span>\n  component: product/<span class=\"hljs-keyword\">Index</span>.vue,\n  children: [\n    {\n      <span class=\"hljs-type\">path</span>: <span class=\"hljs-string\">'/'</span>\n      component: product-list\n    }.\n    {\n      <span class=\"hljs-type\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      component: product-detail\n    }\n  ],\n  <span class=\"hljs-type\">path</span>: <span class=\"hljs-string\">'/order'</span>\n  component: <span class=\"hljs-keyword\">order</span>/<span class=\"hljs-keyword\">Index</span>.vue,\n  children: [\n    {\n      <span class=\"hljs-type\">path</span>: <span class=\"hljs-string\">'/'</span>\n      component: <span class=\"hljs-keyword\">order</span>-list\n    }.\n    {\n      <span class=\"hljs-type\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      component: <span class=\"hljs-keyword\">order</span>-detail\n    }\n  ]\n}\n\n// <span class=\"hljs-keyword\">Index</span>.vue\n&lt;<span class=\"hljs-keyword\">template</span>&gt;\n  &lt;main&gt;\n    &lt;keep-alive :<span class=\"hljs-keyword\">include</span>=<span class=\"hljs-string\">'product-list'</span>&gt;\n      &lt;router-<span class=\"hljs-keyword\">view</span>&gt;&lt;/router-<span class=\"hljs-keyword\">view</span>&gt;\n     &lt;/keep-alive&gt;\n  &lt;/main&gt;\n&lt;/<span class=\"hljs-keyword\">template</span>&gt;</code></pre>\n<p>可以看到每一级导航下面都有一个Index.vue，内容也是差不多的，只不过有的支持keepAlive，有的不支持。秉着组件复用的原则，我把它们抽成了一个组件——支持keepAlive的SingleRouterView.vue（论坛的排版好难）:</p>\n<pre><code>&lt;template&gt;\n  &lt;keep-alive :include=<span class=\"hljs-string\">\"keepAliveComponentNames\"</span>&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/keep-alive&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport  <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-keyword\">data</span> () {\n    <span class=\"hljs-keyword\">return</span> {\n      keepAliveComponentNames: [], <span class=\"hljs-comment\">// 记录开启keepAlive的组件名</span>\n    }\n  },\n  watch: {\n    <span class=\"hljs-string\">'$route'</span>:  <span class=\"hljs-string\">'checkKeepAlive'</span>\n  },\n  methods: {\n    checkKeepAlive () { <span class=\"hljs-comment\">// 检查是否开启keepAlive</span>\n      let  matched  =  <span class=\"hljs-keyword\">this</span>.$route.matched\n      let  name\n      <span class=\"hljs-keyword\">try</span> {\n        name  =  matched[matched.length  -  <span class=\"hljs-number\">1</span>].components.<span class=\"hljs-keyword\">default</span>.name\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-keyword\">return</span>\n      }\n      <span class=\"hljs-keyword\">if</span> (!name) <span class=\"hljs-keyword\">return</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.$route.meta.keepAlive) { <span class=\"hljs-comment\">// 开启的加到keepAliveComponentNames</span>\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.includes(name)) {\n          <span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.push(name)\n        }\n      } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// 不开启的从keepAliveComponentNames去掉</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.includes(name)) {\n          <span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.splice(<span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.indexOf(name), <span class=\"hljs-number\">1</span>)\n        }\n      }\n    }\n  },\n  created () {\n    <span class=\"hljs-keyword\">this</span>.checkKeepAlive()\n  }\n}\n&lt;script&gt;</code></pre><p>这样我们的路由结构就变成了：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 文件结构</span>\n<span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">product</span>\n  <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">product-list</span>\n  <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">product-detail</span>\n<span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">order</span>\n  <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">order-list</span>\n  <span class=\"hljs-selector-tag\">-</span> <span class=\"hljs-selector-tag\">order-detail</span>\n\n<span class=\"hljs-comment\">// vue-router</span>\n{\n  <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/product'</span>\n  <span class=\"hljs-attribute\">component</span>: SingleRouterView,\n  <span class=\"hljs-attribute\">children</span>: [\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/'</span>\n      <span class=\"hljs-attribute\">meta</span>: {\n        <span class=\"hljs-attribute\">keepAlive</span>: true\n      },\n      <span class=\"hljs-attribute\">component</span>: product-list\n    }.\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      <span class=\"hljs-attribute\">component</span>: product-detail\n    }\n  ],\n  <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/order'</span>\n  <span class=\"hljs-attribute\">component</span>: SingleRouterView,\n  <span class=\"hljs-attribute\">children</span>: [\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/'</span>\n      <span class=\"hljs-attribute\">component</span>: order-list\n    }.\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      <span class=\"hljs-attribute\">component</span>: order-detail\n    }\n  ]\n}</code></pre>\n<p>这样就省去了很多Index.vue文件，达到了组件复用的目的。而且可以动态配置是否开启keepAlive，如果有些条件下不想keepAlive，把route.meta.keepALive设为false即可，Perfect！</p>\n<p>就这样用了好久，知道前端时间做需求时发现了一个问题，当时vue-router的配置是这样的：</p>\n<pre><code class=\"language-javascript\">{\n  <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/rules-management'</span>\n  <span class=\"hljs-attribute\">component</span>: SingleRouterView,\n  <span class=\"hljs-attribute\">children</span>: [\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/'</span>\n      <span class=\"hljs-attribute\">meta</span>: {\n        <span class=\"hljs-attribute\">keepAlive</span>: true\n      },\n      <span class=\"hljs-attribute\">component</span>: rule-list\n    }.\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      <span class=\"hljs-attribute\">component</span>: rule-detail\n    }\n  ],\n  <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/violation-management'</span>\n  <span class=\"hljs-attribute\">component</span>: SingleRouterView,\n  <span class=\"hljs-attribute\">children</span>: [\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/'</span>\n      <span class=\"hljs-attribute\">meta</span>: {\n        <span class=\"hljs-attribute\">keepAlive</span>: true\n      },\n      <span class=\"hljs-attribute\">component</span>: violation-list\n    }.\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      <span class=\"hljs-attribute\">component</span>: violation-detail\n    }\n  ]\n}</code></pre>\n<p>有规则管理和违规管理两个上级路由，都引用了SingleRouterView组件，他们子路由中都有需要keepAlive的地方。但是页面上会有个问题，就是从rule-list跳到violation-list的时候，rule-list还会被缓存，再跳转回去的时候，缓存的组件会被激活，原来页面上的状态会被保留。但是我们想要的效果是只有列表页跳到详情页再返回的时候，需要缓存列表页之前的状态。从列表页跳到其他路由下再回来应该是一个全新的版本。</p>\n<p><img src=\"http://tech.yuceyi.com/upload/daa2c0bc15554dff9aed856c34216666_image.png\" alt=\"被复用的组件缓存了RulesList组件\"></p>\n<p>上图中可以看到从规则管理跳转到违规管理，SingleRouterView还缓存着之前规则列表组件。显然，我们的SingleRouterView被复用了。怎么解决呢？</p>\n<p>方法一：也是最简单的，加key。但是问题来了，key的值是什么？路由的path？显然不行，列表页和详情页的path是不同的，这样会导致从列表页跳转到详情页，SingleRouterView就是一个全新的版本了，不会有缓存的组件。所以要保证SingleRouterView下的所有子路由共享一个key，那给meta加个变量吧：</p>\n<pre><code class=\"language-js\">{\n  <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/rules-management'</span>\n  <span class=\"hljs-attribute\">component</span>: SingleRouterView,\n  <span class=\"hljs-attribute\">children</span>: [\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/'</span>\n      <span class=\"hljs-attribute\">meta</span>: {\n        <span class=\"hljs-attribute\">keepAlive</span>: true,\n        <span class=\"hljs-attribute\">key</span>: <span class=\"hljs-string\">'rules-management'</span>\n      },\n      <span class=\"hljs-attribute\">component</span>: rule-list\n    }.\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      <span class=\"hljs-attribute\">meta</span>: {\n        <span class=\"hljs-attribute\">key</span>: <span class=\"hljs-string\">'rules-management'</span>\n      },\n      <span class=\"hljs-attribute\">component</span>: rule-detail\n    }\n  ],</code></pre>\n<p>然后，SingleRouterView里用route.meta.key做组件的key。emmm.....可以是可以，但是未免也太麻烦了，每个子路由都要配一下key，而且如果有嵌套多个SingleRouterView的话怎么办？想想就头皮发麻。</p>\n<p>方法二：动态创建组件。灵机一动，既然同一个组件会被复用，那我每次用函数动态创建一个组件，你会怎么处理？</p>\n<pre><code><span class=\"hljs-comment\">// createSingleRouterView.js</span>\n\nexport  <span class=\"hljs-keyword\">default</span> () =&gt; {\n<span class=\"hljs-keyword\">return</span> {\n  <span class=\"hljs-keyword\">data</span> () {\n    <span class=\"hljs-keyword\">return</span> {\n      keepAliveComponentNames: [], <span class=\"hljs-comment\">// 记录开启keepAlive的组件名</span>\n    }\n  },\n  watch: {\n    <span class=\"hljs-string\">'$route'</span>:  <span class=\"hljs-string\">'checkKeepAlive'</span>\n  },\n  methods: {\n    checkKeepAlive () { <span class=\"hljs-comment\">// 检查是否开启keepAlive</span>\n      let  matched  =  <span class=\"hljs-keyword\">this</span>.$route.matched\n      let  name\n      <span class=\"hljs-keyword\">try</span> {\n        name  =  matched[matched.length  -  <span class=\"hljs-number\">1</span>].components.<span class=\"hljs-keyword\">default</span>.name\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-keyword\">return</span>\n      }\n      <span class=\"hljs-keyword\">if</span> (!name) <span class=\"hljs-keyword\">return</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.$route.meta.keepAlive) { <span class=\"hljs-comment\">// 开启的加到keepAliveComponentNames</span>\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.includes(name)) {\n          <span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.push(name)\n        }\n      } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// 不开启的从keepAliveComponentNames去掉</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.includes(name)) {\n          <span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.splice(<span class=\"hljs-keyword\">this</span>.keepAliveComponentNames.indexOf(name), <span class=\"hljs-number\">1</span>)\n        }\n      }\n    }\n  },\n  created () {\n    <span class=\"hljs-keyword\">this</span>.checkKeepAlive()\n  },\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      &lt;keep-alive  include={<span class=\"hljs-keyword\">this</span>.keepAliveComponentNames}&gt;\n        &lt;router-view&gt;&lt;/router-view&gt;\n      &lt;/keep-alive&gt;\n    )\n  },\n}</code></pre><pre><code><span class=\"hljs-comment\">// vue-router</span>\n{\n  <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/rules-management'</span>\n  <span class=\"hljs-attribute\">component</span>: createSingleRouterView(),\n  <span class=\"hljs-attribute\">children</span>: [\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/'</span>\n      <span class=\"hljs-attribute\">meta</span>: {\n        <span class=\"hljs-attribute\">keepAlive</span>: true\n      },\n      <span class=\"hljs-attribute\">component</span>: rule-list\n    }.\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      <span class=\"hljs-attribute\">component</span>: rule-detail\n    }\n  ],\n  <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/violation-management'</span>\n  <span class=\"hljs-attribute\">component</span>: createSingleRouterView(),\n  <span class=\"hljs-attribute\">children</span>: [\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/'</span>\n      <span class=\"hljs-attribute\">meta</span>: {\n        <span class=\"hljs-attribute\">keepAlive</span>: true\n      },\n      <span class=\"hljs-attribute\">component</span>: violation-list\n    }.\n    {\n      <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/detail'</span>\n      <span class=\"hljs-attribute\">component</span>: violation-detail\n    }\n  ]\n}</code></pre><p>去页面上看一看，列表页到详情页会缓存列表页，跳到其他路由的列表页会生成一个新的router-view组件，这才是真的的Perfect！</p>\n<p>总结：对于大部分防止组件(元素)复用的情况可以用key解决，如果key解决不了，就要想想其他办法了，动态创建组件也许是个不错的选择。</p>\n","title":"Vue 中如何防止组件 (元素) 复用","tags":["Vue"],"slug":"how-to-prevent-component-(element)-reuse-in-vue","createDate":1569834660000,"id":"how-to-prevent-component-(element)-reuse-in-vue","thumb":"https://images.unsplash.com/photo-1580880983727-c7798441751f?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>商品有两个重要的概念：SPU(Standard Product Unit )和SKU(Stock Keeping Unit)。通俗点说，SPU就是某个商品，比如iPhoneX和iPhoneXR是两个不同的手机，也是两个SPU。SKU是商品的具体型号，比如“黑色-iPhoneX-128G-国行-联通版”，“白色-iPhoneX-256G-国行-联通版”就是iPhoneX这个SPU的两个SKU。</p>\n<p>SKU有很多属性，比如上述iPhoneX的SKU属性就包括颜色，容量等等，这种影响到库存和价格的属性也叫销售属性。目前我司前台展示的销售属性就包括Color，Size，Unit，Quantity，Type等等。除了销售属性外，还有很多商品的属性与SKU有关，比如库存，税率等等。</p>\n<p>所以，SKU是电商系统的重要组成部分，而编辑SKU也是商品管理最核心最复杂的功能之一。</p>\n","content":"<p>商品有两个重要的概念：SPU(Standard Product Unit )和SKU(Stock Keeping Unit)。通俗点说，SPU就是某个商品，比如iPhoneX和iPhoneXR是两个不同的手机，也是两个SPU。SKU是商品的具体型号，比如“黑色-iPhoneX-128G-国行-联通版”，“白色-iPhoneX-256G-国行-联通版”就是iPhoneX这个SPU的两个SKU。</p>\n<p>SKU有很多属性，比如上述iPhoneX的SKU属性就包括颜色，容量等等，这种影响到库存和价格的属性也叫销售属性。目前我司前台展示的销售属性就包括Color，Size，Unit，Quantity，Type等等。除了销售属性外，还有很多商品的属性与SKU有关，比如库存，税率等等。</p>\n<p>所以，SKU是电商系统的重要组成部分，而编辑SKU也是商品管理最核心最复杂的功能之一。</p>\n<h2 id=\"业务需求\">业务需求</h2>\n<p>Seller Central开放平台为印度seller提供自主发布管理商品、管理订单、管理退货退款等服务，属于我们目前比较重要的平台业务。</p>\n<p>本文以Seller Central在线商品编辑为例浅谈一下SKU编辑组件的实现。</p>\n<h2 id=\"产品需求\">产品需求</h2>\n<p>最初的prd如下：</p>\n<p><img src=\"https://xiao555.netlify.com/seller-sku-prd\" alt=\"seller-sku-prd\"></p>\n<p>可以看到这是一个表格结构，每行一个sku。我们要实现的功能是：</p>\n<ol>\n<li>展示SKU属性值，库存，Seller Sku(唯一标识)，上下架状态，下架原因</li>\n<li>可编辑SKU属性值，库存，并进行SKU属性格式化和输入值的校验，校验错误信息展示在每一行的最后。</li>\n<li>支持单个SKU上下架</li>\n<li>支持选择多个SKU批量上下架</li>\n<li>支持新增SKU（上图未体现出来）</li>\n</ol>\n<p>因为设计稿规定的主体内容区域宽度有限，不能一次展示这么多列，因此我们最终决定采用首尾列固定，中间部分可以滚动浏览的布局方式。最终效果如下：</p>\n<p><img src=\"https://xiao555.netlify.com/seller-sku-demo\" alt=\"seller-sku-demo\"></p>\n<p>复选框一列和Action是固定的，中间的内容可滚动查看。</p>\n<h2 id=\"组件划分\">组件划分</h2>\n<p>首先，我们对组件进行一下分层：</p>\n<p><img src=\"https://xiao555.netlify.com/seller-table-layout-1\" alt=\"seller-table-layout-1\"></p>\n<p>我们把SKU编辑模块拆成了五部分：</p>\n<ol>\n<li>Table Header 负责展示SKU属性名，Stock，上下架状态等等。</li>\n<li>Table Body 包括Table Row和Add Sku两部分。</li>\n<li>Table Row 负责单个SKU的所有业务逻辑。</li>\n<li>Add Sku 负责新增SKU。</li>\n<li>Table Footer 提供全选和批量上下架的功能。</li>\n</ol>\n<p>对应组件分层，我们的文件结构如下：</p>\n<p><img src=\"https://xiao555.netlify.com/seller-folder\" alt=\"seller-folder\"></p>\n<h2 id=\"ui实现\">UI实现</h2>\n<p>这里采用Table来实现页面布局，本来一开始想用div手动实现，因为各种复杂的情况发现很难用div去模拟table，为了实现对齐效果导致代码很多很乱，遂放弃改为Table。想了一下本来Table就是为了实现这种布局的，我为什么要去费时间用div去实现呢==！</p>\n<p>这里的难点主要是实现首尾列固定，其他都是常规操作。</p>\n<h3 id=\"实现首尾列固定\">实现首尾列固定</h3>\n<p>首尾列固定是通过三个table的组合来实现的，一个table正常渲染，一个展示首列，一个展示尾列，表格列的宽度都是固定的，保证三个table宽度一致。</p>\n<p><img src=\"https://xiao555.netlify.com/seller-three-table\" alt=\"seller-three-table\"></p>\n<p>首尾列定位也有很多方法，这里利用table外层div绝对定位实现，首列的div left为0，尾列 right为0，宽度各自为首尾列的宽度, 超出部分隐藏。</p>\n<p>尾列因为要展示表格的最后一部分，所有尾列的table也通过绝对定位使表格右对齐。同时，绝对定位的table无法撑起外层div的高度，当表格初次渲染或者数据更新的时候，需要计算一下正常table的高度，设置到首尾列表格外层div上。</p>\n<p>为了让中间的table滚动起来，需要给每一列设置宽度，当总宽度超过外层div的宽度，table就可以滚动起来了。而且定宽也使得三个table的宽度一致，而不是浏览器根据可用空间自动分配宽度。这里利用colgroup来设置每一列的宽度。</p>\n<p><img src=\"https://xiao555.netlify.com/seller-table-colgroup.png\" alt=\"seller-table-code\"></p>\n<h2 id=\"逻辑实现\">逻辑实现</h2>\n<p>我们以数据流转为线来说一下逻辑上的实现：</p>\n<p><img src=\"https://xiao555.netlify.com/seller-table-code\" alt=\"seller-table-code\"></p>\n<p>SkuEdit是SKU编辑组件的入口，在这里我们首先会做一次数据初始化处理，把后台返回的数据处理成我们需要的一些数据，并放到Vuex里。Vuex是Vue项目里一个状态管理的工具。SKU的各个Table组件都从这里拿数据，而每个组件里数据的更新也会提交到Vuex里同步到其他组件重新渲染，保证了数据的一致性，也使得三个table从视图到数据都是一模一样的，这样才能模拟一个首尾列固定的表格结构。</p>\n<p>这里主要说一下数据初始化，数据格式化，数据校验。</p>\n<h3 id=\"数据初始化\">数据初始化</h3>\n<p>前端拿到的数据结构是这样的：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-string\">\"skuDTOs\"</span>: [{\n    <span class=\"hljs-string\">\"skuId\"</span>: 100,\n    <span class=\"hljs-string\">\"active\"</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">//</span> 上下架状态\n    <span class=\"hljs-string\">\"stock\"</span>: -2, <span class=\"hljs-string\">//</span> 库存\n    <span class=\"hljs-string\">\"taxRate\"</span>: 0, <span class=\"hljs-string\">//</span> 税率\n    <span class=\"hljs-string\">\"sellerSku\"</span>: <span class=\"hljs-string\">\"test_SellerSku1\"</span>,\n    <span class=\"hljs-string\">\"offlineReason\"</span>: <span class=\"hljs-string\">\"\"</span>,\n    <span class=\"hljs-string\">\"managerOperation\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-string\">\"attributes\"</span>: [{ <span class=\"hljs-string\">//</span> sku属性\n        <span class=\"hljs-string\">\"attrName\"</span>: <span class=\"hljs-string\">\"Color\"</span>,\n        <span class=\"hljs-string\">\"attrbuteId\"</span>: 123123,\n        <span class=\"hljs-string\">\"attrValue\"</span>: <span class=\"hljs-string\">\"Yellow\"</span>\n      },\n      {\n        <span class=\"hljs-string\">\"attrName\"</span>: <span class=\"hljs-string\">\"Size\"</span>,\n        <span class=\"hljs-string\">\"attrbuteId\"</span>: 123124,\n        <span class=\"hljs-string\">\"attrValue\"</span>: <span class=\"hljs-string\">\"L\"</span>\n      },\n      {\n        <span class=\"hljs-string\">\"attrName\"</span>: <span class=\"hljs-string\">\"Style\"</span>,\n        <span class=\"hljs-string\">\"attrbuteId\"</span>: 123124,\n        <span class=\"hljs-string\">\"attrValue\"</span>: <span class=\"hljs-string\">\"Fashion\"</span>\n      }\n    ]\n  },\n  <span class=\"hljs-string\">...</span>\n]</code></pre>\n<p>我们构造了两份数据：</p>\n<ol>\n<li><code>skuAttribute</code>记录了SKU维度展示编辑的属性名及其字段，包括Color，Size，Stock，Active等等。使得表头标题的展示和表格体数据展示顺序一致。</li>\n<li><code>skuList</code>在后台数据的基础上做了一些处理，比如统一attributes中各个属性的顺序，增加了一些业务上需要的字段，如<code>fieldValidateStatus</code>（记录校验状态），<code>errorMsg</code>（记录错误信息）等。</li>\n</ol>\n<h3 id=\"数据校验\">数据校验</h3>\n<p>SKU编辑很重要的一点是对数据进行校验，确保用户输入是正确的值。包括非空校验，是否有非法字符，数字范围校验。校验流程的简化版代码如下：</p>\n<pre><code class=\"language-javascript\">&lt;input type=<span class=\"hljs-string\">'text'</span> @input=<span class=\"hljs-string\">'setValue($event, index, sku, attr)'</span>&gt;\n\n<span class=\"hljs-comment\">/**\n * 设置sku字段值\n * @param {event} event - input or change 事件\n * @param {number} index - sku索引\n * @param {object} originSku - 原始sku数据\n * @param {object} attr - 修改的sku属性 {label: 'color'}\n */</span>\nsetValue (<span class=\"hljs-keyword\">event</span>, index, originSku, attr) {\n  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-keyword\">event</span>.target.<span class=\"hljs-keyword\">value</span>\n  <span class=\"hljs-keyword\">let</span> data = { [attr.key]: <span class=\"hljs-keyword\">value</span> }\n  <span class=\"hljs-comment\">// 如果更改了值, 设置sku needConfirm属性为true</span>\n  <span class=\"hljs-keyword\">if</span> (originSku[attr.key] !== <span class=\"hljs-keyword\">value</span>) {\n    data.needConfirm = <span class=\"hljs-literal\">true</span>\n  }\n  commit(<span class=\"hljs-string\">'manageProducts/SET_SKU_FIELD'</span>, { index, data }) <span class=\"hljs-comment\">// 更新Vuex</span>\n  validateField(attr) <span class=\"hljs-comment\">// 校验</span>\n}\n\n<span class=\"hljs-comment\">// validateField是校验逻辑的入口，根据校验的字段调不同的方法</span>\nvalidateField (attr) {\n  <span class=\"hljs-keyword\">switch</span>(attr.label) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'stock'</span>:\n      validateStock() <span class=\"hljs-comment\">// 校验库存</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Tax Rate(%)'</span>:\n      validateTaxRate() <span class=\"hljs-comment\">// 校验税率</span>\n    <span class=\"hljs-comment\">// 纯展示的字段不做校验</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'seller Sku'</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Status'</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Reason for Inactive'</span>:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">default</span>:\n      validateSkuAttribute(attr) <span class=\"hljs-comment\">// 校验SKU属性</span>\n  }\n},</code></pre>\n<p>通过绑定input事件触发流程，先把数据更新到vuex里，再执行校验。<code>needConfirm</code>是个优化UX的方法，如果用户编辑后忘了提交就去做其他操作，通过判断这个字段可以提醒用户先把你的改动提交了。</p>\n<p>具体校验我们以校验非法字符为例：</p>\n<pre><code class=\"language-javascript\">// 校验非法字符\nlet includeInvalidSymbols = validateInvalidSymbols(value)<span class=\"hljs-built_in\">\nif </span>(includeInvalidSymbols.length !== 0) {\n  this.setSkuField({\n    errorMsg: `Invalid Symbol <span class=\"hljs-string\">\"${includeInvalidSymbols.join(' ')}\"</span>, please<span class=\"hljs-built_in\"> check </span>it.`,\n    fieldValidateStatus: { [attr.key]: true }\n  })\n <span class=\"hljs-built_in\"> return </span>false\n}</code></pre>\n<p><code>validateInvalidSymbols</code>是我们一个校验非法字符的公共工具函数，用在很多地方，返回值是非法字符组成的数组。如果数组长度不为0则说明有非法字符。我们会把非法字符放到报错文案里赋给当前SKU的<code>errorMsg</code>字段，展示在这一行最后，这样用户看文案就知道哪些是非法字符。同时<code>fieldValidateStatus</code>也会记录当前字段校验不通过。会高亮对应的input输入框，用户也会知道哪里校验失败了。这些也是优化UX的一些小方法。</p>\n<p>另外，提交单个SKU编辑和新增SKU的时候，还会校验是否有重复的SKU属性。总之，需要校验的情况很多，也复杂，有的校验条件跟状态有关。前端校验会在向后端发请求之前把问题暴露出来，减少不必要的请求。后端也有兜底的校验，一起确保SKU编辑功能正常。</p>\n<h3 id=\"数据格式化\">数据格式化</h3>\n<p>像Color, Size这些SKU属性，用户编辑之后，前端会进行格式化处理比如xl -&gt; XL, xxl -&gt; XXL, 2xl -&gt; 2XL, blue white -&gt; Blue White等等提升用户体验。</p>\n<pre><code class=\"language-javascript\">&lt;input type=<span class=\"hljs-string\">'text'</span> @change=<span class=\"hljs-string\">'formatInputValue(attr)'</span>&gt;\n\n<span class=\"hljs-comment\">/**\n * 格式化input输入值\n * @param {object} attr - 要校验的属性对象 {key: 'color'}\n */</span>\nformatInputValue (attr) {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">value</span>\n  <span class=\"hljs-title\">switch</span> (<span class=\"hljs-params\">attr.key</span>)</span> {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'stock'</span>:\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'taxRate'</span>:\n      <span class=\"hljs-keyword\">value</span> = <span class=\"hljs-keyword\">this</span>.sku[attr.key].toString().trim()\n      <span class=\"hljs-comment\">// 如果非空字符串且可转数字，则转为数字类型</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">value</span> !== <span class=\"hljs-string\">''</span> &amp;&amp; !isNaN(<span class=\"hljs-keyword\">value</span>)) {\n        <span class=\"hljs-keyword\">value</span> = Number(<span class=\"hljs-keyword\">value</span>)\n      }\n      <span class=\"hljs-keyword\">this</span>.$store.commit(<span class=\"hljs-string\">'manageProducts/SET_SKU_FIELD'</span>, {\n        index: <span class=\"hljs-keyword\">this</span>.index,\n        data: { [attr.key]: <span class=\"hljs-keyword\">value</span> }\n      })\n      <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">default</span>:\n      <span class=\"hljs-keyword\">value</span> = formatSkuAttributeValue(<span class=\"hljs-keyword\">this</span>.sku.attributes[attr.attrIndex].attrValue.trim())\n      <span class=\"hljs-keyword\">this</span>.$store.commit(\n        <span class=\"hljs-string\">'manageProducts/SET_SKU_ATTRIBUTES'</span>,\n        { index: <span class=\"hljs-keyword\">this</span>.index, attrIndex: attr.attrIndex, <span class=\"hljs-keyword\">value</span> },\n      )\n  }\n}</code></pre>\n<p>其中<code>formatSkuAttributeValue</code> 就是我们格式化SKU属性的工具函数。这里有两个问题值得探讨：</p>\n<ol>\n<li>为什么不是监听input事件而是change事件？input是输入的时候就触发，而change是<code>&lt;input&gt;</code>失焦后才会触发。</li>\n<li>像库存，税率这些数字为什么不用<code>&lt;input type=&#39;number&#39;&gt;</code>处理，格式化的时候还要转成数字。</li>\n</ol>\n<p>第一个问题，其实一开始绑定的就是input事件，这样，用户边输入的时候，就会进行格式化，输入a就会变成A。但是这样有个问题，如果用户想输入Blue White，因为我在格式化的时候会去除首尾空格，所以空格怎么也输不进去(对不起，是我坑了你们)。所以后来改成了监听change事件，当用户输入完成后进行format，即输入<code>blue white</code>，输入框失焦后再格式化成<code>Blue White</code>。</p>\n<p>第二个问题，其实设置<code>type=&#39;number&#39;</code>只是让浏览器按照数字的方式渲染控件，可以启用内置的验证，步进箭头等等。但是element的value还是字符串类型的并不是数字。而且内置的验证虽然方便，但不可控，还有许多问题，比如科学计数法的<code>e</code>是可输入的，但是我们并不需要。所以我们选择用js去控制输入而不是浏览器内置的那一套。</p>\n<h3 id=\"todo\">TODO</h3>\n<p>需求开发时因为任务重，时间紧，写完之后还是感觉有很多可以优化的地方，只是一直没时间看。写这篇文章的时候就发现了几处：</p>\n<ol>\n<li>TableHeader和TableBody是分开写在两个Table里的，外层div和table之前其实还有两个div，一个包含header的table，一个包含body的table。我就在想，为什么这么实现来着，好像没什么理由。我就试了一下写在同一个table里，发现可行，而且省掉了不少代码...</li>\n<li>TableRow里的input输入框，button操作按钮等等其实是写在TableBody里通过slot传进去的。为什么不直接写到TableRow里呢，这样导致TableBody里融合了不少业务逻辑，分层不明确。我们的组件分层设计上TableHeader和TableBody应该是尽量只负责布局，单个SKU操作的业务逻辑放在TableRow里。Slot的方式也增加了逻辑复杂度。</li>\n</ol>\n<p>当然，有时间的话可以优化一下。</p>\n<h2 id=\"总结\">总结</h2>\n<p>SKU编辑还是很复杂的，也有很多UX优化和细节，这里就简单说了一下。其实SKU维度的每一个字段都可以有一堆业务逻辑。比如最近，对鞋类商品的Size属性进行尺码转换的需求，就基于类目，尺码，尺码单位加了一堆逻辑。所以，像这样的业务组件，也要考虑可扩展性。因为业务是要不断满足需求的，需求又是永远不可能满足的。</p>\n<p>第一次写业务组件，很紧张，多多指教！</p>\n","title":"浅谈 SKU 编辑组件的实现","tags":["SKU"],"slug":"on-the-implementation-of-sku-editing-components","createDate":1559552460000,"id":"on-the-implementation-of-sku-editing-components","thumb":"https://images.unsplash.com/photo-1580843527464-30b0d5e8dbbb?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p><a href=\"https://cli.vuejs.org/zh/\">Vue Cli 3</a>发布了UI功能，能够在浏览器上访问本地的Vue Cli创建的项目，安装依赖，运行npm script等等，十分强大。自己在升级<a href=\"https://github.com/xiao555/mock-server\">mock-server</a>的时候，也希望有一个浏览器界面访问本地的mock配置文件。</p>\n","content":"<p><a href=\"https://cli.vuejs.org/zh/\">Vue Cli 3</a>发布了UI功能，能够在浏览器上访问本地的Vue Cli创建的项目，安装依赖，运行npm script等等，十分强大。自己在升级<a href=\"https://github.com/xiao555/mock-server\">mock-server</a>的时候，也希望有一个浏览器界面访问本地的mock配置文件。</p>\n<p>那么怎么实现浏览器端访问本地文件呢？首先想到的是Node的fs模块，它提供了API可以访问本地的文件。可是能在浏览器端使用fs模块吗？当然不能，不然也太不安全了，随便一个网站都能访问本地的文件...</p>\n<p>于是研究了一下Vue Cli 3的做法，发现他是本地开启一个Node服务，访问本地的文件，通过GraphQL来与前端通信。这样就实现了前端访问本地的文件系统。</p>\n<p>话不多说，怎么去实现这样一个GraphQL服务呢？    为了方便开发，我们使用<a href=\"https://github.com/apollographql/apollo-server\">apollo-server</a>来实现graphQL服务。众所周知，GraphQL是一个使用基于类型系统来执行查询的服务端运行时。我们需要定义其数据类型和相应的解析函数，对应apollo-server上就是typeDefs和resolvers。\n对于文件类型，我们定义如下：</p>\n<pre><code class=\"language-javascript\">exports.types  =  gql`\n\n   <span class=\"hljs-built_in\"> type </span> Folder {\n\n        name: String!\n\n        path: String!\n\n        children: [Folder]\n\n        hidden: Boolean\n\n        isDirectory: Boolean\n\n        isMockConfig: Boolean\n\n    }\n\n   <span class=\"hljs-built_in\"> type </span> Query {\n\n        folderCurrent: Folder\n\n    }\n\n   <span class=\"hljs-built_in\"> type </span> Mutation {\n\n        folderOpen(path: String!): Folder\n\n        folderOpenParent: Folder\n\n        getMockConfig(path: String!): [MockItem]\n\n    }\n\n`</code></pre>\n<p>其中Folder是我们定义的类型，Query和Mutation是查询和变更，类似于GET请求和POST请求，我们定义了其字段和返回的数据类型。我们可以看到相当于一共有三个接口，查询当前目录，打开指定目录，打开上层目录。接下来就是实现他们的解析函数了：</p>\n<pre><code class=\"language-javascript\">exports.resolves  = {\n\n    Folder: {\n\n        children: <span class=\"hljs-function\"> <span class=\"hljs-params\">_folder</span>  =&gt;</span>  folder.<span class=\"hljs-built_in\">list</span><span class=\"hljs-constructor\">Children(<span class=\"hljs-params\">_folder</span>.<span class=\"hljs-params\">path</span>)</span>\n\n    },\n\n    Query: {\n\n        folderCurrent:<span class=\"hljs-function\"> <span class=\"hljs-params\">()</span> =&gt;</span>  folder.get<span class=\"hljs-constructor\">Current()</span>\n\n    },\n\n    Mutation: {\n\n        folderOpen:<span class=\"hljs-function\"> (<span class=\"hljs-params\">root</span>, { <span class=\"hljs-params\">path</span> }) =&gt;</span>  folder.<span class=\"hljs-keyword\">open</span>(path),\n\n        folderOpenParent:<span class=\"hljs-function\"> <span class=\"hljs-params\">()</span> =&gt;</span>  folder.<span class=\"hljs-keyword\">open</span><span class=\"hljs-constructor\">Parent(<span class=\"hljs-params\">cwd</span>.<span class=\"hljs-params\">get</span>()</span>),\n\n        getMockConfig:<span class=\"hljs-function\"> (<span class=\"hljs-params\">root</span>, { <span class=\"hljs-params\">path</span> }) =&gt;</span>  folder.get<span class=\"hljs-constructor\">MockConfig(<span class=\"hljs-params\">path</span>)</span>\n\n    }\n\n}</code></pre>\n<p>folder部分实现如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span>  generateFolder  =  <span class=\"hljs-keyword\">file</span>  =&gt; {\n\n    <span class=\"hljs-keyword\">return</span> {\n\n        name:  path.basename(<span class=\"hljs-keyword\">file</span>),\n\n        path:  <span class=\"hljs-keyword\">file</span>\n\n    }\n\n}\n\n<span class=\"hljs-keyword\">const</span>  listChildren  =  <span class=\"hljs-keyword\">file</span>  =&gt; {\n\n    <span class=\"hljs-keyword\">const</span>  files  =  fs.readdirSync(<span class=\"hljs-keyword\">file</span>, 'utf8')\n\n    <span class=\"hljs-keyword\">return</span>  files.map(<span class=\"hljs-keyword\">file</span>  =&gt; {\n\n        <span class=\"hljs-keyword\">const</span>  fullPath  =  path.join(cwd.<span class=\"hljs-built_in\">get</span>(), <span class=\"hljs-keyword\">file</span>)\n\n        <span class=\"hljs-keyword\">return</span> {\n\n            path:  fullPath,\n\n            name:  <span class=\"hljs-keyword\">file</span>,\n\n            hidden:  isHidden(fullPath),\n\n            isDirectory:  isDirectory(fullPath),\n\n            isMockConfig:  isMockConfig(fullPath)\n\n        }\n\n    })\n\n}\n\n<span class=\"hljs-keyword\">const</span>  getCurrent  = () =&gt; {\n\n    <span class=\"hljs-keyword\">const</span>  base  =  cwd.<span class=\"hljs-built_in\">get</span>()\n\n    <span class=\"hljs-keyword\">return</span>  generateFolder(base)\n\n}\n\n<span class=\"hljs-keyword\">const</span>  <span class=\"hljs-keyword\">open</span>  =  <span class=\"hljs-keyword\">file</span>  =&gt; {\n\n    cwd.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-keyword\">file</span>)\n\n    <span class=\"hljs-keyword\">return</span>  generateFolder(cwd.<span class=\"hljs-built_in\">get</span>())\n\n}\n\n<span class=\"hljs-keyword\">const</span>  openParent  =  <span class=\"hljs-keyword\">file</span>  =&gt; {\n\n    <span class=\"hljs-keyword\">const</span>  newFile  =  path.dirname(<span class=\"hljs-keyword\">file</span>)\n\n    cwd.<span class=\"hljs-keyword\">set</span>(newFile)\n\n    <span class=\"hljs-keyword\">return</span>  generateFolder(cwd.<span class=\"hljs-built_in\">get</span>())\n\n}</code></pre>\n<p>cwd是记录当前目录的一个对象，默认是node进程的当前目录。查询当前目录就是返回cwd目录的各个字段，打开指定目录就是设置cwd为指定目录，打开上层目录就是设置cwd为cwd的上层目录。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span>  cwd  =  process.cwd()\n\n\nmodule.exports  = {\n\n    ge<span class=\"hljs-variable\">t:</span> () =&gt;  cwd,\n\n    <span class=\"hljs-keyword\">se</span><span class=\"hljs-variable\">t:</span>  <span class=\"hljs-keyword\">file</span>  =&gt; {\n\n        <span class=\"hljs-keyword\">file</span>  =  normalize(<span class=\"hljs-keyword\">file</span>)\n\n        <span class=\"hljs-keyword\">if</span> (!fs.existsSync(<span class=\"hljs-keyword\">file</span>)) <span class=\"hljs-keyword\">return</span>\n\n        cwd  =  <span class=\"hljs-keyword\">file</span>\n\n    }\n\n}</code></pre>\n<p>然后，通过中间件的形式挂载到express服务上，我们的GraphQL就搭建成功了：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)\n<span class=\"hljs-keyword\">const</span> { ApolloServer } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'apollo-server-express'</span>)\n<span class=\"hljs-keyword\">const</span> typeDefs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./graphql/type-defs'</span>)\n<span class=\"hljs-keyword\">const</span> resolvers = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./graphql/resolves'</span>)\n<span class=\"hljs-keyword\">const</span> app = express()\n\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> ApolloServer({ typeDefs, resolvers })\nserver.applyMiddleware({ app })\n\napp.listen(port, host)</code></pre>\n<p>apollo-server 内置了GraphQL Playground，我们可以检查配置是否正确：</p>\n<p><img src=\"https://xiao555.netlify.com/graphql-playground.png\" alt=\"graphql-playground.png\"></p>\n<p>这段查询的意思是我们要获取当前目录的children字段，因为children返回的是folder组成的数组，我们指定需要每个folder的name和path，结果就返回了每个子目录/文件的name和path。    GraphQL的好处就是我们在定义了类型之后，前端需要什么字段后台就返回什么字段，不需要手动处理。缺点就是比较不容易理解，定义类型麻烦，不过也是一劳永逸。</p>\n<p>整个文件访问器最终效果如下：</p>\n<p><img src=\"https://xiao555.netlify.com/mock-server-ui.png\" alt=\"mock-server-ui.png\"></p>\n<p>项目地址：<a href=\"https://github.com/xiao555/mock-server/tree/master/ui\">https://github.com/xiao555/mock-server/tree/master/ui</a></p>\n","title":"用 GraphQL 写一个本地文件访问器","tags":["GraphQL"],"slug":"writing-a-local-file-accessor-with-graphql","createDate":1554065280000,"id":"writing-a-local-file-accessor-with-graphql","thumb":"https://images.unsplash.com/photo-1581147378940-fe40824303b9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<h3 id=\"简介\">简介</h3>\n<p>cf-mock-server 是目前前端二组正在使用的mock数据解决方案，使得前端在开发过程中可自定义接口数据，不依赖后端服务，修改数据热更新，可以方便地测试不同情况的数据，提高了开发效率。</p>\n<p>在设计上，既可以单独跑一个Node服务，也可以作为中间件挂载到其他服务上，增强了可扩展性。有比较完善的测试用例，对核心的中间件代码和工具类函数进行单元测试，覆盖率99%。目前放在个人<a href=\"https://github.com/xiao555/mock-server\">Github</a>上维护，并搭配<a href=\"https://travis-ci.org/xiao555/mock-server\">Travis Ci</a>部署了持续集成环境，欢迎star。</p>\n","content":"<h3 id=\"简介\">简介</h3>\n<p>cf-mock-server 是目前前端二组正在使用的mock数据解决方案，使得前端在开发过程中可自定义接口数据，不依赖后端服务，修改数据热更新，可以方便地测试不同情况的数据，提高了开发效率。</p>\n<p>在设计上，既可以单独跑一个Node服务，也可以作为中间件挂载到其他服务上，增强了可扩展性。有比较完善的测试用例，对核心的中间件代码和工具类函数进行单元测试，覆盖率99%。目前放在个人<a href=\"https://github.com/xiao555/mock-server\">Github</a>上维护，并搭配<a href=\"https://travis-ci.org/xiao555/mock-server\">Travis Ci</a>部署了持续集成环境，欢迎star。</p>\n<h3 id=\"features\">Features</h3>\n<ul>\n<li>支持中间件方式挂载服务，可用于Express和Koa搭建的Node服务</li>\n<li>支持单独开启一个Koa服务提供mock数据</li>\n<li>支持命令行方式启动服务</li>\n<li>修改配置文件热更新</li>\n<li>支持自定义Response Header</li>\n<li>支持请求参数配置使用正则表达式</li>\n<li>支持请求参数不完全匹配</li>\n<li>支持RESTful风格的API</li>\n<li>支持请求路径的模糊匹配</li>\n</ul>\n<h3 id=\"代码\">代码</h3>\n<p>项目代码结构：</p>\n<pre><code>.\n|<span class=\"hljs-string\">__lib\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__middleware // node 中间件\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__index.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__parse.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__match.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__server // node server\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__koa.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__utils // 工具类\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__log.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__index.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__error.js\n</span>|<span class=\"hljs-string\">__test // 测试\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__expressMiddleware.test.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__utils.test.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">__koaMiddleware.test.js</span></code></pre><p><code>middleware</code> 中的<code>index.js</code>提供了express和koa的中间件接口，以express为例：</p>\n<p><img src=\"https://xiao555.netlify.com/8c7507eb7f974280b065655bc792b10e_carbon1.png\" alt=\"8c7507eb7f974280b065655bc792b10e_carbon1.png\"></p>\n<p>而<code>parse.js</code> 负责在注册中间件前将用户的API配置处理成我们需要的格式：</p>\n<p><img src=\"https://xiao555.netlify.com/e3fbe97347384eb98a3a9723d7bf16c1_carbon2.png\" alt=\"e3fbe97347384eb98a3a9723d7bf16c1_carbon2.png\"></p>\n<p><code>match.js</code> 则是当请求经过中间件时，去匹配我们处理过的API配置，找到对应的value：</p>\n<p><img src=\"https://xiao555.netlify.com/7c5cd19c5fc4434cbd5af6b8d7a48cf9_carbon3.png\" alt=\"7c5cd19c5fc4434cbd5af6b8d7a48cf9_carbon3.png\"></p>\n<p>然后对value进行解析，如果是文件路径则返回文件的内容，如果是JSON字符串则返回json。</p>\n<p>同时，我们定义了自己的错误类型去显示及定位错误信息，当配置文件有问题时或请求匹配有问题时都会将错误信息展示出来：</p>\n<p><img src=\"https://xiao555.netlify.com/7d17400db60c42b0ace2c300472cbdcc_carbon4.png\" alt=\"7d17400db60c42b0ace2c300472cbdcc_carbon4.png\"></p>\n<p><img src=\"https://xiao555.netlify.com/9abc17654d9c40ee97c9fb2553dfff62_image.png\" alt=\"9abc17654d9c40ee97c9fb2553dfff62_image.png\"></p>\n<p><code>utils/index.js</code> 则是一些工具类函数，例如路径的模糊匹配(这个算法不知道大家有没有更好的解)：\n<img src=\"https://xiao555.netlify.com/101305610fb74a18881da94e30618393_carbon5.png\" alt=\"101305610fb74a18881da94e30618393_carbon5.png\"></p>\n<p>最后，这一系列的功能需要有完善的测试用例保证其可维护性，以测试koa中间件功能为例：\n<img src=\"https://xiao555.netlify.com/fbc52d1cc9054f418d31fce33b864e70_carbon6.png\" alt=\"fbc52d1cc9054f418d31fce33b864e70_carbon6.png\"></p>\n<p>测试结果，最后是代码覆盖率：\n<img src=\"https://xiao555.netlify.com/df598ff1090441aca47ff476c80e8e81_carbon7.png\" alt=\"df598ff1090441aca47ff476c80e8e81_carbon7.png\"></p>\n<p>以上，欢迎各路大神code review，我自己也在不断优化代码，尽量做到简洁，可读性强。<code>match.js</code>以及<code>parse.js</code>的代码改了N次，因为同组的小伙伴看了直呼看不懂，其实我自己过几天也看不懂==</p>\n<p>严格来说不算<strong>线上运行的代码</strong>，但是也解决了平时开发的效率问题，总之晒码大赛分母喜+1</p>\n","title":"cf-mock-server：前端 mock 数据解决方案","tags":["mock"],"slug":"cf-mock-server-front-end-mock-data-solution","createDate":1540133760000,"id":"cf-mock-server-front-end-mock-data-solution","thumb":"https://images.unsplash.com/photo-1580961279343-3c42a677e159?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>项目地址：<a href=\"https://www.npmjs.com/package/cf-mock-server\">cf-mock-server</a>\nGithub: <a href=\"https://github.com/xiao555/mock-server\">Mock Server</a></p>\n<h2 id=\"需求背景\">需求背景</h2>\n<p>刚来公司实习，了解到有这么一个需求：因为我们是前后端分离的开发模式，了解业务需求后，前后端需要规定好接口，我们用的是<code>postman</code>，后端写好接口，请求格式，返回格式等，前端直接参考着用就行。但是在前端后端同时开工的情况下，可能前端需要数据的时候后端接口还没写好，这时候就需要我们自己mock一些数据来测试一下功能是否完成。</p>\n<p>在这之前，前端组是用Fiddler等工具通过拦截api请求，根据设置的映射表规则，返回指定静态文件作为http响应来实现的。由于Fiddler对Mac OS不友好，需要找到替代方案。</p>\n","content":"<p>项目地址：<a href=\"https://www.npmjs.com/package/cf-mock-server\">cf-mock-server</a>\nGithub: <a href=\"https://github.com/xiao555/mock-server\">Mock Server</a></p>\n<h2 id=\"需求背景\">需求背景</h2>\n<p>刚来公司实习，了解到有这么一个需求：因为我们是前后端分离的开发模式，了解业务需求后，前后端需要规定好接口，我们用的是<code>postman</code>，后端写好接口，请求格式，返回格式等，前端直接参考着用就行。但是在前端后端同时开工的情况下，可能前端需要数据的时候后端接口还没写好，这时候就需要我们自己mock一些数据来测试一下功能是否完成。</p>\n<p>在这之前，前端组是用Fiddler等工具通过拦截api请求，根据设置的映射表规则，返回指定静态文件作为http响应来实现的。由于Fiddler对Mac OS不友好，需要找到替代方案。</p>\n<h2 id=\"方案调研\">方案调研</h2>\n<p>我当时把这个需求接了下来，因为自己已经有了一个初步的方案，就是本地跑一个node服务器，维护一个api映射关系，根据不同的请求返回对应的静态文件里的数据。</p>\n<p>当然，只是我当时想的一种，是不是真要这么做还要研究一下其他公司的方案。于是搜到了这篇文章<a href=\"https://github.com/CntChen/cntchen.github.io/issues/1\">前后端分离开发模式的 mock 平台预研</a>, 文章里提到了几种方案而且列出了各自的优缺点：</p>\n<ol>\n<li>硬编码数据</li>\n<li>请求拦截 &amp; mock 数据</li>\n<li>本地 mock 服务器</li>\n<li>代理服务器（ charles or fiddler）</li>\n</ol>\n<p>以及提到了一些库和框架，比如<a href=\"https://github.com/marak/Faker.js/\">faker.js</a>,   <a href=\"https://github.com/thx/RAP\">RAP</a>等等。结合我们自己的情况，我认为本地mock服务器是最好的方案：</p>\n<ol>\n<li>硬编码肯定不行，难道要自己频繁的手动增删代码？</li>\n<li>请求拦截，mock数据，测试环境，线上环境要切换，而且我们不需要去生成随机的数据，而是将返回的数据保存在静态文件中。所以实际操作起来不如本地mock服务器</li>\n<li>代理服务器，要代替的就是这种方案</li>\n<li>其他库和框架，用不上，我们只需要一个轻量的代理方案</li>\n<li>本地mock服务器，比较方便且自由的实现方式，可以统一管理API配置，更方便的实现跨域，可扩展性高方便以后增加功能</li>\n</ol>\n<p>好，就这么确（qin）定了！</p>\n<h2 id=\"技术选型\">技术选型</h2>\n<p>首先需要一个node框架来跑我们的mock服务。虽然市面上相关的工具<code>Express</code>占据大多数，我还是选择了<code>Koa</code>, koa写起来多优雅，而且我之前用的也基本都是koa。当然<code>Express</code>可能更稳定，生态环境更丰富，但是<code>koa</code>足够了。</p>\n<p>于是把我写<a href=\"https://github.com/xiao555/blog/tree/master/blog/server\">Blog</a>的后端基本框架搬过来了(所以主要是为了方便 : D</p>\n<p>保留了 中间件(cors, bodyparser, helmet), 日志(log4js)，利用fs模块读取API配置文件和数据文件构成router。</p>\n<h2 id=\"技术实现\">技术实现</h2>\n<h3 id=\"核心逻辑\">核心逻辑</h3>\n<p>选型定好了，下面开始实现。我们要做的就是根据api配置创建不同的路由，根据不同的参数返回相应的数据。</p>\n<p>首先，我们规定的API 配置文件是这样的：</p>\n<pre><code class=\"language-javascript\">// config.js\n// 数据目录\nexports.dataFile = <span class=\"hljs-string\">'../{YOUDATAFOLDER}'</span>\n<span class=\"hljs-comment\">/**\n * KEY: '{METHOD} {router}'\n * VALUE: 数据文件路径，相对于dataFile\n */</span>\nexports.api = {\n  // <span class=\"hljs-keyword\">GET</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">user</span>\n  <span class=\"hljs-string\">'GET /api/users/all'</span>: <span class=\"hljs-string\">'all_users.txt'</span>,\n  // <span class=\"hljs-keyword\">GET</span> <span class=\"hljs-keyword\">user</span> named <span class=\"hljs-string\">'tom'</span>\n  <span class=\"hljs-string\">'GET /api/users/?name=tom'</span>: <span class=\"hljs-string\">'users/tom.json'</span>,\n  // <span class=\"hljs-keyword\">GET</span> <span class=\"hljs-keyword\">user</span> whatever the <span class=\"hljs-type\">name</span> <span class=\"hljs-keyword\">is</span>\n  <span class=\"hljs-string\">'GET /api/users/?name=/^A.*\\\\^$/'</span>: <span class=\"hljs-string\">'users/example.json'</span>,\n}</code></pre>\n<p>接下来，我们要根据这个配置文件创建路由，由于我们用<code>koa-router</code>来配置路由，比如：</p>\n<pre><code class=\"language-javascript\">router.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-string\">'/hello'</span>, ctx =&gt; { <span class=\"hljs-keyword\">return</span> ctx.body = <span class=\"hljs-string\">'Hello World!'</span> })</code></pre>\n<p> 简单提炼一下就是</p>\n<pre><code class=\"language-javascript\">router[<span class=\"hljs-string\">$METHOD</span>](<span class=\"hljs-link\">$PATH, ctx =&gt; { /** Handle Router **/ }</span>)</code></pre>\n<p>所以，读取配置文件时，构建了如下格式的对象：</p>\n<pre><code>{\n    <span class=\"hljs-attr\">\"/users/all\"</span>: {\n        <span class=\"hljs-attr\">\"get\"</span>:[\n            {\n                <span class=\"hljs-attr\">\"params\"</span>:<span class=\"hljs-string\">\"name=sam\"</span>,\n                <span class=\"hljs-attr\">\"data\"</span>:<span class=\"hljs-string\">\"users/example\"</span>\n            },\n            {\n                <span class=\"hljs-attr\">\"data\"</span>:<span class=\"hljs-string\">\"searchOrder\"</span>\n            }\n        ]\n    },\n    <span class=\"hljs-attr\">\"/api/users/\"</span>:{\n        <span class=\"hljs-attr\">\"get\"</span>:[\n            {\n                <span class=\"hljs-attr\">\"params\"</span>:<span class=\"hljs-string\">\"name=/^A.*\\\\^$/\"</span>,\n                <span class=\"hljs-attr\">\"data\"</span>:<span class=\"hljs-string\">\"users/example.json\"</span>\n            },\n            {\n                <span class=\"hljs-attr\">\"params\"</span>:<span class=\"hljs-string\">\"name=tom\"</span>,\n                <span class=\"hljs-attr\">\"data\"</span>:<span class=\"hljs-string\">\"users/tom.json\"</span>\n            }\n        ]\n    }\n}</code></pre><p>这样一个path对应不同的method，方便对每个路径注册不同方法的路由，每个方法后面又对应不同的参数情况，这些就在后面的处理函数中判断当前的请求匹配哪一个情况然后返回对应data文件中的数据。</p>\n<p>请求的参数可以通过<code>ctx.query</code>获取，如：<code>{&quot;name&quot;:&quot;xiao555&quot;,&quot;age&quot;:&quot;18&quot;}</code>，根据配置文件解析结果我们也可以很轻松的将<code>params</code>字段转化成<code>Object</code> 与 <code>ctx.query</code> 作对比来判断匹配的是哪种情况。这里有几个问题需要注意：</p>\n<ol>\n<li>判断逻辑要符合要求的匹配规则\n比如不带参数的请求只会跟不带参数的匹配，不会去跟带参数的情况比较\n比如我们想做成优先匹配，那就要从头开始遍历，遇到匹配的就跳出循环返回结果\n更灵活一点比如模糊匹配，即只要请求的参数字段跟配置的相应字段都能对上，就算匹配成功，比如：<code>/user/?name=obama&amp;age=18: xxxx， /user/?name=obama: xxxx</code>当访问<code>/user/?name=obama</code>的时候匹配到了<code>/user/?name=obama&amp;age=18</code>就不往下匹配了</li>\n<li>请求参数可能会有同名的情况\n比如<code>/user/?name=obama&amp;name=tom</code>这种情况<code>ctx.query</code>的结果会是<code>{&quot;name&quot;:[&quot;obama&quot;, &quot;tom&quot;]}</code>, 所以要做好对参数值是数组的情况的判断</li>\n</ol>\n<p>功能上实现了，我们可以结合具体使用情况做一些小的改进：</p>\n<ol>\n<li>有时候，请求的参数是动态改变的，但是模拟数据可以用同一份。这时候我们可以用<code>*</code>做一个占位，如果配置里的参数值是<code>*</code>的话，那么无论请求里对应参数的值是什么都算匹配。</li>\n<li>实际开发时我们API配置是不断去添加更新的，需要不断的重启mock server，很不方便，于是我们可以做一个监听文件改动自动更新的功能。最初我选择的是用<a href=\"https://github.com/remy/nodemon\">nodemon</a>, 写一个json文件。但是其实有不用重启服务器就可以自动更新router的方法，不过这里不表，后面再说。</li>\n</ol>\n<h3 id=\"进阶改造\">进阶改造</h3>\n<h4 id=\"发布到npm\">发布到npm</h4>\n<p>使用过程中我们直接将mock server放到项目文件里：</p>\n<pre><code><span class=\"hljs-bullet\">- </span>build/\n<span class=\"hljs-bullet\">- </span>config/\n<span class=\"hljs-bullet\">- </span>mockServer\n<span class=\"hljs-bullet\">    - </span>config.js\n<span class=\"hljs-bullet\">    - </span>data/<span class=\"hljs-emphasis\">**/*</span>.json\n<span class=\"hljs-bullet\">    - </span>router/index.js\n<span class=\"hljs-bullet\">    - </span>middleware/*.js\n<span class=\"hljs-bullet\">    - </span>utils/*.js\n<span class=\"hljs-bullet\">    - </span>app.js\n<span class=\"hljs-bullet\">    - </span>package.json\n<span class=\"hljs-bullet\">    - </span>nodemon.json\n<span class=\"hljs-bullet\">    - </span>...\n<span class=\"hljs-bullet\">- </span>src/\n<span class=\"hljs-bullet\">- </span>static/\n<span class=\"hljs-bullet\">- </span>...</code></pre><p>这么多文件中，在开发过程中我们关心的只有<code>config.js</code> 还有<code>data</code>目录下的数据文件而已，所以为了达到隐藏其他文件的目的，打算把mock server传到<a href=\"https://www.npmjs.com/\">npm</a>上，通过引入<code>node_modules</code>来实现。那么引入<code>node_modules</code>怎么去用呢？</p>\n<p>这里我参考的<a href=\"https://github.com/mochajs/mocha\">Mocha</a>的实现，因为之前还简单分析过它的<a href=\"https://www.xiao555.com.cn/posts/mocha\">源码</a>。两种方法，一种是命令行接口，一种是手动创建mock server实例。</p>\n<p>其实也就是把之前写的mock server封装成一个<code>Mock</code>构造函数传出去，用的时候我们需要<code>new</code>一个实例，实例里创建并绑定了Koa的一个实例。<code>Mock</code>构造函数有一下几个方法：</p>\n<pre><code><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Mock</span>.</span></span>prototype.setPort <span class=\"hljs-comment\">// 设置端口</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Mock</span>.</span></span>prototype.getConfig <span class=\"hljs-comment\">// 获取配置文件</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Mock</span>.</span></span>prototype.createRouter <span class=\"hljs-comment\">// 创建路由</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Mock</span>.</span></span>prototype.showlog <span class=\"hljs-comment\">// 配置log</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Mock</span>.</span></span>prototype.startApp <span class=\"hljs-comment\">// 开启服务</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Mock</span>.</span></span>prototype.watchFile <span class=\"hljs-comment\">// 监听文件改动</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Mock</span>.</span></span>prototype.rerun <span class=\"hljs-comment\">// 应用新的路由配置</span>\n<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Mock</span>.</span></span>prototype.run <span class=\"hljs-comment\">// 服务启动入口</span></code></pre><p>用法示例：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// mock.js</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">let</span> Mock = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'cf-mock-server'</span>)\n\n<span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Mock({\n  <span class=\"hljs-attr\">config</span>: path.join(__dirname, <span class=\"hljs-string\">'./config'</span>), <span class=\"hljs-comment\">// 配置文件</span>\n  <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>,                    <span class=\"hljs-comment\">// 观察模式，监听配置文件改动自动应用</span>\n})\n\napp.run()</code></pre>\n<p>而命令行的方法用的<a href=\"https://github.com/tj/commander.js/\">commander.js</a></p>\n<pre><code class=\"language-javascript\">const program = require(<span class=\"hljs-string\">'commander'</span>);\n\nprogram\n  .version(<span class=\"hljs-type\">JSON</span>.parse(fs.readFileSync(<span class=\"hljs-type\">path</span>.<span class=\"hljs-keyword\">join</span>(__dirname, <span class=\"hljs-string\">'..'</span>, <span class=\"hljs-string\">'package.json'</span>), <span class=\"hljs-string\">'utf8'</span>)).<span class=\"hljs-keyword\">version</span>)\n  .<span class=\"hljs-keyword\">usage</span>(<span class=\"hljs-string\">'[options] &lt;file ...&gt;'</span>)\n  .<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">'-p, --port &lt;port&gt;'</span>, <span class=\"hljs-string\">'Define the mock server started port, default is 8008'</span>)\n  .<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">'-w, --watch'</span>, <span class=\"hljs-string\">'Listen to the file changes and restart the service'</span>)\n  .<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">'-c, --config &lt;file&gt;'</span>, <span class=\"hljs-string\">'Custom profiles, default is mock/config.js'</span>)\n  .<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">'-l, --log'</span>, <span class=\"hljs-string\">'Record the log and save to \"mock/log/\" and named {date}.log'</span>)\n  .<span class=\"hljs-keyword\">option</span>(<span class=\"hljs-string\">'-L, --Log &lt;path&gt;'</span>, <span class=\"hljs-string\">'Record the log and save to &lt;path&gt;, default \"mock/log/\" and named {date}.log'</span>)</code></pre>\n<p>也是先<code>new</code>一个<code>Mock</code>实例，然后根据不同的参数设置调用不同的方法，具体可以看<code>bin/_mock</code>。</p>\n<h4 id=\"热更新路由\">热更新路由</h4>\n<p>最关键的一个改进是监听配置文件改变自动更新路由的功能，这个是参考这篇文章：<a href=\"http://fex.baidu.com/blog/2015/05/nodejs-hot-swapping/\">Node.js Web应用代码热更新的另类思路</a></p>\n<pre><code class=\"language-javascript\">Mock.prototype.watchFile = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'&gt;&gt; Watch mode'</span>)\n  utils.watch([<span class=\"hljs-keyword\">this</span>.file], <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'File changed!'</span>)\n    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">require</span>.cache[<span class=\"hljs-keyword\">this</span>.file];\n    <span class=\"hljs-keyword\">this</span>.rerun();\n  });\n}</code></pre>\n<p>监听到文件改变时，回调函数执行<code>delete require.cache[this.file];</code>清除缓存(针对配置文件是JSON的情况)，然后执行<code>rerun()</code>：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">/**\n * Application new config\n */</span>\nMock.prototype.rerun = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.getConfig()\n  <span class=\"hljs-keyword\">this</span>.createRouter()\n}</code></pre>\n<p><code>rerun</code>获取新的配置，创建新的路由：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">/**\n * Create router function with config object\n */</span>\nMock.prototype.createRouter = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.router = router(<span class=\"hljs-keyword\">this</span>.config)\n}\n\n<span class=\"hljs-comment\">/**\n * Start server\n */</span>\nMock.prototype.startApp = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  ...\n  <span class=\"hljs-comment\">// Application router</span>\n  <span class=\"hljs-keyword\">this</span>.app.use(<span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; {\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.router(ctx, next)\n  })\n  ...\n}</code></pre>\n<p>这里利用闭包的特性获取最新的router对象，避免app.use缓存router对象。这样就实现了路由配置的热更新。</p>\n<p>后面针对需求还做了一些小的改进：</p>\n<ol>\n<li>支持访问静态资源</li>\n<li>参数支持正则匹配</li>\n<li>支持读取txt，内容为响应头+body，即可自定义响应头</li>\n</ol>\n<h2 id=\"todo\">TODO</h2>\n<ol>\n<li>完善请求拦截方案</li>\n<li>跨平台兼容问题（如LF，CRLF）</li>\n<li>自动化测试</li>\n<li>README优化</li>\n<li>想搞的更高级一些，将请求响应以及配置路由的增删改查可视化</li>\n</ol>\n<h2 id=\"参考资料\">参考资料</h2>\n<ol>\n<li><a href=\"https://github.com/CntChen/cntchen.github.io/issues/1\">前后端分离开发模式的 mock 平台预研</a></li>\n<li><a href=\"http://fex.baidu.com/blog/2015/05/nodejs-hot-swapping/\">Node.js Web应用代码热更新的另类思路</a></li>\n</ol>\n","title":"前后端分离的开发模式下打造前端mock服务器","tags":["mock","node.js"],"slug":"create-front-end-mock-server-in-front-end-and-back-end-separated-development-mode","createDate":1514822400000,"id":"create-front-end-mock-server-in-front-end-and-back-end-separated-development-mode","thumb":"https://images.unsplash.com/photo-1581434271558-341895128368?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>最近遇到了这样一个需求，将后端传过来的ISO格式的UTC时间转换成ISO格式的本地时间。</p>\n","content":"<p>最近遇到了这样一个需求，将后端传过来的ISO格式的UTC时间转换成ISO格式的本地时间。</p>\n<h2 id=\"utc-和-iso\">UTC 和 ISO</h2>\n<p>首先，我们先了解一下什么是UTC时间，什么是ISO格式。</p>\n<blockquote>\n<p>协调世界时（英语：Coordinated Universal Time，法语：Temps Universel Coordonné，简称UTC）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间。                              —— <a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6\">维基百科</a></p>\n</blockquote>\n<p>整个地球分为二十四时区，每个时区都有自己的本地时间，同一时刻每个时区的时间都不一样，所以就用UTC来统一标准的。</p>\n<blockquote>\n<p>国际标准ISO 8601，是国际标准化组织的日期和时间的表示方法，全称为《数据存储和交换形式·信息交换·日期和时间的表示方法》。目前是第三版“ISO8601:2004”以替代第一版“ISO8601:1988”与第二版“ISO8601:2000”。   —— <a href=\"https://zh.wikipedia.org/wiki/ISO_8601\">维基百科</a></p>\n</blockquote>\n<p>当前的UTC时间是2018-01-02T06:29Z（ISO 8601 表示法。）其中Z是4位数字格式的时间偏移量，不写的时候默认不偏移。</p>\n<h2 id=\"utc时间转本地时间\">UTC时间转本地时间</h2>\n<h3 id=\"第一种方法\">第一种方法</h3>\n<p>我们可以在控制台中看一下：</p>\n<pre><code class=\"language-javascript\">new Date()\nTue Jan <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">2018</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">02</span> GMT+<span class=\"hljs-number\">0800</span> (CST)\n\nnew Date(<span class=\"hljs-string\">'2018-01-02T00:00'</span>)\nTue Jan <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">2018</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> GMT+<span class=\"hljs-number\">0800</span> (CST)\n\nnew Date(<span class=\"hljs-string\">'2018-01-02T00:00+0800'</span>)\nTue Jan <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">2018</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> GMT+<span class=\"hljs-number\">0800</span> (CST)\n\nnew Date(<span class=\"hljs-string\">'2018-01-02T00:00-0800'</span>)\nTue Jan <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">2018</span> <span class=\"hljs-number\">16</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> GMT+<span class=\"hljs-number\">0800</span> (CST)\n\nnew Date(<span class=\"hljs-string\">'2018-01-02T00:00+0000'</span>)\nTue Jan <span class=\"hljs-number\">02</span> <span class=\"hljs-number\">2018</span> <span class=\"hljs-number\">08</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> GMT+<span class=\"hljs-number\">0800</span> (CST)</code></pre>\n<p>可以看到, <code>new Date()</code>返回的是当前本地时间。<code>new Date(&#39;2018-01-02T00:00&#39;)</code> 传入的是ISO格式的字符串，但是没有加偏移量，可以看到结果本地时间跟传入的时间一致，但是上面说<strong>其中Z是4位数字格式的时间偏移量，不写的时候默认不偏移</strong>， 转化成本地时间不应该是<code>Tue Jan 02 2018 08:00:00 GMT+0800 (CST)</code>吗？</p>\n<p>原来<code>new Date()</code>对传入的字符串调用<code>Date.parse()</code>来解析, 如果没有指定时区，默认使用本地时区。</p>\n<blockquote>\n<p>parse 方法接受一个表示时间的字符串，返回相应的时间值。该方法可以接受符合 RFC2822 / IETF 日期语法 (RFC2822 Section 3.3) 的字符串，如 &quot;Mon, 25 Dec 1995 13:30:00 GMT&quot;。该方法能够理解美国大陆时区的缩写，但是为了更通用，应该使用时区偏移，如 &quot;Mon, 25 Dec 1995 13:30:00 +0430&quot; （格林威治的子午线向东偏移4小时30分钟）。如果没有指定时区，默认使用本地时区。—— <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\">MDN</a></p>\n</blockquote>\n<p>后面例子中<code>+0800</code>，<code>-0800</code>，<code>+0000</code> 就更好理解了。</p>\n<p>所以， UTC 时间与 本地时间的关系就是：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-attr\">UTC + 时区差 </span>=<span class=\"hljs-string\"> 本地时间</span></code></pre>\n<p>于是，我们只需要知道时区差就可以转换时间了, 可以利用<code>Date.prototype.getTimezoneOffset()</code>:</p>\n<blockquote>\n<p>时区偏差（time-zone offset）表示协调世界时（UTC）与本地时区之间的差值，单位为分钟。需要注意的是如果本地时区晚于协调世界时，则该差值为正值，如果早于协调世界时则为负值。 --<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\">MDN</a></p>\n</blockquote>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n<span class=\"hljs-keyword\">var</span> currentTimeZoneOffsetInHours = x.getTimezoneOffset() / <span class=\"hljs-number\">60</span>;</code></pre>\n<p>然后进行简单的加减即可，不过要注意晚于UTC是正，早是负。</p>\n<h3 id=\"第二种方法\">第二种方法</h3>\n<p>然而这样就结束了吗？ No，还有更简单的方法。</p>\n<p>从上面的例子中我们还可以看到， <code>new Date()</code>返回的都是本地时间，所以我们看一下<code>Date.prototype.toString()</code>:</p>\n<blockquote>\n<p>Return an implementation-dependent String value that represents tv as a date and time in the current time zone using a convenient, human-readable form.  --<a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-date.prototype.tostring\">Standard ECMA-262</a></p>\n</blockquote>\n<p>可以看到toString返回的时间就是基于系统当前所在时区的，即本地时间，所以直接调用toString即可转化为本地时间:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> value = '<span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">02</span>T00:<span class=\"hljs-number\">00</span>+<span class=\"hljs-number\">0000</span>'\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date(<span class=\"hljs-params\">value</span>)</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String()</span></code></pre>\n<p>然后再将得到的时间字符串解析成ISO格式：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">/**\n * 把 JS datetime 值转为指定日期时间格式\n * @param  {string} value - Js datetime string\n * @return {string} - ISO Dates YYYY-MM-DDTHH:mm:ss\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getISOdatetime</span> (<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> tmpStr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(value),\n    year = tmpStr.getFullYear(),\n    month = pad(tmpStr.getMonth() + <span class=\"hljs-number\">1</span>), <span class=\"hljs-comment\">// 月份取值0-11</span>\n    <span class=\"hljs-built_in\">date</span> = pad(tmpStr.getDate()),\n    hour = pad(tmpStr.getHours()),\n    minute = pad(tmpStr.getMinutes()),\n    second = pad(tmpStr.getSeconds())\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${year}</span>-<span class=\"hljs-subst\">${month}</span>-<span class=\"hljs-subst\">${date}</span>T<span class=\"hljs-subst\">${hour}</span>:<span class=\"hljs-subst\">${minute}</span>:<span class=\"hljs-subst\">${second}</span>`</span>\n}\n\n<span class=\"hljs-comment\">/**\n * 把 UTC时间 转换成 本地时间\n * @param  {string} value - UTC datetime string\n * @return {string} - ISO Dates YYYY-MM-DDTHH:mm:ss\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getLocalISODatetime</span> (<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> getISOdatetime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(value).toString())\n}</code></pre>\n<h2 id=\"本地时间转utc时间\">本地时间转UTC时间</h2>\n<p>那本地时间转换成UTC时间也很简单：</p>\n<pre><code><span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span> <span class=\"hljs-comment\">//Wed Jan 24 2018 11:06:29 GMT+0800 (CST)</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Date()</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">ISOString()</span> <span class=\"hljs-comment\">// \"2018-01-24T03:06:22.861Z\"</span></code></pre><blockquote>\n<p>toISOString() 方法返回一个 ISO（ISO 8601 Extended Format）格式的字符串： YYYY-MM-DDTHH:mm:ss.sssZ。时区总是UTC（协调世界时），加一个后缀“Z”标识。  ------ <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\">Date.prototype.toISOString() | MDN</a></p>\n</blockquote>\n<p>哈哈，其实最终的实现很简单，但是要搞清楚原理需要深入了解一下标准是怎么去定义实现的。</p>\n<h2 id=\"参考资料\">参考资料</h2>\n<ol>\n<li><a href=\"http://www.zoucz.com/blog/2016/01/29/date-iso/\">ISO日期格式标准</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6525538/convert-utc-date-time-to-local-date-time\">Convert UTC date time to local date time</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E5%8D%8F%E8%B0%83%E4%B8%96%E7%95%8C%E6%97%B6\">协调世界时 | 维基百科</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/ISO_8601\">ISO 8601 | 维基百科</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\">Date.parse() | MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\">Date.prototype.getTimezoneOffset() | MDN</a></li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-date.prototype.tostring\">Date.prototype.toString ( ) | Standard ECMA-262</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\">Date.prototype.toISOString() | MDN</a></li>\n</ol>\n","title":"ISO格式的UTC时间与本地时间的互相转化","tags":["iso","utc"],"slug":"conversion-between-utc-time-and-local-time-in-iso-format","createDate":1514822400000,"id":"conversion-between-utc-time-and-local-time-in-iso-format","thumb":"https://images.unsplash.com/photo-1580683014416-16d8f7df106e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>为了优雅的使用Google，Gmail等折腾过不少VPS, 最初是用的搬瓦工的便宜VPS，半年$12.99，由于流量用不完，开了多账号出租。后来用过香港的，速度不错但是太贵，前一段时间一直用的DigitalOcean的VPS，Github学生优惠可以免费用10个月，美滋滋。</p>\n<p>可惜好景不长，因为18+1大，DO的vps ssh都连不上了，于是又回到了搬瓦工，最便宜的没货了，能买到的最便宜的是每月$4.99的，加拿大机房用着还可以。</p>\n<p>最近同学那里得到消息，可以一年$29.99，再加上6%的优惠码，最后只需要180+一年。可以说现在看来很便宜了，于是就下单了。</p>\n<p>买的时候是洛杉矶的，可以迁移到其他地方(怕被封ip), 然后重装系统，我装的是CentOS 7 x86_64 bbr。</p>\n","content":"<p>为了优雅的使用Google，Gmail等折腾过不少VPS, 最初是用的搬瓦工的便宜VPS，半年$12.99，由于流量用不完，开了多账号出租。后来用过香港的，速度不错但是太贵，前一段时间一直用的DigitalOcean的VPS，Github学生优惠可以免费用10个月，美滋滋。</p>\n<p>可惜好景不长，因为18+1大，DO的vps ssh都连不上了，于是又回到了搬瓦工，最便宜的没货了，能买到的最便宜的是每月$4.99的，加拿大机房用着还可以。</p>\n<p>最近同学那里得到消息，可以一年$29.99，再加上6%的优惠码，最后只需要180+一年。可以说现在看来很便宜了，于是就下单了。</p>\n<p>买的时候是洛杉矶的，可以迁移到其他地方(怕被封ip), 然后重装系统，我装的是CentOS 7 x86_64 bbr。</p>\n<h3 id=\"配置ssh免密登录（mac）\">配置ssh免密登录（mac）</h3>\n<ol>\n<li>生成密钥</li>\n</ol>\n<pre><code><span class=\"hljs-attribute\">ssh-keygen -t rsa</span></code></pre><p>一路回车即可，然后执行：</p>\n<pre><code><span class=\"hljs-keyword\">ls</span> ~<span class=\"hljs-string\">/.ssh</span></code></pre><p>会看到两个密钥文件<code>id_rsa</code>(私钥), <code>id_rsa.pub</code>（公钥）</p>\n<ol start=\"2\">\n<li>配置<code>~/.ssh/config</code></li>\n</ol>\n<p>在<code>~/.ssh/config</code>（没有就新建）里添加：</p>\n<pre><code>Host {NAME} # 主机名， 别名\n    HostName {IP} # 完整的主机名，<span class=\"hljs-built_in\"> IP\n</span>   <span class=\"hljs-built_in\"> User </span>root # 登录用户\n    IdentityFile ~/.ssh/id_rsa # 私钥</code></pre><ol start=\"3\">\n<li>将公钥拷贝到远程主机</li>\n</ol>\n<p>ssh登录到远程主机，将公钥内容拷贝到<code>~/.ssh/authorized_keys</code>文件后面，如果没有就新建。\n然后就可以免密登录到远程主机了。</p>\n<h3 id=\"配置shadowsocks-libev--simple-obfs\">配置Shadowsocks-libev + simple-obfs</h3>\n<ol>\n<li>关闭防火墙</li>\n</ol>\n<pre><code>systemctl <span class=\"hljs-keyword\">stop</span> firewalld\nsystemctl <span class=\"hljs-keyword\">disable</span> firewalld</code></pre><ol start=\"2\">\n<li>安装依赖</li>\n</ol>\n<pre><code>yum -y <span class=\"hljs-keyword\">install</span> epel-<span class=\"hljs-keyword\">release</span>\nyum -y <span class=\"hljs-keyword\">update</span>\nyum -y <span class=\"hljs-keyword\">install</span> wget gcc automake autoconf libtool make m2crypto autoconf libtool curl curl-devel zlib-devel openssl-devel perl perl-devel cpio expat-devel gettext-devel pcre-devel asciidoc xmlto git</code></pre><ol start=\"3\">\n<li>安装 Libsodium</li>\n</ol>\n<pre><code><span class=\"hljs-built_in\">export</span> LIBSODIUM_VER=1.0.13\nwget https://download.libsodium.org/libsodium/releases/libsodium-<span class=\"hljs-variable\">$LIBSODIUM_VER</span>.tar.gz\ntar xvf libsodium-<span class=\"hljs-variable\">$LIBSODIUM_VER</span>.tar.gz\n<span class=\"hljs-built_in\">pushd</span> libsodium-<span class=\"hljs-variable\">$LIBSODIUM_VER</span>\n./configure --prefix=/usr &amp;&amp; make\nsudo make install\n<span class=\"hljs-built_in\">popd</span>\nsudo ldconfig</code></pre><ol start=\"4\">\n<li>安装 MbedTLS</li>\n</ol>\n<pre><code><span class=\"hljs-attr\">export</span> <span class=\"hljs-string\">MBEDTLS_VER=2.6.0</span>\n<span class=\"hljs-attr\">wget</span> <span class=\"hljs-string\">https://tls.mbed.org/download/mbedtls-$MBEDTLS_VER-gpl.tgz</span>\n<span class=\"hljs-attr\">tar</span> <span class=\"hljs-string\">xvf mbedtls-$MBEDTLS_VER-gpl.tgz</span>\n<span class=\"hljs-attr\">pushd</span> <span class=\"hljs-string\">mbedtls-$MBEDTLS_VER</span>\n<span class=\"hljs-attr\">make</span> <span class=\"hljs-string\">SHARED=1 CFLAGS=-fPIC</span>\n<span class=\"hljs-attr\">sudo</span> <span class=\"hljs-string\">make DESTDIR=/usr install</span>\n<span class=\"hljs-attr\">popd</span>\n<span class=\"hljs-attr\">sudo</span> <span class=\"hljs-string\">ldconfig</span></code></pre><ol start=\"5\">\n<li>下载 Shadowsocks-libev 源码</li>\n</ol>\n<pre><code><span class=\"hljs-keyword\">cd</span> ~\ngit clone https:<span class=\"hljs-string\">//github.com/shadowsocks/shadowsocks-libev.git</span>\n<span class=\"hljs-keyword\">cd</span> shadowsocks-libev\ngit submodule update <span class=\"hljs-params\">--init</span> <span class=\"hljs-params\">--recursive</span></code></pre><ol start=\"6\">\n<li>编译 Shadowsocks-libev</li>\n</ol>\n<pre><code><span class=\"hljs-keyword\">cd</span> ~<span class=\"hljs-string\">/shadowsocks-libev</span>\n<span class=\"hljs-string\">./autogen.sh</span> &amp;&amp; <span class=\"hljs-string\">./configure</span> <span class=\"hljs-params\">--prefix=/usr/local/shadowsocks-libev</span> &amp;&amp; make &amp;&amp; make install</code></pre><ol start=\"7\">\n<li>安装 Simple-obfs</li>\n</ol>\n<pre><code>git clone http<span class=\"hljs-variable\">s:</span>//github.<span class=\"hljs-keyword\">com</span>/shadowsocks/simple-obfs.git\n<span class=\"hljs-keyword\">cd</span> simple-obfs\ngit submodule <span class=\"hljs-keyword\">update</span> --init --recursive\n./autogen.<span class=\"hljs-keyword\">sh</span>\n./configure &amp;&amp; <span class=\"hljs-keyword\">make</span>\n<span class=\"hljs-keyword\">make</span> install</code></pre><ol start=\"8\">\n<li>Shadowsocks-libev Systemd 配置文件</li>\n</ol>\n<pre><code>vim /etc/systemd/system/shadowsocks-libev.service\n<span class=\"hljs-comment\">#  This file is part of shadowsocks-libev.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#  Shadowsocks-libev is free software; you can redistribute it and/or modify</span>\n<span class=\"hljs-comment\">#  it under the terms of the GNU General Public License as published by</span>\n<span class=\"hljs-comment\">#  the Free Software Foundation; either version 3 of the License, or</span>\n<span class=\"hljs-comment\">#  (at your option) any later version.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#  This file is default for RPM packaging. See also</span>\n<span class=\"hljs-comment\">#  /etc/sysconfig/shadowsocks-libev for environment variables.</span>\n[Unit]\n<span class=\"hljs-attribute\">Description</span>=Shadowsocks-libev<span class=\"hljs-built_in\"> Default Server Service\n</span><span class=\"hljs-attribute\">Documentation</span>=man:shadowsocks-libev(8)\n<span class=\"hljs-attribute\">After</span>=network.target\n[Service]\n<span class=\"hljs-attribute\">Type</span>=simple\n<span class=\"hljs-comment\">#EnvironmentFile=/etc/sysconfig/shadowsocks-libev</span>\n<span class=\"hljs-attribute\">User</span>=nobody\n<span class=\"hljs-attribute\">Group</span>=nobody\n<span class=\"hljs-attribute\">LimitNOFILE</span>=32768\n<span class=\"hljs-attribute\">ExecStart</span>=/usr/local/shadowsocks-libev/bin/ss-server -c /etc/shadowsocks-libev/config.json <span class=\"hljs-variable\">$DAEMON_ARGS</span>\n<span class=\"hljs-attribute\">CapabilityBoundingSet</span>=CAP_NET_BIND_SERVICE\n[Install]\n<span class=\"hljs-attribute\">WantedBy</span>=multi-user.target</code></pre><ol start=\"9\">\n<li>创建配置文件</li>\n</ol>\n<pre><code>vi /etc/shadowsocks-libev/<span class=\"hljs-built_in\">config</span>.json\n\n{\n    <span class=\"hljs-string\">\"server\"</span>:<span class=\"hljs-string\">\"0.0.0.0\"</span>,\n    <span class=\"hljs-string\">\"server_port\"</span>:<span class=\"hljs-number\">8388</span>,\n    <span class=\"hljs-string\">\"local_port\"</span>:<span class=\"hljs-number\">1080</span>,\n    <span class=\"hljs-string\">\"password\"</span>:<span class=\"hljs-string\">\"Password\"</span>,\n    <span class=\"hljs-string\">\"timeout\"</span>:<span class=\"hljs-number\">60</span>,\n    <span class=\"hljs-string\">\"method\"</span>:<span class=\"hljs-string\">\"chacha20\"</span>,\n    <span class=\"hljs-string\">\"plugin\"</span>: <span class=\"hljs-string\">\"obfs-server\"</span>,\n    <span class=\"hljs-string\">\"plugin_opts\"</span>: <span class=\"hljs-string\">\"obfs=http\"</span>\n}</code></pre><ol start=\"10\">\n<li>Systemd 启动 Shadowsocks-libev</li>\n</ol>\n<pre><code><span class=\"hljs-selector-tag\">systemctl</span> <span class=\"hljs-selector-tag\">enable</span> <span class=\"hljs-selector-tag\">shadowsocks-libev</span><span class=\"hljs-selector-class\">.service</span>\n<span class=\"hljs-selector-tag\">systemctl</span> <span class=\"hljs-selector-tag\">start</span> <span class=\"hljs-selector-tag\">shadowsocks-libev</span><span class=\"hljs-selector-class\">.service</span>\n<span class=\"hljs-selector-tag\">systemctl</span> <span class=\"hljs-selector-tag\">status</span> <span class=\"hljs-selector-tag\">shadowsocks-libev</span><span class=\"hljs-selector-class\">.service</span></code></pre><p>OK. 荷兰机房的速度还是不错的，YouTube 1080p 基本不卡。</p>\n<h3 id=\"参考资料\">参考资料</h3>\n<ol>\n<li><a href=\"https://www.sundayle.com/2017/10/24/shadowsocks-libev/\">Centos7 配置Shadowsocks-libev + simple-obfs</a></li>\n<li><a href=\"http://blog.csdn.net/xiaomengxiaoqiu/article/details/76408329\">mac配置ssh免密码登录centos7</a></li>\n<li><a href=\"https://www.v2ex.com/t/325885\">编译错误 Cannot find pcre library by CentOS 6 请指教谢谢</a></li>\n</ol>\n","title":"使用搬瓦工VPS + CentOS 7 科学上网 ","tags":["vps","CentOS"],"slug":"bandwagonhost-vps-centos-shadowsocks","createDate":1511136000000,"id":"bandwagonhost-vps-centos-shadowsocks","thumb":"https://images.unsplash.com/photo-1580683014416-16d8f7df106e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<h2 id=\"一、分析目标\">一、分析目标</h2>\n<p>分析前端单元测试工具 Mocha, 了解它是怎么进行TDD和BDD的。</p>\n","content":"<h2 id=\"一、分析目标\">一、分析目标</h2>\n<p>分析前端单元测试工具 Mocha, 了解它是怎么进行TDD和BDD的。</p>\n<h2 id=\"二、测试与mocha入门简介\">二、测试与Mocha入门简介</h2>\n<h3 id=\"1-测试的概念\">1. 测试的概念</h3>\n<h4 id=\"11-单元测试\">1.1 单元测试</h4>\n<p>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。</p>\n<ul>\n<li>在一些传统的结构化编程语言中，例如C，要进行测试的单元一般是函数或子过程。</li>\n<li>在面向对象的语言中，要进行测试基本单元是类。</li>\n</ul>\n<h4 id=\"12-断言\">1.2 断言</h4>\n<p>断言表示一些布尔表达式，在编写代码的时候，我们总是会作出一些假设，断言就是用于代码中捕捉这些假设。</p>\n<p>在单元测试中，我们经常使用断言来验证我们的代码是否正常运行。断言可以有两种形式</p>\n<pre><code class=\"language-javascript\">assert Expresstio<span class=\"hljs-symbol\">n1</span>\nassert Expresstio<span class=\"hljs-symbol\">n1</span>:Expresstio<span class=\"hljs-symbol\">n2</span></code></pre>\n<p>其中Expression1应该总是一个布尔值，Expression2是断言失败时，输出的失败消息的字符串。</p>\n<h4 id=\"13-tdd\">1.3 TDD</h4>\n<p>测试驱动开发是敏捷开发中的一项核心实践和技术，也是一种设计方法论。TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。TDD的基本思路就是通过测试来推动整个开发的进行，但测试驱动开发并不只是单纯的测试工作，而是把需求分析，设计，质量控制量化的过程。TDD首先考虑使用需求（对象、功能、过程、接口等），主要是编写测试用例框架对功能的过程和接口进行设计，而测试框架可以持续进行验证。</p>\n<h4 id=\"14-bdd\">1.4 BDD</h4>\n<p>行为驱动开发是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、  QA和非技术人员或商业参与者之间的协作。主要是从用户的需求出发，强调系统行为。BDD最初是由Dan North在2003年命名，它包括验收测试和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。</p>\n<h3 id=\"2-mocha简介\">2. mocha简介</h3>\n<p>Mocha.js是被广泛使用的Javascript测试框架，在浏览器和Node环境都可以使用。Mocha提供TDD和BDD的测试接口。</p>\n<p>Mocha提供了</p>\n<ul>\n<li>断言单元测试，可以进行功能性测试</li>\n<li>同步代码测试</li>\n<li>异步代码测试</li>\n</ul>\n<h4 id=\"21-断言\">2.1 断言</h4>\n<p>在Mocha中运行你使用任何断言库来进行代码的测试，其中有</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">库</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">should.js</td>\n<td align=\"left\">BDD风格的测试接口</td>\n</tr>\n<tr>\n<td align=\"left\">expect.js</td>\n<td align=\"left\">expect()风格的断言</td>\n</tr>\n<tr>\n<td align=\"left\">chai</td>\n<td align=\"left\">提供expect(),assert()和should这几种风格的断言</td>\n</tr>\n<tr>\n<td align=\"left\">better-assert</td>\n<td align=\"left\">C语言风格的断言</td>\n</tr>\n<tr>\n<td align=\"left\">unexpected</td>\n<td align=\"left\">BDD断言的扩展</td>\n</tr>\n</tbody></table>\n<p>当然，我们可以用Nodejs内建的assert模块来进行断言。</p>\n<pre><code class=\"language-javascript\">describe(<span class=\"hljs-string\">\"测试数组\"</span>, function(){\n    it(<span class=\"hljs-string\">\"测试indexOf()\"</span>, function(){\n        assert.equal(<span class=\"hljs-name\">-1</span>, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>].indexOf(<span class=\"hljs-number\">4</span>))<span class=\"hljs-comment\">;</span>\n    })<span class=\"hljs-comment\">;</span>\n})<span class=\"hljs-comment\">;</span></code></pre>\n<h4 id=\"22-tdd测试接口\">2.2 TDD测试接口</h4>\n<p>TDD测试风格的接口：</p>\n<ul>\n<li>suite: 定义一组测试用例（也可以是一个，可以嵌套）</li>\n<li>suiteSetup: 此方法会在这个suite所有测试用例执行前，执行有且只有一次。</li>\n<li>setup: 此方法会在每个测试用例执行前都执行一遍。</li>\n<li>test: 具体执行的测试用例实现代码。</li>\n<li>teardown: 此方法会在这个suite所有测试用例执行后都执行一次，与setup相反</li>\n<li>suiteTeardown: 此方法会在这个suite所有测试用例执行后执行一次，与suiteTeardown相反。</li>\n</ul>\n<h4 id=\"23-bdd测试接口\">2.3 BDD测试接口</h4>\n<p>BDD测试风格的接口</p>\n<ul>\n<li>describe(): 描述场景，在里面可以设定Context，可包括多个测试用例，也可以嵌套场景</li>\n<li>it(): 位于场景内，描述测试用例</li>\n<li>before(): 所有测试用例的统一前置动作</li>\n<li>after(): 所有测试用例的统一后置动作</li>\n<li>beforeEach(): 每个测试用例的前置动作</li>\n<li>aferEach(): 每个测试用例的后置动作</li>\n</ul>\n<h4 id=\"24-mocha支持的特性\">2.4 Mocha支持的特性</h4>\n<ol>\n<li>异步测试\nMocha默认每个测试用例最多2000ms，如果到时没有得到结果，就会报错，对于涉及异步操作的测试用例，我们需要用-t或--timeout参数指定超时门槛。</li>\n<li>测试用例管理\n在大型项目中，会有很多的测试用例，我们可以通过几个方法来进行管理<ul>\n<li>only: 表示只运行某个测试套件或测试用例</li>\n<li>skip: 表示跳过指定的测试套件或测试用例</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三、mocha的使用\">三、Mocha的使用</h3>\n<p>首先，mocha的默认模式是BDD，我们以BDD为例看一下mocha是怎么运行的：\n这个是要测试的源文件，传入两个数字，返回和</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span> add.js\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (a, b) =&gt; a + b;\n这个是测试的文件，用了chai这个断言库，expect(add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)).to.be.equal(<span class=\"hljs-number\">2</span>) 是断言部分\n<span class=\"hljs-regexp\">//</span> test.js\n<span class=\"hljs-keyword\">import</span> add <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./add\"</span>\n<span class=\"hljs-keyword\">import</span> { expect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"chai\"</span>\n\ndescribe(<span class=\"hljs-string\">'Test Start'</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    describe(<span class=\"hljs-string\">'加法函数测试'</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        it(<span class=\"hljs-string\">'1 + 1 等于 2'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> expect(add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)).to.be.equal(<span class=\"hljs-number\">2</span>))\n        it(<span class=\"hljs-string\">'返回值是Number'</span>,<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> expect(add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)).to.be.a(<span class=\"hljs-string\">'number'</span>))\n    })\n})</code></pre>\n<p>因为用了ES6的语法，需要babel转一下</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-selector-tag\">require</span>(<span class=\"hljs-string\">\"babel-register\"</span>)({\n    <span class=\"hljs-attribute\">presets</span>: [\n        <span class=\"hljs-string\">\"es2015\"</span>,\n        <span class=\"hljs-string\">\"stage-0\"</span>\n    ],\n    <span class=\"hljs-attribute\">plugins</span>: [<span class=\"hljs-string\">\"transform-async-to-generator\"</span>,<span class=\"hljs-string\">\"transform-runtime\"</span>]\n});\n\n<span class=\"hljs-selector-tag\">require</span>(<span class=\"hljs-string\">'./test'</span>);</code></pre>\n<p>命令行运行结果：</p>\n<p><img src=\"https://xiao555.netlify.com/mocha-1.png\" alt=\"\"></p>\n<h3 id=\"四、分析实现\">四、分析实现</h3>\n<h4 id=\"1-command-line-interfaces\">1. Command-line interfaces</h4>\n<p>首先，Mocha的命令行接口是用 <a href=\"https://github.com/tj/commander.js/\">commander</a> 写的，在<code>/bin/_mocha</code>文件中可以看到。默认ui是bdd，默认文件是test/*</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// bin/_mocha</span>\nprogram\n  ...\n  .option(<span class=\"hljs-string\">'-u, --ui &lt;name&gt;'</span>, <span class=\"hljs-string\">'specify user-interface ('</span> + interfaceNames.join(<span class=\"hljs-string\">'|'</span>) + <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'bdd'</span>)\n...\n<span class=\"hljs-keyword\">var</span> args = program.args;\n<span class=\"hljs-comment\">// default files to test/*.{js,coffee}</span>\n<span class=\"hljs-keyword\">if</span> (!args.length) {\n  args.push(<span class=\"hljs-string\">'test'</span>);\n}\nargs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> </span>(arg) {\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Files</span>;\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Files</span> = utils.lookupFiles(arg, extensions, program.recursive);\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    ...\n  }\n\n  files = files.concat(<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Files</span>);\n});\n...\nmocha.files = files;\nrunner = mocha.run(program.exit ? exit : <span class=\"hljs-type\">exitLater</span>);\n...</code></pre>\n<h4 id=\"2-mocha-run-entrypoint\">2. Mocha run entrypoint</h4>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/mocha.js</span>\nMocha.prototype.run = function (fn) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.files.length) {\n    <span class=\"hljs-keyword\">this</span>.loadFiles();\n  }\n\n  ...\n  <span class=\"hljs-keyword\">return</span> runner.run(done);\n};</code></pre>\n<p>其中<code>loadFiles</code>是用来加载文件的，我们看一下他的源码：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/mocha.j</span>\nMocha.prototype.loadFiles = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(fn)</span> </span>{\n  <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">self</span> = this;\n  <span class=\"hljs-keyword\">var</span> suite = this.suite;\n  this.files.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(file)</span> </span>{\n    file = path.resolve(file);\n    suite.emit(<span class=\"hljs-string\">'pre-require'</span>, <span class=\"hljs-keyword\">global</span>, file, <span class=\"hljs-keyword\">self</span>);\n    suite.emit(<span class=\"hljs-string\">'require'</span>, <span class=\"hljs-keyword\">require</span>(file), file, <span class=\"hljs-keyword\">self</span>);\n    suite.emit(<span class=\"hljs-string\">'post-require'</span>, <span class=\"hljs-keyword\">global</span>, file, <span class=\"hljs-keyword\">self</span>);\n  });\n  fn &amp;&amp; fn();\n};</code></pre>\n<p>这里通过<code>emit</code>触发了<code>pre-require</code>事件，那么<code>pre-require</code>事件在哪呢？</p>\n<h4 id=\"3-bdd-interfaces\">3. BDD Interfaces</h4>\n<pre><code class=\"language-javascript\">// lib/interfaces/<span class=\"hljs-keyword\">bdd.js\n</span><span class=\"hljs-symbol\">suite.on</span>(<span class=\"hljs-string\">'pre-require'</span>, <span class=\"hljs-meta\">function</span> (context, file, mocha) {\n  var <span class=\"hljs-meta\">common</span> = <span class=\"hljs-meta\">require</span>(<span class=\"hljs-string\">'./common'</span>)(suites, context, mocha)<span class=\"hljs-comment\">;</span>\n\n  context.<span class=\"hljs-keyword\">before </span>= <span class=\"hljs-meta\">common</span>.<span class=\"hljs-keyword\">before;\n</span>  context.after = <span class=\"hljs-meta\">common</span>.after<span class=\"hljs-comment\">;</span>\n  context.<span class=\"hljs-keyword\">beforeEach </span>= <span class=\"hljs-meta\">common</span>.<span class=\"hljs-keyword\">beforeEach;\n</span>  context.afterEach = <span class=\"hljs-meta\">common</span>.afterEach<span class=\"hljs-comment\">;</span>\n  context.run = mocha.options.delay &amp;&amp; <span class=\"hljs-meta\">common</span>.runWithSuite(suite)<span class=\"hljs-comment\">;</span>\n  <span class=\"hljs-comment\">/**\n   * Describe a \"suite\" with the given `title`\n   * and callback `fn` containing nested suites\n   * and/or tests.\n   */</span>\n\n  context.describe = context.context = <span class=\"hljs-meta\">function</span> (title, <span class=\"hljs-meta\">fn</span>) {\n    ...\n  }<span class=\"hljs-comment\">;</span>\n  ...\n  context.<span class=\"hljs-keyword\">it </span>= context.specify = <span class=\"hljs-meta\">function</span> (title, <span class=\"hljs-meta\">fn</span>) {\n    ...\n  }<span class=\"hljs-comment\">;</span>\n})<span class=\"hljs-comment\">;</span></code></pre>\n<p>其中<code>context</code>是<code>emit</code>时候传入的<code>global</code>对象，这段代码给<code>global</code>定义了一些属性，比如BDD模式的例子里的<code>describe</code> 和 <code>it</code>，传入的参数都是是<code>title + fn</code>。所以<code>bdd.js</code>这个文件的作用就是给全局对象注册<code>bdd</code>需要的一些接口。</p>\n<h4 id=\"4-reporter-报告格式\">4. Reporter 报告格式</h4>\n<p>Mocha.run 最后执行的是runner.run(), 那我们继续分析Runner</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/runner.js</span>\nRunner.prototype.run = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(fn)</span> </span>{\n  ...\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">start</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">self</span>.started = <span class=\"hljs-keyword\">true</span>;\n    <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'start'</span>);\n    <span class=\"hljs-keyword\">self</span>.runSuite(rootSuite, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n      debug(<span class=\"hljs-string\">'finished running'</span>);\n      <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'end'</span>);\n    });\n  }\n\n  debug(<span class=\"hljs-string\">'start'</span>);\n  ...\n  <span class=\"hljs-keyword\">return</span> this;\n};</code></pre>\n<p>这里，<code>emit</code> 触发 <code>start</code>事件，这个具体的处理在哪呢，我们全局搜索一下，发现在<code>lib/reporters/</code>下的每个文件基本都有<code>on start</code>事件，到底实际是触发的哪一个呢？我们继续分析一下，在Mocha目录下发现这么一段：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/mocha.js</span>\n<span class=\"hljs-comment\">/**\n * Set reporter to `reporter`, defaults to \"spec\".\n * ...\n */</span>\nMocha.prototype.reporter = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(reporter, reporterOptions)</span> </span>{\n    ...\n    reporter = reporter || <span class=\"hljs-string\">'spec'</span>;\n    ...\n};</code></pre>\n<p>所以默认的报告格式是<code>spec</code>，我们去 <code>lib/reporters/spec.js</code> 看一看：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/reporters/spec.js</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Spec</span> (<span class=\"hljs-params\">runner</span>) </span>{\n  ...\n  runner.on(<span class=\"hljs-string\">'start'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log();\n  });\n  runner.on(<span class=\"hljs-string\">'suite'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">suite</span>) </span>{\n    ++indents;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">color</span>(<span class=\"hljs-string\">'suite'</span>, <span class=\"hljs-string\">'%s%s'</span>), indent(), suite.title);\n  });\n  ...\n  runner.on(<span class=\"hljs-string\">'pass'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">test</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> fmt;\n    <span class=\"hljs-keyword\">if</span> (test.speed === <span class=\"hljs-string\">'fast'</span>) {\n      fmt = indent() +\n        <span class=\"hljs-built_in\">color</span>(<span class=\"hljs-string\">'checkmark'</span>, <span class=\"hljs-string\">'  '</span> + Base.symbols.ok) +\n        <span class=\"hljs-built_in\">color</span>(<span class=\"hljs-string\">'pass'</span>, <span class=\"hljs-string\">' %s'</span>);\n      <span class=\"hljs-built_in\">console</span>.log(fmt, test.title);\n    } <span class=\"hljs-title\">else</span> {\n      fmt = indent() +\n        <span class=\"hljs-built_in\">color</span>(<span class=\"hljs-string\">'checkmark'</span>, <span class=\"hljs-string\">'  '</span> + Base.symbols.ok) +\n        <span class=\"hljs-built_in\">color</span>(<span class=\"hljs-string\">'pass'</span>, <span class=\"hljs-string\">' %s'</span>) +\n        <span class=\"hljs-built_in\">color</span>(test.speed, <span class=\"hljs-string\">' (%dms)'</span>);\n      <span class=\"hljs-built_in\">console</span>.log(fmt, test.title, test.duration);\n    }\n  });\n\n  runner.on(<span class=\"hljs-string\">'fail'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">test</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(indent() + <span class=\"hljs-built_in\">color</span>(<span class=\"hljs-string\">'fail'</span>, <span class=\"hljs-string\">'  %d) %s'</span>), ++n, test.title);\n  });\n\n  runner.on(<span class=\"hljs-string\">'end'</span>, self.epilogue.bind(self));\n}</code></pre>\n<p>可以看到这里是响应一些事件的处理，回到Runner</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/runner.js</span>\nRunner.prototype.run = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(fn)</span> </span>{\n  ...\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">start</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">self</span>.started = <span class=\"hljs-keyword\">true</span>;\n    <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'start'</span>);\n    <span class=\"hljs-keyword\">self</span>.runSuite(rootSuite, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n      debug(<span class=\"hljs-string\">'finished running'</span>);\n      <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'end'</span>);\n    });\n  }\n\n  debug(<span class=\"hljs-string\">'start'</span>);\n  ...\n  <span class=\"hljs-keyword\">return</span> this;\n};</code></pre>\n<p>这样<code>start</code>对应的就是<code>lib/reporters/spec.js</code>里的 <code>console.log();</code> 输出空行。我们继续往下走<code>runSuite</code>。</p>\n<h4 id=\"5-runsuite-and-runtest\">5. RunSuite and RunTest</h4>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/runner.js</span>\nRunner.prototype.runSuite = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(suite, fn)</span> </span>{\n  ...\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">next</span> <span class=\"hljs-params\">(errSuite)</span> </span>{\n  ...\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">self</span>._grep !== <span class=\"hljs-keyword\">self</span>._defaultGrep) {\n    Runner.immediately(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n      <span class=\"hljs-keyword\">self</span>.runSuite(curr, next);\n    });\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">self</span>.runSuite(curr, next);\n  }\n}\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">done</span> <span class=\"hljs-params\">(errSuite)</span> </span>{\n      ...\n      <span class=\"hljs-keyword\">self</span>.hook(<span class=\"hljs-string\">'afterAll'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'suite end'</span>, suite);\n        fn(errSuite);\n      });\n    }\n  }\n  ...\n  this.hook(<span class=\"hljs-string\">'beforeAll'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (err) {\n      <span class=\"hljs-keyword\">return</span> done();\n    }\n    <span class=\"hljs-keyword\">self</span>.runTests(suite, next);\n  });\n};</code></pre>\n<p>基本上是开始测试之前的准备,next作为回调函数不断执行下一个suite，我们再继续看看<code>runTests</code>：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/runner.js</span>\nRunner.prototype.runTests = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(suite, fn)</span> </span>{\n  ...\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">next</span> <span class=\"hljs-params\">(err, errSuite)</span> </span>{\n...\n    <span class=\"hljs-comment\">// next test</span>\n    test = tests.shift();\n...\n\n    <span class=\"hljs-keyword\">self</span>.hookDown(<span class=\"hljs-string\">'beforeEach'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err, errSuite)</span> </span>{\n      <span class=\"hljs-keyword\">self</span>.currentRunnable = <span class=\"hljs-keyword\">self</span>.test;\n      <span class=\"hljs-keyword\">self</span>.runTest(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n        ...\n        <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'pass'</span>, test);\n        <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'test end'</span>, test);\n        <span class=\"hljs-keyword\">self</span>.hookUp(<span class=\"hljs-string\">'afterEach'</span>, next);\n      });\n    });\n  }\n  ...\n  next();\n};</code></pre>\n<p>这里是不断调用next，执行runTest，回调函数里触发了pass和test end事件，我们继续看<code>runTest</code>：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/runner.js</span>\nRunner.prototype.<span class=\"hljs-keyword\">runTest</span> = function (fn) {\n  ...\n  try {\n    <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">on</span>('<span class=\"hljs-keyword\">error</span>', function (<span class=\"hljs-keyword\">err</span>) {\n      self.fail(<span class=\"hljs-keyword\">test</span>, <span class=\"hljs-keyword\">err</span>);\n    });\n    <span class=\"hljs-keyword\">test</span>.<span class=\"hljs-keyword\">run</span>(fn);\n  } catch (<span class=\"hljs-keyword\">err</span>) {\n    fn(<span class=\"hljs-keyword\">err</span>);\n  }\n};</code></pre>\n<p>终于到了runTest了，可以看到test运行在try catch中，如果抛出错误，捕获错误并传入回调函数。如果成功呢？我们需要知道test.run是个啥东西。</p>\n<h4 id=\"6-suite-and-test\">6. Suite and Test</h4>\n<p>上面的过程中，不断提到<code>Suite</code>和<code>Test</code>，这两个东西到底是指啥呢？找源码太麻烦了，我们直接命令行输出一下看看，首先是<code>suite</code>：我在<code>runSuite</code>函数下<code>console.log</code>输出了一下<code>Suite</code>，结果是:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">Suite</span> {\n    <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">''</span>,\n        <span class=\"hljs-attribute\">ctx</span>: {},\n    <span class=\"hljs-attribute\">suites</span>:\n        [ Suite {\n            <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Test Start'</span>,\n            <span class=\"hljs-attribute\">ctx</span>: {},\n            <span class=\"hljs-attribute\">suites</span>: [Object],\n            <span class=\"hljs-attribute\">tests</span>: [],\n            ...\n            <span class=\"hljs-attribute\">file</span>: <span class=\"hljs-string\">'/Users/zhangruiwu/Desktop/demo-learn/newBlog/server/test-example/index.js'</span> } ],\n            <span class=\"hljs-attribute\">tests</span>: [],\n        ...\n\nSuite {\n    <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'Test Start'</span>,\n        <span class=\"hljs-attribute\">ctx</span>: {},\n    <span class=\"hljs-attribute\">suites</span>:\n        [ Suite {\n            <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'加法函数测试'</span>,\n            <span class=\"hljs-attribute\">ctx</span>: {},\n            <span class=\"hljs-attribute\">suites</span>: [],\n            <span class=\"hljs-attribute\">tests</span>: [Object],\n            ...\nTest Start</code></pre>\n<p>可以发现<code>suite</code>就是<code>describe</code> 生成的对象，我们测试文件中一共两个<code>describe</code>，<code>Test Start</code>和<code>加法函数测试</code>，两者是嵌套关系，在这里也体现出来了。我们继续分析Test：\n把<code>runSuite</code> 加的<code>console.log(suite)</code> 改成<code>console.log(suite.suites[0])</code>,结果是:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-symbol\">Suite</span> {\n    title: <span class=\"hljs-string\">'加法函数测试'</span>,\n        ctx: {},\n    suites: [],\n        tests:\n    [ {\n        <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"1 + 1 等于 2\"</span>,\n        <span class=\"hljs-string\">\"body\"</span>: <span class=\"hljs-string\">\"function () {\\n            return (0, _chai.expect)((0, _add2.default)(1, 1)).to.be.equal(2);\\n        }\"</span>,\n        ...\n    },\n      {\n        <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"返回值是Number\"</span>,\n        <span class=\"hljs-string\">\"body\"</span>: <span class=\"hljs-string\">\"function () {\\n            return (0, _chai.expect)((0, _add2.default)(1, 1)).to.be.a('number');\\n        }\"</span>,\n        ...\n      } ],\n  ...</code></pre>\n<p>可以发现<code>Test</code>就是<code>it</code>生成的对象。<code>Suite</code> 和 <code>Test</code>对应的文件是 <code>lib/suite.js</code>和 <code>lib/test.js</code>。我们找一下<code>test.run</code> ，<code>test.js</code> 里有这么一行</p>\n<pre><code class=\"language-javascript\">// lib/test.js\n/**\n * <span class=\"hljs-type\">Inherit</span> from `<span class=\"hljs-type\">Runnable</span>.proto<span class=\"hljs-keyword\">type</span>`.\n */\n<span class=\"hljs-type\">Test</span>.proto<span class=\"hljs-keyword\">type</span> = create(<span class=\"hljs-type\">Runnable</span>.prototype, {\n  constructor: <span class=\"hljs-type\">Test</span>\n});</code></pre>\n<p>我们再去Runnable看看：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/runnable.js</span>\nRunnable.prototype.run = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(fn)</span> </span>{\n  ...\n  <span class=\"hljs-comment\">// finished</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">done</span> <span class=\"hljs-params\">(err)</span> </span>{\n    ...\nfn(err);\n  }\n  ...\n  done();\n  ...\n  };</code></pre>\n<p>很长我就直接贴最后的代码了。可以看到最后执行回调, 回调的内容在<code>runTests</code>里</p>\n<h4 id=\"7-end\">7. End</h4>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/runner.js</span>\n<span class=\"hljs-keyword\">self</span>.runTest(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(err)</span> </span>{\n  ...\n  <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'pass'</span>, test);\n  <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'test end'</span>, test);\n  <span class=\"hljs-keyword\">self</span>.hookUp(<span class=\"hljs-string\">'afterEach'</span>, next);\n});</code></pre>\n<p>pass事件在<code>lib/reporters/spec.js</code>中：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/reporters/spec.js</span>\nrunner.on(<span class=\"hljs-string\">'pass'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">test</span>) </span>{\n  ...\n    fmt = indent() +\n      <span class=\"hljs-built_in\">color</span>(<span class=\"hljs-string\">'checkmark'</span>, <span class=\"hljs-string\">'  '</span> + Base.symbols.ok) +\n      <span class=\"hljs-built_in\">color</span>(<span class=\"hljs-string\">'pass'</span>, <span class=\"hljs-string\">' %s'</span>);\n    <span class=\"hljs-built_in\">console</span>.log(fmt, test.title);\n  ...\n});</code></pre>\n<p>其中<code>Base.symbols.ok</code> 代表通过时候显示的对号</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-regexp\">//</span> lib<span class=\"hljs-regexp\">/reporters/</span>base.js\nexports.symbols = {\n  ok: <span class=\"hljs-string\">'✓'</span>,\n  ...\n};</code></pre>\n<p><code>test end</code>在<code>lib/reporters/base.js</code>中：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/reporters/base.js</span>\nrunner.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">'test end'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">{\n  stats.tests = stats.tests || 0;\n  stats.tests++;\n}</span>);</span></code></pre>\n<p>是用来统计<code>test</code>个数的。回到<code>Runner</code></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/runner.js</span>\nRunner.prototype.run = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(fn)</span> </span>{\n  ...\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">start</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">self</span>.started = <span class=\"hljs-keyword\">true</span>;\n    <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'start'</span>);\n    <span class=\"hljs-keyword\">self</span>.runSuite(rootSuite, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n      debug(<span class=\"hljs-string\">'finished running'</span>);\n      <span class=\"hljs-keyword\">self</span>.emit(<span class=\"hljs-string\">'end'</span>);\n    });\n  }\n\n  debug(<span class=\"hljs-string\">'start'</span>);\n  ...\n  <span class=\"hljs-keyword\">return</span> this;\n};</code></pre>\n<p>发现runSuite的回调最终触发了end事件，在<code>lib/reporters/spec.js</code>中：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// lib/reporters/spec.js</span>\nrunner.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-built_in\">self</span>.epilogue.bind(<span class=\"hljs-built_in\">self</span>));\n<span class=\"hljs-built_in\">self</span>.epiloque在lib/reporters/base.js 中：\n<span class=\"hljs-comment\">// lib/reporters/base.js</span>\nBase.prototype.epilogue = function () {\n  <span class=\"hljs-params\">...</span>\n  <span class=\"hljs-comment\">// passes</span>\n  fmt = color(<span class=\"hljs-string\">'bright pass'</span>, <span class=\"hljs-string\">' '</span>) +\n    color(<span class=\"hljs-string\">'green'</span>, <span class=\"hljs-string\">' %d passing'</span>) +\n    color(<span class=\"hljs-string\">'light'</span>, <span class=\"hljs-string\">' (%s)'</span>);\n\n  console.<span class=\"hljs-keyword\">log</span>(fmt,\n    stats.passes || <span class=\"hljs-number\">0</span>,\n    ms(stats.<span class=\"hljs-built_in\">duration</span>));\n  <span class=\"hljs-params\">...</span>\n  console.<span class=\"hljs-keyword\">log</span>();\n};</code></pre>\n<p>这就是最终输出的 <code>2 passing (71ms)</code> 了。</p>\n<p>到这里我们的以例子做的分析结束，但是Mocha远远不止这些功能，篇幅所限更多的我们就不分析了。整体上看很复杂的面向对象编程，但是结构很清晰，功能划分明确，值得我们学习</p>\n","title":"Mocha源码分析","tags":["mocha"],"slug":"mocha-source-code-analysis","createDate":1509552000000,"id":"mocha-source-code-analysis","thumb":"https://images.unsplash.com/photo-1581434271558-341895128368?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"content":"<h3 id=\"1-对象字面量解析\">1. 对象字面量解析</h3>\n<pre><code class=\"language-javascript\">({<span class=\"hljs-attribute\">a</span>: <span class=\"hljs-number\">1</span>}<span class=\"hljs-selector-class\">.a</span>)\n({<span class=\"hljs-attribute\">a</span>: <span class=\"hljs-number\">1</span>})<span class=\"hljs-selector-class\">.a</span></code></pre>\n<p>声明对象字面值时，语句开头不应该用{，因为js解释器会认为这是语句块（block）的开始。</p>\n<h3 id=\"2-数字的点操作符\">2. 数字的点操作符</h3>\n<pre><code class=\"language-javascript\">(<span class=\"hljs-number\">1</span>).<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String()</span> <span class=\"hljs-comment\">// \"1\"</span>\n<span class=\"hljs-number\">1.</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String()</span>\n<span class=\"hljs-number\">1</span> .<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String()</span></code></pre>\n<p>js解释器会把数字后的.当做小数点而不是点操作符。</p>\n<h3 id=\"3--连等赋值\">3.  连等赋值</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keywords\">var</span> a = {n: <span class=\"hljs-number\">1</span>};\n<span class=\"hljs-keywords\">var</span> b = a;\na.<span class=\"hljs-symbol\">x</span> = a = {n: <span class=\"hljs-number\">2</span>};\nconsole.log(a.<span class=\"hljs-symbol\">x</span>);<span class=\"hljs-comment\">// --&gt; undefined</span>\nconsole.log(b.<span class=\"hljs-symbol\">x</span>);<span class=\"hljs-comment\">// --&gt; {n:2}</span></code></pre>\n<p><a href=\"http://justjavac.com/javascript/2012/04/05/javascript-continuous-assignment-operator.html\">写了 10 年 Javascript 未必全了解的连续赋值运算</a>\n<code>a.x = a = {n:2}</code>后，b.x检测到了 a.x 指向的 <code>a = { n: 2 }</code>的引用，然后由于 a 重新赋值后，b 和 a的引用断裂了，所以 b 的值是 <code>{ n: 1, x: a }</code>, 赋值后的 a 已经没有 x 了， 所以 a.x 是 undefined。</p>\n<h3 id=\"4-逗号操作符\">4. 逗号操作符</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-keyword\">var</span> temp = {\n    x: <span class=\"hljs-number\">40</span>,\n    foo: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.x;\n    }\n};\n(temp.foo)(); <span class=\"hljs-comment\">// 40</span>\n(temp.foo, temp.foo)(); <span class=\"hljs-comment\">// 20，而不是40</span>\n\n<span class=\"hljs-keyword\">var</span> f = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"1\"</span>; }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">g</span><span class=\"hljs-params\">()</span></span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>; })();\n\n<span class=\"hljs-keyword\">typeof</span> f; <span class=\"hljs-comment\">// \"number\"</span></code></pre>\n<p>逗号操作符会从左到右计算它的操作数，返回最后一个操作数的值。所以<code>(temp.foo, temp.foo)();</code>等价于<code>var fun = temp.foo; fun();，</code> fun调用时this指向window，所以返回20。</p>\n<h3 id=\"5--parseint传入数字\">5.  parseInt传入数字</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">parseInt</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0.000008</span>)</span></span> <span class=\"hljs-comment\">// &gt;&gt; 0</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">parseInt</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0.0000008</span>)</span></span> <span class=\"hljs-comment\">// &gt;&gt; 8</span></code></pre>\n<p>parseInt(arg)时会调用arg.toString()。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-params\">(0.000008)</span><span class=\"hljs-string\">.toString</span><span class=\"hljs-params\">()</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">\"0.000008\"</span>\n<span class=\"hljs-params\">(0.0000008)</span><span class=\"hljs-string\">.toString</span><span class=\"hljs-params\">()</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">\"8e-7\"</span></code></pre>\n<h3 id=\"6-利用给定接口获得闭包内部对象\">6. 利用给定接口获得闭包内部对象</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> o = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">var</span> person = {\n        name: <span class=\"hljs-string\">'Vincent'</span>,\n        age: <span class=\"hljs-number\">24</span>,\n    };\n    <span class=\"hljs-keyword\">return</span> {\n        run: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(k)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> person[k];\n        },\n    }\n}());</code></pre>\n<p>在不改变上面的代码情况下， 怎么得到原有的 person 对象？</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">Object</span>.defineProperty(<span class=\"hljs-built_in\">Object</span>.prototype, <span class=\"hljs-string\">'self'</span>, {\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;},\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>},\n    <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\">// 该属性的存在是确保该属性可被delete方法删除</span>\n});\n\n<span class=\"hljs-keyword\">var</span> person = o.run(<span class=\"hljs-string\">'self'</span>);\n<span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">Object</span>.prototype.self;\n<span class=\"hljs-comment\">//由于不推荐使用prototype来扩展自己定义的属性（扩展标准规定的除外），这里把扩展再去掉。</span>\n\n<span class=\"hljs-comment\">// 其他思路</span>\nperson = [<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"age\"</span>].reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj,k</span>)</span>{ obj[k] = o.run(k); <span class=\"hljs-keyword\">return</span> obj }, {})</code></pre>\n<h3 id=\"7-位操作符\">7. 位操作符</h3>\n<p>实现浮点数转整数，或者说取出数字的整数部分。比如-12.921 --&gt; -12，12.921 --&gt; 12等等。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convertToInt</span>(<span class=\"hljs-params\">num</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> num &gt;&gt; <span class=\"hljs-number\">0</span>;\n}\nconvertToInt(-Math.<span class=\"hljs-literal\">PI</span>); <span class=\"hljs-comment\">// -3</span>\nconvertToInt(<span class=\"hljs-number\">12.921</span>); <span class=\"hljs-comment\">// 12</span></code></pre>\n<p>有符号右移&gt;&gt;\n<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">按位操作符\n</a></p>\n<h3 id=\"8-functionprototypecallapply-的-this-问题\">8. Function.prototype.call/apply 的 this 问题</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nsm</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>);}\nnsm(); <span class=\"hljs-comment\">// Window{top: xxxx}</span>\nnsm.call(<span class=\"hljs-literal\">null</span>/<span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// Window{top: xxxx}</span>\nnsm.call(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Number {[[PrimitiveValue]]: 1}</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sm</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-string\">'use strict'</span>; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>);}\nsm(); <span class=\"hljs-comment\">// undefined</span>\nsm.call(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// null</span>\nsm.call(<span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// undefined</span>\nsm.call(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 1</span></code></pre>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">Function.prototype.call()</a>\n非严格模式下，this默认指向全局对象，call/apply显式指定this参数时也会强制转换参数为对象（如果不是对象）。其中，null/undefined被替换为全局对象，基础类型被转换为包装对象。</p>\n<p>严格模式下，this默认为undefined，且call/apply显式指定this参数时也不会有强制转换。</p>\n<h3 id=\"9-数组的展开扁平\">9. 数组的展开/扁平</h3>\n<p><code>[1,2,[2,3,[4,5]]]</code>---&gt;<code>[1,2,2,3,4,5]</code></p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> flatten(arr) {\n    <span class=\"hljs-keyword\">if</span>(!is<span class=\"hljs-constructor\">Array(<span class=\"hljs-params\">arr</span>)</span><span class=\"hljs-operator\"> || </span>!arr.length) {\n        return <span class=\"hljs-literal\">[]</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Array</span>.</span></span>prototype.concat.apply(<span class=\"hljs-literal\">[]</span>, arr.map(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-keyword\">val</span>) {\n            return is<span class=\"hljs-constructor\">Array(<span class=\"hljs-params\">val</span>)</span> ? flatten(<span class=\"hljs-keyword\">val</span>) : <span class=\"hljs-keyword\">val</span>;\n        }));\n    }\n\n    <span class=\"hljs-keyword\">function</span> is<span class=\"hljs-constructor\">Array(<span class=\"hljs-params\">arr</span>)</span> {\n        return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Object</span>.</span></span>prototype.toString.call(arr).slice(<span class=\"hljs-number\">8</span>, -<span class=\"hljs-number\">1</span>).<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">LowerCase()</span><span class=\"hljs-operator\"> === </span>'<span class=\"hljs-built_in\">array</span>';\n    }\n}\nflatten(<span class=\"hljs-literal\">[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,[<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]</span>]]);\n<span class=\"hljs-comment\">// [1, 2, 2, 3, 4, 5]</span></code></pre>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">Array.prototype.concat</a></p>\n<h3 id=\"10-delete-操作符\">10. delete 操作符</h3>\n<pre><code class=\"language-javascript\"> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(x)</span></span>{\n    <span class=\"hljs-keyword\">delete</span> x;\n    <span class=\"hljs-keyword\">return</span> x;\n})(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-comment\">// 返回 1</span></code></pre>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\">delete</a>\n对局部变量和函数名delete是无效的，delete只能删除属性。delete obj.propName 才是合法的形式。下面以代码详细解释：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// ========例1========</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-string\">'use strict'</span>;\n    <span class=\"hljs-keyword\">delete</span> x;\n})(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-comment\">// Uncaught SyntaxError: Delete of an unqualified identifier in strict mode.</span>\n<span class=\"hljs-comment\">// 在严格模式下，删除不合法的标识符x（x是变量）</span>\n\n<span class=\"hljs-comment\">// ========例2========</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-string\">'use strict'</span>;\n    <span class=\"hljs-keyword\">var</span> obj = {};\n    <span class=\"hljs-built_in\">Object</span>.defineProperty(obj, <span class=\"hljs-string\">'x'</span>, {\n        <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'hi'</span>\n    });\n    <span class=\"hljs-keyword\">delete</span> obj.x;\n})()\n<span class=\"hljs-comment\">// Uncaught TypeError: Cannot delete property 'x' of #&lt;Object&gt;</span>\n<span class=\"hljs-comment\">// 合法的删除形式，但属性x是non-configurable的，严格模式下报错</span>\n\n<span class=\"hljs-comment\">// ========例3========</span>\n<span class=\"hljs-built_in\">window</span>.x = <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-built_in\">window</span>.y = <span class=\"hljs-number\">100</span>;\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(x, <span class=\"hljs-built_in\">window</span>.x, <span class=\"hljs-built_in\">window</span>.y);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">delete</span> x, <span class=\"hljs-keyword\">delete</span> y);\n    <span class=\"hljs-built_in\">console</span>.log(x, <span class=\"hljs-built_in\">window</span>.x, <span class=\"hljs-built_in\">window</span>.y);\n    <span class=\"hljs-keyword\">return</span> x;\n})(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-comment\">// 1 100 100</span>\n<span class=\"hljs-comment\">// false true</span>\n<span class=\"hljs-comment\">// 1 100 undefined</span>\n\n<span class=\"hljs-comment\">// delete x失败，因为x是变量（函数内局部变量x覆盖全局变量x），delete y成功，y是全局对象window的属性。</span>\n<span class=\"hljs-comment\">// 非严格模式下，可以 delete y 的写法，但此时是尝试删除全局对象的同名属性y（y在作用域中不是变量或函数名）。</span></code></pre>\n<h3 id=\"11-找出字符串中出现最多的字母\">11. 找出字符串中出现最多的字母</h3>\n<p>假设字符串&#39;ababccdeajxac&#39;，请找出出现次数最多的字符？</p>\n<p>最先想到的解法是用map纪录每个字符的次数，然后找出最多的即可：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> getMaxNumberOfChar(str) {\n    <span class=\"hljs-keyword\">return</span> (str + <span class=\"hljs-string\">''</span>).split(<span class=\"hljs-string\">''</span>).reduce(<span class=\"hljs-keyword\">function</span>(pre, cur, <span class=\"hljs-keyword\">index</span>, arr) {\n        cur <span class=\"hljs-keyword\">in</span> pre ? pre[cur]++ : (pre[cur] = <span class=\"hljs-number\">1</span>);\n        pre[cur] &gt; pre.<span class=\"hljs-keyword\">value</span> &amp;&amp; (pre.char = cur, pre.<span class=\"hljs-keyword\">value</span> = pre[cur]);\n        <span class=\"hljs-keyword\">return</span> pre;\n    }, {<span class=\"hljs-keyword\">value</span>: <span class=\"hljs-number\">0</span>});\n}\ngetMaxNumberOfChar(<span class=\"hljs-string\">'ababccdeajxac'</span>) // <span class=\"hljs-keyword\">Object</span> {<span class=\"hljs-keyword\">value</span>: <span class=\"hljs-number\">4</span>, a: <span class=\"hljs-number\">4</span>, <span class=\"hljs-type\">char</span>: \"a\", b: <span class=\"hljs-number\">2</span>, c: <span class=\"hljs-number\">3</span>…}</code></pre>\n<p>此外，可以考虑用正则来辅助处理：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">function</span> <span class=\"hljs-selector-tag\">getMaxNumberOfChar</span>(str) {\n    <span class=\"hljs-selector-tag\">return</span> (str + <span class=\"hljs-string\">''</span>)<span class=\"hljs-selector-class\">.split</span>(<span class=\"hljs-string\">''</span>)<span class=\"hljs-selector-class\">.sort</span>()<span class=\"hljs-selector-class\">.join</span>(<span class=\"hljs-string\">''</span>)<span class=\"hljs-selector-class\">.match</span>(/(\\w)\\<span class=\"hljs-number\">1</span>*/g)<span class=\"hljs-selector-class\">.reduce</span>(function(pre, cur) {\n        <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">cur</span><span class=\"hljs-selector-class\">.length</span> &gt; <span class=\"hljs-selector-tag\">pre</span><span class=\"hljs-selector-class\">.value</span> ? {<span class=\"hljs-attribute\">value</span>: cur.length, <span class=\"hljs-attribute\">char</span>: cur[<span class=\"hljs-number\">0</span>]} : <span class=\"hljs-selector-tag\">pre</span>;\n    }, {<span class=\"hljs-attribute\">value</span>: <span class=\"hljs-number\">0</span>})\n}\ngetMaxNumberOfChar(<span class=\"hljs-string\">'ababccdeajxac'</span>) <span class=\"hljs-comment\">// Object {value: 4, char: \"a\"}</span></code></pre>\n<h3 id=\"12--storage-event\">12.  storage event</h3>\n<p>当你用<code>localStorage</code>或<code>sessionStorage</code>的API去更改Storage时，会触发storage事件：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'storage'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'storage'</span>, e);\n});</code></pre>\n<p>这里没有什么特别的，但基本所有问题的根源，或者说要特别注意的是：本页面更改Storage只能在同域名的<strong>其它</strong>页面去捕获storage事件。</p>\n<h3 id=\"13-一个函数柯里化问题及更多\">13. 一个函数柯里化问题及更多</h3>\n<p>要求实现sum函数如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span> <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>)</span></span> <span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>)</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span></span> <span class=\"hljs-comment\">// 6</span></code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(item)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> cur = item;\n    <span class=\"hljs-keyword\">var</span> inner = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(next)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (next != <span class=\"hljs-literal\">null</span>) cur += next;\n        <span class=\"hljs-keyword\">return</span> inner;\n    };\n    inner.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> cur;\n    }\n    <span class=\"hljs-keyword\">return</span> inner;\n}</code></pre>\n<p>console.log(), 如果传入的是函数，则会调用toString()方法打印函数，这里改写了inner的toString函数，达到输出结果的目的</p>\n<h3 id=\"14-typeof\">14. typeOf</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">Object</span><span class=\"hljs-selector-class\">.prototype</span><span class=\"hljs-selector-class\">.toString</span><span class=\"hljs-selector-class\">.call</span>(<span class=\"hljs-selector-tag\">obj</span>)<span class=\"hljs-selector-class\">.slice</span>(8, <span class=\"hljs-selector-tag\">-1</span>);</code></pre>\n<h3 id=\"15--运算规则的图形化表示\">15.  <code>==</code>运算规则的图形化表示</h3>\n<p><a href=\"https://camo.githubusercontent.com/af251d0062891ec9d9ff4b9dc7886b4522c743d0/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f61363630636162326779316663796a666d776330336a323078733067796a7630\">link</a></p>\n<pre><code>前面说得很乱，根据我们得到的最终的图<span class=\"hljs-number\">3</span>，我们总结一下==运算的规则：\n\n<span class=\"hljs-number\">1.</span> <span class=\"hljs-literal\">undefined</span> == <span class=\"hljs-literal\">null</span>，结果是<span class=\"hljs-literal\">true</span>。且它俩与所有其他值比较的结果都是<span class=\"hljs-literal\">false</span>。\n\n<span class=\"hljs-number\">2.</span> <span class=\"hljs-built_in\">String</span> == <span class=\"hljs-built_in\">Boolean</span>，需要两个操作数同时转为<span class=\"hljs-built_in\">Number</span>。\n\n<span class=\"hljs-number\">3.</span> <span class=\"hljs-built_in\">String</span>/<span class=\"hljs-built_in\">Boolean</span> == <span class=\"hljs-built_in\">Number</span>，需要<span class=\"hljs-built_in\">String</span>/<span class=\"hljs-built_in\">Boolean</span>转为<span class=\"hljs-built_in\">Number</span>。\n\n<span class=\"hljs-number\">4.</span> <span class=\"hljs-built_in\">Object</span> == Primitive，需要<span class=\"hljs-built_in\">Object</span>转为Primitive(具体通过valueOf和toString方法)。\n\n瞧见没有，一共只有<span class=\"hljs-number\">4</span>条规则！是不是很清晰、很简单。</code></pre><p>原文:   <a href=\"https://github.com/jawil/blog/issues/1\">从&#39;[]== ! []&#39;为true来剖析JavaScript各种蛋疼的类型转换</a></p>\n<h3 id=\"16-变量提升预加载\">16. 变量提升/预加载</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!foo) {\n        <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(foo);\n}\nbar(); <span class=\"hljs-comment\">// 10</span>\n\nfaz(<span class=\"hljs-string\">'faz'</span>); <span class=\"hljs-comment\">// faz</span>\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">true</span>){\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(x);\n    }\n}\n<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-literal\">false</span>){\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\">x</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(x);\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">faz</span>(<span class=\"hljs-params\">x</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(x);\n}\nfoo(<span class=\"hljs-string\">'foo'</span>); <span class=\"hljs-comment\">// foo</span>\nbar(<span class=\"hljs-string\">'bar'</span>); <span class=\"hljs-comment\">// Uncaught TypeError: bar is not a function</span></code></pre>\n<p>对于变量的定义，无论是否存在逻辑判断，JavaScript都会进行预解析，而对于函数声明，JavaScript并不会对逻辑判断中的进行预加载，只会对函数主体中暴露的进行预加载。</p>\n<h3 id=\"17-预加载顺序\">17. 预加载顺序</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">console</span>.log(x) <span class=\"hljs-comment\">// function</span>\n<span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-built_in\">console</span>.log(x) <span class=\"hljs-comment\">//10</span>\nx = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-built_in\">console</span>.log(x) <span class=\"hljs-comment\">//20</span>\n\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x,y</span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(x); <span class=\"hljs-comment\">// ƒ x(){}</span>\n    <span class=\"hljs-built_in\">console</span>.log(y); <span class=\"hljs-comment\">//2</span>\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">10</span>,y=<span class=\"hljs-number\">20</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>)</span>{}\n    <span class=\"hljs-built_in\">console</span>.log(x); <span class=\"hljs-comment\">//10</span>\n    <span class=\"hljs-built_in\">console</span>.log(y);  <span class=\"hljs-comment\">//20</span>\n})(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>)</code></pre>\n<pre><code>    <span class=\"hljs-number\">1.</span> 函数的参数，如果有参数直接赋值\n    <span class=\"hljs-number\">2.</span> 函数内部的函数声明，如果有则前置，如果函数名与参数重复则覆盖掉参数\n    <span class=\"hljs-number\">3.</span> 函数内部的变量声明，如果有则前置，如果变量名与 函数声明重复 会忽略该变量声明，只是忽略声明 赋值语句仍有效</code></pre><h3 id=\"18-查找数组中最大小值\">18. 查找数组中最大/小值</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> numbers = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">458</span> , <span class=\"hljs-number\">120</span> , <span class=\"hljs-number\">-215</span> ];\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.min.apply(<span class=\"hljs-literal\">null</span>, numbers));\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Math</span>.max.apply(<span class=\"hljs-literal\">null</span>, numbers));</code></pre>\n<h3 id=\"19-判断一个对象是不是数组\">19. 判断一个对象是不是数组</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isArray</span>(<span class=\"hljs-params\">myArray</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> myArray.<span class=\"hljs-keyword\">constructor</span>.toString(<span class=\"hljs-params\"></span>).indexOf(<span class=\"hljs-params\">\"<span class=\"hljs-built_in\">Array</span>\"</span>) &gt; -1;\n}</code></pre>\n<h3 id=\"20-this\">20. this</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> length = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">{\n    console.log(this.length)\n}</span>;</span>\n<span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-comment\">{\n    length: 5,\n    method: function (fn) {\n        fn();\n        arguments[0]();\n        fn.call(obj, 12);\n    }</span>\n};\nobj<span class=\"hljs-function\">.<span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">(fn, 1)</span>;</span> <span class=\"hljs-comment\">// 10 2 5</span></code></pre>\n<p><a href=\"https://segmentfault.com/a/1190000007964935\">一个小小的JavaScript题目</a></p>\n<h3 id=\"21-运算符优先级问题\">21. 运算符优先级问题</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">'why I am '</span> + <span class=\"hljs-keyword\">typeof</span> + <span class=\"hljs-string\">''</span>; <span class=\"hljs-comment\">// so what is str?</span></code></pre>\n<p><code>str</code> 是 <code>why I am number</code>,  思考一下，上面的代码应该等同于<code>&#39;why I am &#39; + (typeof (+ &#39;&#39;))</code>。\n<code>typeof</code> 运算符优先级高于<code>+</code>，并且是<code>right-to-left</code></p>\n<h3 id=\"22-prefix-increment-operator的问题\">22. Prefix Increment Operator(++)的问题</h3>\n<p>关于前自增运算符的一个有意思的问题：</p>\n<pre><code class=\"language-javascript\">++<span class=\"hljs-string\">'52'</span>.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-string\">''</span>)[<span class=\"hljs-number\">0</span>]<span class=\"hljs-comment\"> //返回的是？</span></code></pre>\n<p>这道题来自<a href=\"http://www.zhangxinxu.com/wordpress/2013/05/%E7%90%86%E8%A7%A3another-javascript-quiz-%E9%A2%98%E7%9B%AE/\">Another JavaScript quiz</a>第8题，主要是优先级问题，应该返回6，看完答案应该没什么难理解的。但是，题目的某个注意点:</p>\n<pre><code class=\"language-javascript\">++'5'\n<span class=\"hljs-comment\">// Uncaught ReferenceError: Invalid left-hand side expression in prefix operation</span></code></pre>\n<p>却非常有意思。所以问题是为什么++&#39;5&#39;报错而++&#39;52&#39;.split(&#39;&#39;)[0]可以正确执行？</p>\n<p>阅读<a href=\"http://es5.github.io/#x11.4.4\">http://es5.github.io/#x11.4.4</a>，可以看到_Prefix Increment Operator_操作的第5步PutValue(expr, newValue)要求expr是引用。</p>\n<p>而在这里:</p>\n<ul>\n<li><code>&#39;5&#39;</code>是值，不是引用，所以报错。</li>\n<li><code>&#39;52&#39;.split(&#39;&#39;)[0]</code>返回的是<code>[&#39;5&#39;,&#39;2&#39;][0]</code>，对象的属性访问返回的是引用，所以可以正确执行。</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keywords\">var</span> <span class=\"hljs-symbol\">x</span> = <span class=\"hljs-string\">'5'</span>;\n++<span class=\"hljs-symbol\">x</span>  <span class=\"hljs-comment\">// 6</span>\n\n++<span class=\"hljs-string\">'5'</span>[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// 6</span></code></pre>\n<h3 id=\"23-异步的throw将不会被promise捕获\">23. 异步的<code>throw</code>将不会被<code>Promise</code>捕获</h3>\n<p>我们知道，在<code>Promise</code>内部<code>throw</code>，<code>promise</code>将会变成<code>rejected</code>状态，并且通过<code>catch</code>可以捕获错误（也就是说，我们可以不用显示调用<code>reject</code>）。示例如下：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// alternative: reject('hi')</span>\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">'hi'</span>\n})\n<span class=\"hljs-comment\">// 这里的 reason 就是 hi</span>\npromise.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(reason))</code></pre>\n<p>但请注意，异步的<code>throw</code>将不会被捕获到。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">timeoutPromiseThrow</span>(<span class=\"hljs-params\">delay</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>) =&gt;</span> {\n        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">throw</span> ( <span class=\"hljs-string\">\"Timeout!\"</span> );\n        }, delay );\n    } );\n}\n\n<span class=\"hljs-keyword\">const</span> th = timeoutPromiseThrow(<span class=\"hljs-number\">2000</span>).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"throw \"</span> + err); })\n<span class=\"hljs-comment\">// th 将永远是 pending 状态。</span></code></pre>\n<p>解释：<code>promise</code>内部有类似<code>try{} catch...</code>的机制，但显然，异步的<code>throw</code>是无法被捕获的，异步请显式调用<code>reject</code>。</p>\n<h3 id=\"24-jsonparse-的一个摸不着头脑的报错unexpected-token-o-in-json\">24. <code>JSON.parse</code> 的一个摸不着头脑的报错<code>Unexpected token o in JSON</code></h3>\n<pre><code class=\"language-javascript\">JSON.parse<span class=\"hljs-params\">(obj)</span> <span class=\"hljs-string\">//</span> obj.toString<span class=\"hljs-params\">()</span> <span class=\"hljs-params\">---</span>&gt; <span class=\"hljs-string\">\"[object Object]\"</span></code></pre>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON\">JSON语法</a></p>\n<pre><code class=\"language-javascript\">JSON.parse(<span class=\"hljs-string\">'[1, \"b\"]'</span>)\n<span class=\"hljs-regexp\">//</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"b\"</span>]</code></pre>\n<h3 id=\"25-javascript-中参数是值传递还是引用传递？\">25. JavaScript 中参数是值传递还是引用传递？</h3>\n<p><a href=\"https://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language\">StackOverflow</a> :\nJavaScript 既不是值传递，也不是引用传递，而是 call by sharing .</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">changeStuff</span>(<span class=\"hljs-params\">a, b, c</span>)\n</span>{\n  a = a * <span class=\"hljs-number\">10</span>;\n  b.item = <span class=\"hljs-string\">\"changed\"</span>;\n  c = {<span class=\"hljs-attr\">item</span>: <span class=\"hljs-string\">\"changed\"</span>};\n}\n\n<span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">var</span> obj1 = {<span class=\"hljs-attr\">item</span>: <span class=\"hljs-string\">\"unchanged\"</span>};\n<span class=\"hljs-keyword\">var</span> obj2 = {<span class=\"hljs-attr\">item</span>: <span class=\"hljs-string\">\"unchanged\"</span>};\n\nchangeStuff(num, obj1, obj2);\n\n<span class=\"hljs-built_in\">console</span>.log(num);   <span class=\"hljs-comment\">// 10</span>\n<span class=\"hljs-built_in\">console</span>.log(obj1.item);    <span class=\"hljs-comment\">// changed</span>\n<span class=\"hljs-built_in\">console</span>.log(obj2.item);    <span class=\"hljs-comment\">// unchanged</span></code></pre>\n<pre><code>    <span class=\"hljs-number\">1.</span> 传值：参数指向新内存（新内存复制了值），操作参数和原来的变量（指向的内存）没有半毛钱的关系。\n    <span class=\"hljs-number\">2.</span> 传引用：参数指向同一份内存（没有复制值），操作参数即操作原来的变量（指向的内存）。\n    <span class=\"hljs-number\">3.</span> call by sharing：参数指向新内存，但新内存复制了原来的内存地址，直接赋值的话相当于覆盖了新内存的内容，不会影响原来的变量；但是改变对象的属性其实还是操作了原来的对象。</code></pre><p>Java 中传参数的本质是赋值操作，primitive 就是本身的值，object 就是内存地址。</p>\n<p>以上问题来自于<a href=\"https://github.com/creeperyang/blog/issues/2\">JavaScript问题集锦</a>, 以及看的时候查阅的其他资料</p>\n<h3 id=\"26-javascript的操作符优先级从高到低排序\">26. JavaScript的操作符优先级,从高到低排序</h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">MDN</a></p>\n<h3 id=\"27--一道颇有难度的javascript题\">27.  <a href=\"https://segmentfault.com/a/1190000007979730\">一道颇有难度的JavaScript题</a></h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'1'</span>);\n    };\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n}\nFoo.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'2'</span>);\n};\nFoo.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'3'</span>);\n};\n<span class=\"hljs-keyword\">var</span> getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'4'</span>);\n};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">5</span>);\n}\n\nFoo.getName();  <span class=\"hljs-comment\">// 2</span>\ngetName();    <span class=\"hljs-comment\">// 4</span>\nFoo().getName(); <span class=\"hljs-comment\">// 1</span>\ngetName();  <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-keyword\">new</span> Foo.getName(); <span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-keyword\">new</span> Foo().getName();   <span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">new</span> Foo().getName();   <span class=\"hljs-comment\">// 3</span></code></pre>\n<p>new 优先级？</p>\n<h3 id=\"28-实现-functionprototypebind\">28. 实现 <code>Function.prototype.bind()</code></h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(num1, num2)</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.num1 = num1;\n    <span class=\"hljs-keyword\">this</span>.num2 = num2;\n}\n\nobj = {}\ntest1 = test.bind(obj, <span class=\"hljs-number\">456</span>)\ntest1(<span class=\"hljs-number\">123</span>)\nobj.num1 <span class=\"hljs-comment\">// 456</span>\nobj.num2 <span class=\"hljs-comment\">// 123</span></code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-built_in\">Function</span>.prototype.bind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-keyword\">this</span>;\n    <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n    <span class=\"hljs-keyword\">var</span> context = args.shift();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">return</span> fn.apply(context,\n            args.concat(<span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>)));\n    };\n};</code></pre>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">Function.prototype.apply()</a>\n<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function.prototype.bind()</a></p>\n<h3 id=\"29-函数节流和函数防抖\">29. 函数节流和函数防抖</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 简单的节流函数</span>\n<span class=\"hljs-comment\">//fun 要执行的函数</span>\n<span class=\"hljs-comment\">//delay 延迟</span>\n<span class=\"hljs-comment\">//time  在time时间内必须执行一次</span>\nfunction throttle(<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>, delay, time) {</span>\n    <span class=\"hljs-keyword\">var</span> timeout,\n        startTime = new Date();\n    <span class=\"hljs-keyword\">return</span> function() {\n        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-keyword\">this</span>,\n            args = arguments,\n            curTime = new Date();\n        clearTimeout(timeout);\n        <span class=\"hljs-comment\">// 如果达到了规定的触发时间间隔，触发 handler</span>\n        <span class=\"hljs-keyword\">if</span> (curTime - startTime &gt;= time) {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>.<span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(context, args)</span></span>;\n            startTime = curTime;\n            <span class=\"hljs-comment\">// 没达到触发间隔，重新设定定时器</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            timeout = setTimeout(function(){\n                <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>.<span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(context, args)</span></span>;\n            }, delay);\n        }\n    };\n};</code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 简单的防抖函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">fn, delay</span>) </span>{\n  <span class=\"hljs-comment\">// 持久化一个定时器 timer</span>\n  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-comment\">// 闭包函数可以访问 timer</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 通过 'this' 和 'arguments'</span>\n    <span class=\"hljs-comment\">// 获得函数的作用域和参数</span>\n    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span>;\n    <span class=\"hljs-keyword\">let</span> args = <span class=\"hljs-built_in\">arguments</span>;\n    <span class=\"hljs-comment\">// 如果事件被触发，清除 timer 并重新开始计时</span>\n    clearTimeout(timer);\n    timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      fn.apply(context, args);\n    }, delay);\n  }\n}</code></pre>\n<p><a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a></p>\n<h3 id=\"30--懒加载-lazyload\">30.  懒加载 lazyload</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'img'</span>).length;\n    <span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"img\"</span>);\n    <span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//存储图片加载到的位置，避免每次都从第一张图片开始遍历</span>\n    lazyload(); <span class=\"hljs-comment\">//页面载入完毕加载可是区域内的图片</span>\n    <span class=\"hljs-built_in\">window</span>.onscroll = lazyload;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lazyload</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">//监听页面滚动事件</span>\n        <span class=\"hljs-keyword\">var</span> seeHeight = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight; <span class=\"hljs-comment\">//可见区域高度</span>\n        <span class=\"hljs-keyword\">var</span> scrollTop = <span class=\"hljs-built_in\">document</span>.documentElement.scrollTop || <span class=\"hljs-built_in\">document</span>.body.scrollTop; <span class=\"hljs-comment\">//滚动条距离顶部高度</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = n; i &lt; num; i++) {\n            <span class=\"hljs-keyword\">if</span> (img[i].offsetTop &lt; seeHeight + scrollTop) {\n                <span class=\"hljs-keyword\">if</span> (img[i].getAttribute(<span class=\"hljs-string\">\"src\"</span>) == <span class=\"hljs-string\">\"default.jpg\"</span>) {\n                    img[i].src = img[i].getAttribute(<span class=\"hljs-string\">\"data-src\"</span>);\n                }\n                n = i + <span class=\"hljs-number\">1</span>;\n            }\n        }\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>使用节流函数进行性能优化</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// 简单的节流函数</span>\n<span class=\"hljs-comment\">//fun 要执行的函数</span>\n<span class=\"hljs-comment\">//delay 延迟</span>\n<span class=\"hljs-comment\">//time  在time时间内必须执行一次</span>\nfunction throttle(<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>, delay, time) {</span>\n    <span class=\"hljs-keyword\">var</span> timeout,\n        startTime = new Date();\n    <span class=\"hljs-keyword\">return</span> function() {\n        <span class=\"hljs-keyword\">var</span> context = <span class=\"hljs-keyword\">this</span>,\n            args = arguments,\n            curTime = new Date();\n        clearTimeout(timeout);\n        <span class=\"hljs-comment\">// 如果达到了规定的触发时间间隔，触发 handler</span>\n        <span class=\"hljs-keyword\">if</span> (curTime - startTime &gt;= time) {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>.<span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(context, args)</span></span>;\n            startTime = curTime;\n            <span class=\"hljs-comment\">// 没达到触发间隔，重新设定定时器</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            timeout = setTimeout(function(){\n                <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span>.<span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(context, args)</span></span>;\n            }, delay);\n        }\n    };\n};\n<span class=\"hljs-comment\">// 实际想绑定在 scroll 事件上的 handler</span>\nfunction lazyload(event) {}\n<span class=\"hljs-comment\">// 采用了节流函数</span>\nwindow.addEventListener(<span class=\"hljs-string\">'scroll'</span>,throttle(lazyload,<span class=\"hljs-number\">500</span>,<span class=\"hljs-number\">1000</span>));</code></pre>\n<p>使用去抖函数进行性能优化</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// debounce函数用来包裹我们的事件</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">debounce</span>(<span class=\"hljs-params\">fn, delay</span>) </span>{\n  <span class=\"hljs-comment\">// 持久化一个定时器 timer</span>\n  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-comment\">// 闭包函数可以访问 timer</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 通过 'this' 和 'arguments'</span>\n    <span class=\"hljs-comment\">// 获得函数的作用域和参数</span>\n    <span class=\"hljs-keyword\">let</span> context = <span class=\"hljs-keyword\">this</span>;\n    <span class=\"hljs-keyword\">let</span> args = <span class=\"hljs-built_in\">arguments</span>;\n    <span class=\"hljs-comment\">// 如果事件被触发，清除 timer 并重新开始计时</span>\n    clearTimeout(timer);\n    timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      fn.apply(context, args);\n    }, delay);\n  }\n}\n<span class=\"hljs-comment\">// 实际想绑定在 scroll 事件上的 handler</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lazyload</span>(<span class=\"hljs-params\">event</span>) </span>{}\n<span class=\"hljs-comment\">// 采用了去抖函数</span>\n<span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'scroll'</span>,throttle(lazyload,<span class=\"hljs-number\">500</span>));</code></pre>\n<p><a href=\"https://i.jakeyu.top//2016/11/26/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/\">实现图片懒加载(lazyload)</a></p>\n<h3 id=\"31-new-操作符都做了什么？\">31. new 操作符都做了什么？</h3>\n<pre><code><span class=\"hljs-number\">1.</span> 创建一个新的对象\n<span class=\"hljs-number\">2.</span> 将构造函数的<span class=\"hljs-keyword\">this</span>指向这个新对象\n<span class=\"hljs-number\">3.</span> 执行构造函数的代码，为这个对象添加属性，方法等\n<span class=\"hljs-number\">4.</span> 返回新对象</code></pre><h3 id=\"32-原生ajax\">32. 原生Ajax</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">window</span>.ActiveXObject){\n    xmlHttp=<span class=\"hljs-keyword\">new</span> ActiveXObject(<span class=\"hljs-string\">\"Microsoft.XMLHTTP\"</span>);\n}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">window</span>.XMLHttpRequest)\n    xmlHttp=<span class=\"hljs-keyword\">new</span> XMLHttpRequest();\n}\n\n<span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest()\nxhr.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">switch</span> (xhr.readyState) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'未初始化, 尚未调用open()'</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'启动, 已调用open(), 未调用send()'</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'发送, 已调用send(), 为未收到响应'</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'接受, 已接受到部分数据'</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'完成, 已接受全部数据'</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">default</span>:\n      <span class=\"hljs-keyword\">break</span>;\n  }\n}\n<span class=\"hljs-comment\">// xhr.onload = function(e) {</span>\n<span class=\"hljs-comment\">//  var res = e.target.response.message</span>\n<span class=\"hljs-comment\">// }</span>\n<span class=\"hljs-comment\">// xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');</span>\n<span class=\"hljs-comment\">// xhr.responseType = 'json';</span>\n<span class=\"hljs-comment\">// 避免缓存： url+时间戳</span>\nxhr.open(<span class=\"hljs-string\">'GET'</span>, URL);\nxhr.send(<span class=\"hljs-literal\">null</span>);\n\nhttpRequest.open(<span class=\"hljs-string\">'POST'</span>, url);\nhttpRequest.setRequestHeader(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'application/x-www-form-urlencoded'</span>);\nhttpRequest.send(<span class=\"hljs-string\">'userName='</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(userName));</code></pre>\n<p><a href=\"https://segmentfault.com/a/1190000004100271\">脱离jQuery，使用原生Ajax</a></p>\n<h3 id=\"33-封装一个轮播图组件\">33. 封装一个轮播图组件</h3>\n<pre><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"> $ </span>) </span>{\n    $.fn.initCarousel = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.data(<span class=\"hljs-string\">'target'</span>));\n      <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>,\n          target = $(<span class=\"hljs-keyword\">this</span>.data(<span class=\"hljs-string\">'target'</span>)),\n          elementName = <span class=\"hljs-keyword\">this</span>.data(<span class=\"hljs-string\">'element'</span>),\n          elements = target.find(elementName),\n          time = <span class=\"hljs-literal\">null</span>,\n          timeNav = <span class=\"hljs-literal\">null</span>,\n          curImg = <span class=\"hljs-literal\">null</span>,\n          curIndex = <span class=\"hljs-number\">1</span>,\n          init = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-built_in\">console</span>.log(elements);\n            curImg = $(target.find(elementName + <span class=\"hljs-string\">'.cur'</span>)[<span class=\"hljs-number\">0</span>]);\n            self.find(<span class=\"hljs-string\">'li'</span>).removeClass(<span class=\"hljs-string\">'hover'</span>);\n            self.find(<span class=\"hljs-string\">'li'</span>).eq(curIndex).addClass(<span class=\"hljs-string\">'hover'</span>);\n            curImg.fadeOut(<span class=\"hljs-number\">10</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n              curImg.removeClass(<span class=\"hljs-string\">'cur'</span>);\n              elements.eq(curIndex - <span class=\"hljs-number\">1</span>).addClass(<span class=\"hljs-string\">'cur'</span>).fadeIn(<span class=\"hljs-number\">500</span>)\n            });\n            curIndex++;\n            curIndex = curIndex == elements.length ? <span class=\"hljs-number\">0</span> : curIndex++;\n            time = setTimeout(init, <span class=\"hljs-number\">3000</span>)\n          };\n      time = setTimeout(init, <span class=\"hljs-number\">3000</span>);\n      <span class=\"hljs-keyword\">this</span>.find(<span class=\"hljs-string\">'li'</span>).bind(<span class=\"hljs-string\">'mouseenter'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        curIndex = $(<span class=\"hljs-keyword\">this</span>).index();\n        <span class=\"hljs-built_in\">console</span>.log(curIndex);\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)\n        self.find(<span class=\"hljs-string\">\"li\"</span>).removeClass(<span class=\"hljs-string\">\"hover\"</span>);\n        clearTimeout(time);\n        clearTimeout(timeNav);\n        timeNav = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n          elements.hide();\n          elements.removeClass(<span class=\"hljs-string\">'cur'</span>);\n          elements.eq(curIndex - <span class=\"hljs-number\">1</span>).addClass(<span class=\"hljs-string\">'cur'</span>).show()\n        }, <span class=\"hljs-number\">200</span>)\n        $(<span class=\"hljs-keyword\">this</span>).addClass(<span class=\"hljs-string\">'hover'</span>);\n        curIndex = curIndex == elements.length ? <span class=\"hljs-number\">0</span> : curIndex + <span class=\"hljs-number\">1</span>;\n        time = setTimeout(init, <span class=\"hljs-number\">3000</span>)\n      })\n    };\n})( jQuery );\n$(<span class=\"hljs-string\">'.slide'</span>).initCarousel();</code></pre><h3 id=\"34-输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列12473568和中序遍历序列47215386，则重建二叉树并返回。\">34. 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</h3>\n<pre><code class=\"language-javascript\">作者：faremax\n链接：https:<span class=\"hljs-comment\">//www.nowcoder.com/discuss/49349</span>\n来源：牛客网\n\n<span class=\"hljs-comment\">/* function TreeNode(x) {\n    this.val = x;\n    this.left = null;\n    this.right = null;\n} */</span>\n<span class=\"hljs-keyword\">function</span> re<span class=\"hljs-constructor\">ConstructBinaryTree(<span class=\"hljs-params\">pre</span>, <span class=\"hljs-params\">vin</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(pre.length<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> || </span>vin.length<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">0</span>){\n        return null;\n    };\n    var index = vin.index<span class=\"hljs-constructor\">Of(<span class=\"hljs-params\">pre</span>[0])</span>;\n    var left = vin.slice(<span class=\"hljs-number\">0</span>,index);\n    var right = vin.slice(index+<span class=\"hljs-number\">1</span>);\n    var node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(<span class=\"hljs-params\">vin</span>[<span class=\"hljs-params\">index</span>])</span>;\n    node.left = re<span class=\"hljs-constructor\">ConstructBinaryTree(<span class=\"hljs-params\">pre</span>.<span class=\"hljs-params\">slice</span>(1,<span class=\"hljs-params\">index</span>+1)</span>,left);\n    node.right = re<span class=\"hljs-constructor\">ConstructBinaryTree(<span class=\"hljs-params\">pre</span>.<span class=\"hljs-params\">slice</span>(<span class=\"hljs-params\">index</span>+1)</span>,right);\n    return node;\n}</code></pre>\n<h3 id=\"35-用两个栈来实现一个队列，完成队列的push和pop操作。-队列中的元素为int类型。\">35. 用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</h3>\n<pre><code class=\"language-javascript\">作者：faremax\n链接：https://www.nowcoder.com/discuss/<span class=\"hljs-number\">49349</span>\n来源：牛客网\n\n<span class=\"hljs-built_in\">var</span> stack1 = [];\n<span class=\"hljs-built_in\">var</span> stack2 = [];\nfunction <span class=\"hljs-built_in\">push</span>(node){\n    stack1.<span class=\"hljs-built_in\">push</span>(node);\n}\nfunction <span class=\"hljs-built_in\">pop</span>(){\n    <span class=\"hljs-built_in\">var</span> temp = stack1.<span class=\"hljs-built_in\">pop</span>();\n    <span class=\"hljs-keyword\">while</span>(temp){\n        stack2.<span class=\"hljs-built_in\">push</span>(temp);\n        temp = stack1.<span class=\"hljs-built_in\">pop</span>();\n    }\n    <span class=\"hljs-built_in\">var</span> result = stack2.<span class=\"hljs-built_in\">pop</span>();\n    temp = stack2.<span class=\"hljs-built_in\">pop</span>();\n    <span class=\"hljs-keyword\">while</span>(temp){\n        stack1.<span class=\"hljs-built_in\">push</span>(temp);\n        temp = stack2.<span class=\"hljs-built_in\">pop</span>();\n    }\n    <span class=\"hljs-built_in\">return</span> result;\n}</code></pre>\n<h3 id=\"36-大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。n39\">36. 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。n&lt;=39</h3>\n<pre><code class=\"language-javascript\">作者：faremax\n链接：https:<span class=\"hljs-comment\">//www.nowcoder.com/discuss/49349</span>\n来源：牛客网\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Fibonacci</span><span class=\"hljs-params\">(n)</span></span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">1</span>, temp;\n    <span class=\"hljs-keyword\">if</span>(n &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++){\n      temp = b;\n      b = a + b;\n      a = temp;\n    }\n    <span class=\"hljs-keyword\">return</span> a;\n}</code></pre>\n<h3 id=\"37-一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\">37. 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</h3>\n<p>我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p>\n<pre><code class=\"language-javascript\">作者：faremax\n链接：https:<span class=\"hljs-comment\">//www.nowcoder.com/discuss/49349</span>\n来源：牛客网\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jumpFloor</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">number</span></span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">number</span> &lt; <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">number</span> === <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">number</span> === <span class=\"hljs-number\">2</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-keyword\">var</span> temp = <span class=\"hljs-number\">0</span>, a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">3</span>; i &lt;= <span class=\"hljs-built_in\">number</span>; i++){\n        temp = a + b;\n        a = b;\n        b = temp;\n    }\n    <span class=\"hljs-keyword\">return</span> temp;\n}</code></pre>\n<h3 id=\"38-一只青蛙一次可以跳上1级台阶，也可以跳上2级它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。\">38. 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</h3>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jumpFloorII</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">number</span></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">number</span> - <span class=\"hljs-number\">1</span>);\n}</code></pre>\n<h3 id=\"39-输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\">39. 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</h3>\n<pre><code class=\"language-javascript\">作者：faremax\n链接：https:<span class=\"hljs-comment\">//www.nowcoder.com/discuss/49349</span>\n来源：牛客网\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">NumberOf1</span><span class=\"hljs-params\">(n)</span></span>{\n    <span class=\"hljs-keyword\">if</span>(n &lt; <span class=\"hljs-number\">0</span>){\n        n = n &gt;&gt;&gt; <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">var</span> arr = n.toString(<span class=\"hljs-number\">2</span>).split(<span class=\"hljs-string\">''</span>);\n    <span class=\"hljs-keyword\">return</span> arr.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a,b)</span></span>{\n        <span class=\"hljs-keyword\">return</span> b === <span class=\"hljs-string\">\"1\"</span> ? a + <span class=\"hljs-number\">1</span> : a;\n    },<span class=\"hljs-number\">0</span>);\n}</code></pre>\n<h3 id=\"40-输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。\">40. 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</h3>\n<pre><code class=\"language-javascript\">作者：faremax\n链接：https:<span class=\"hljs-comment\">//www.nowcoder.com/discuss/49349</span>\n来源：牛客网\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reOrderArray</span><span class=\"hljs-params\">(array)</span></span>{\n    <span class=\"hljs-keyword\">var</span> result = [];\n    <span class=\"hljs-keyword\">var</span> even = [];\n    <span class=\"hljs-keyword\">array</span>.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(item)</span></span>{\n        <span class=\"hljs-keyword\">if</span>((item &amp; <span class=\"hljs-number\">1</span>) === <span class=\"hljs-number\">1</span>){\n            result.push(item);\n        } <span class=\"hljs-keyword\">else</span> {\n            even.push(item);\n        }\n    });\n    <span class=\"hljs-keyword\">return</span> result.concat(even);\n}</code></pre>\n<h3 id=\"41\">41.</h3>\n<pre><code class=\"language-javascript\">ar a = {};\n<span class=\"hljs-keyword\">var</span> b = {<span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'b'</span>};\n<span class=\"hljs-keyword\">var</span> c = {<span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">'c'</span>};\na[b] = <span class=\"hljs-number\">123</span>, a[c] = <span class=\"hljs-number\">456</span>;\n<span class=\"hljs-built_in\">console</span>.log(a[b]); <span class=\"hljs-comment\">// 456</span></code></pre>\n<h3 id=\"42\">42.</h3>\n<pre><code class=\"language-javascript\">(<span class=\"hljs-name\">function</span>(<span class=\"hljs-name\">x</span>){\n    return (<span class=\"hljs-name\">function</span>(<span class=\"hljs-name\">y</span>){\n        console.log(<span class=\"hljs-name\">x</span>)<span class=\"hljs-comment\">;</span>\n    })(<span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">;</span>\n})(<span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">1</span></code></pre>\n<h3 id=\"43\">43.</h3>\n<pre><code class=\"language-javascript\">for(<span class=\"hljs-name\">var</span> i=0<span class=\"hljs-comment\">;i&lt;5;i++){</span>\n    setTimeout((<span class=\"hljs-name\">function</span>(<span class=\"hljs-name\">i</span>){console.log(<span class=\"hljs-name\">i</span>)})(<span class=\"hljs-name\">i</span>),i*1000)<span class=\"hljs-comment\">;</span>\n}\n// <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span></code></pre>\n<h3 id=\"文章：\">文章：</h3>\n<ol>\n<li><a href=\"http://yujiangshui.com/javascript-prototype-and-create-object/\">JavaScript 原型理解与创建对象应用</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">闭包 | MDN</a></li>\n<li><a href=\"http://yanhaijing.com/es5/\">ECMAScript5.1中文版</a></li>\n<li><a href=\"http://www.jianshu.com/p/cd3fee40ef59\">前端基础进阶系列</a></li>\n</ol>\n","title":"JavaScript 笔记","tags":["javascript"],"slug":"javascript-note","createDate":1504627200000,"id":"javascript-note","thumb":"https://images.unsplash.com/photo-1580737387267-7a8a976c8e1c?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>先上博客地址：<a href=\"https://www.xiao555.com.cn/\">https://www.xiao555.com.cn/</a></p>\n<p>Github： <a href=\"https://github.com/xiao555/blog\">https://github.com/xiao555/blog</a></p>\n<p>很多人都想有一个自己的博客，很多人也都有自己的博客，现在网上也有很多流行的静态博客生成器，比如 Hexo啦，Jekyll啦，我的第一个博客也是用Hexo生成的，部署在Github Pages，还有VPS上。 但是又不满足于此，想要打造一个包含后端和数据库的完整的博客系统，而且可以让我从前端接触到后端，接触到服务器运维，数据库操作等方方面面，于是这个项目就诞生啦。</p>\n<p>这个是我准备找实习练手vue的项目，不过大部分都是在通过腾讯实习后完成的。断断续续开发了这么长时间，也希望写一篇文章记录一下心得和体会。</p>\n<p>本文将按照开发顺序，从后端到前端，从部署到优化，讲述一下这个博客系统的出生到落地。</p>\n","content":"<p>先上博客地址：<a href=\"https://www.xiao555.com.cn/\">https://www.xiao555.com.cn/</a></p>\n<p>Github： <a href=\"https://github.com/xiao555/blog\">https://github.com/xiao555/blog</a></p>\n<p>很多人都想有一个自己的博客，很多人也都有自己的博客，现在网上也有很多流行的静态博客生成器，比如 Hexo啦，Jekyll啦，我的第一个博客也是用Hexo生成的，部署在Github Pages，还有VPS上。 但是又不满足于此，想要打造一个包含后端和数据库的完整的博客系统，而且可以让我从前端接触到后端，接触到服务器运维，数据库操作等方方面面，于是这个项目就诞生啦。</p>\n<p>这个是我准备找实习练手vue的项目，不过大部分都是在通过腾讯实习后完成的。断断续续开发了这么长时间，也希望写一篇文章记录一下心得和体会。</p>\n<p>本文将按照开发顺序，从后端到前端，从部署到优化，讲述一下这个博客系统的出生到落地。</p>\n<h2 id=\"后端篇\">后端篇</h2>\n<p>既然是前后端分离，那么后端的基本功能我们也就大体清楚：提供API接口供前端进行数据的增删改查。</p>\n<p>那为什么要选择Koa作为后端框架呢？ 因为作为前端er的我首选就是Node.js的，express 之前用过了， 这次要体验一个不一样的，所有就选择Koa2，而且Koa 也是express 原班人马打造的第二代框架:</p>\n<blockquote>\n<p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>\n</blockquote>\n<p>实现过程中也会发现，Koa 确实如官网所说的简洁优雅，写起来得心应手，而Koa最有意思的当属他的中间件机制吧，就像这个洋葱图, 一层层进去，又一层层出来：</p>\n<p><img src=\"https://xiao555.netlify.com/img\" alt=\"img\"></p>\n<p>如果你愿意一层一层一层的进入我的心，我就把你一层一层一层地请出去~~ <a href=\"https://eggjs.org/zh-cn/intro/egg-and-koa.html#middleware\">相关文档</a>，这里就不多说了。</p>\n<p>有了后端框架，我们还需要一个数据库保存我们的数据，这里我选择了MongoDB，简单方便，没有关系型数据库那么多道道，而且数据存储格式是BOSN(Binary JSON)，我们可以当做JSON来操作。</p>\n<h3 id=\"目录结构\">目录结构</h3>\n<p><img src=\"https://xiao555.netlify.com/menu\" alt=\"menu\"></p>\n<p>打算用ES6来开发，所以配置了Babel：</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// entry.js</span>\n<span class=\"hljs-selector-tag\">require</span>(<span class=\"hljs-string\">\"babel-register\"</span>)({\n  <span class=\"hljs-attribute\">presets</span>: [\n    <span class=\"hljs-string\">\"es2015\"</span>,\n    <span class=\"hljs-string\">\"stage-0\"</span>\n  ],\n  <span class=\"hljs-attribute\">plugins</span>: [<span class=\"hljs-string\">\"transform-runtime\"</span>]\n});\n<span class=\"hljs-selector-tag\">require</span>(<span class=\"hljs-string\">\"babel-polyfill\"</span>)\n\n<span class=\"hljs-selector-tag\">require</span>(<span class=\"hljs-string\">'./app'</span>)</code></pre>\n<p>由入口文件进入了app.js</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// app.js</span>\n<span class=\"hljs-meta\">'use strict'</span>;\n<span class=\"hljs-keyword\">import</span> Koa <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa'</span>\n<span class=\"hljs-keyword\">import</span> log <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./utils/log'</span>\n<span class=\"hljs-keyword\">import</span> middleware <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./middleware'</span>\n<span class=\"hljs-keyword\">import</span> { connectDatabase } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./db/mongodb'</span>\n<span class=\"hljs-keyword\">import</span> api <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./api'</span>\n<span class=\"hljs-keyword\">import</span> config <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./config'</span>\n<span class=\"hljs-keyword\">const</span> port = config.port\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa()\n\napp.use(<span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; { <span class=\"hljs-comment\">// 洋葱的外皮，利用中间件机制巧妙的计算 每次请求的响应时间</span>\n  <span class=\"hljs-keyword\">const</span> start = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();\n  <span class=\"hljs-keyword\">await</span> next();\n  <span class=\"hljs-keyword\">const</span> ms = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() - start;\n  log.info(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${ctx.method}</span> <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">decodeURIComponent</span>(ctx.url)}</span> <span class=\"hljs-subst\">${ctx.status}</span> - <span class=\"hljs-subst\">${ms}</span>ms`</span>);\n});\napp.use(middleware()) <span class=\"hljs-comment\">// 加载中间件</span>\napp.use(api())  <span class=\"hljs-comment\">// Koa-router 配置的路由</span>\napp.use(<span class=\"hljs-function\"><span class=\"hljs-params\">ctx</span> =&gt;</span> ctx.status = <span class=\"hljs-number\">404</span>) <span class=\"hljs-comment\">// 默认返回 404</span>\n\n;<span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-keyword\">async</span> (</span>) =&gt;</span> { <span class=\"hljs-comment\">// 还可以愉快的用async await实现异步</span>\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">await</span> connectDatabase(config.mongoDB) <span class=\"hljs-comment\">// 连接数据库</span>\n    log.info(<span class=\"hljs-string\">`Connected to <span class=\"hljs-subst\">${db.host}</span>:<span class=\"hljs-subst\">${db.port}</span>/<span class=\"hljs-subst\">${db.name}</span>`</span>)\n    <span class=\"hljs-keyword\">await</span> app.listen(port, () =&gt; log.info(<span class=\"hljs-string\">`Server started on port <span class=\"hljs-subst\">${port}</span>`</span>)) <span class=\"hljs-comment\">// 开启服务，监听端口</span>\n  } <span class=\"hljs-keyword\">catch</span>(e) {\n    log.error(e);\n  }\n})()\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> app</code></pre>\n<p>感觉Koa写起来十分简洁优雅哈哈，不过是大部分逻辑都抽离出来放在其他文件里了，这里面主要是Log，Middleware, DB, Router, 我们一个一个来解刨。</p>\n<h3 id=\"log\">Log</h3>\n<p>这里选择的是 <a href=\"https://github.com/nomiddlename/log4js-node\">log4js</a> 作为日志管理以及debug工具, 实现起来十分方便：</p>\n<pre><code class=\"language-js\">// utils/<span class=\"hljs-keyword\">log</span>.js\n<span class=\"hljs-keyword\">import</span> log4js <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'log4js'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">path</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'path'</span>\nconst env = process.env.NODE_ENV\n<span class=\"hljs-keyword\">if</span>(env == <span class=\"hljs-string\">'production'</span>) { // 生产环境下日志输出到文件中\n  log4js.configure({\n    appenders: [\n      { <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'file'</span>, filename: <span class=\"hljs-type\">path</span>.<span class=\"hljs-keyword\">join</span>(__dirname,<span class=\"hljs-string\">'..'</span>, <span class=\"hljs-string\">'log/cheese.log'</span>)}\n    ]\n  });\n}\n\nlet <span class=\"hljs-keyword\">log</span> = log4js.getLogger(<span class=\"hljs-string\">'TYPE'</span>)\nexport <span class=\"hljs-keyword\">default</span> log4js.getLogger(<span class=\"hljs-string\">'Blog'</span>)\n// 下面这一串是打印输出格式的例子\n<span class=\"hljs-keyword\">log</span>.<span class=\"hljs-keyword\">debug</span>(\"LOG TYPE:\")\n<span class=\"hljs-keyword\">log</span>.<span class=\"hljs-keyword\">debug</span>(<span class=\"hljs-string\">'DEBUG'</span>)\n<span class=\"hljs-keyword\">log</span>.<span class=\"hljs-keyword\">info</span>(<span class=\"hljs-string\">'INFO'</span>)\n<span class=\"hljs-keyword\">log</span>.warn(<span class=\"hljs-string\">'WARN'</span>)\n<span class=\"hljs-keyword\">log</span>.error(<span class=\"hljs-string\">'ERROR'</span>)\n<span class=\"hljs-keyword\">log</span>.fatal(<span class=\"hljs-string\">'FATAL'</span>)</code></pre>\n<p>效果如下：</p>\n<p><img src=\"https://xiao555.netlify.com/log4js\" alt=\"log4js\"></p>\n<h3 id=\"middleware\">Middleware</h3>\n<p>Koa 只提供基本的框架，很多功能需要以中间件的形式加进来，这也是他比较轻量化的原因之一。</p>\n<p>多个中间件可以用koa-compose组合一下，有的1.0的中间件需要用koa-convert转换成promise Middleware。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// middleware/index.js</span>\n<span class=\"hljs-keyword\">import</span> compose <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa-compose'</span>;\n<span class=\"hljs-keyword\">import</span> convert <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa-convert'</span>;\n<span class=\"hljs-keyword\">import</span> helmet <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa-helmet'</span>;\n<span class=\"hljs-keyword\">import</span> cors <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa-cors'</span>;\n<span class=\"hljs-keyword\">import</span> bodyParser <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa-bodyparser'</span>;\n<span class=\"hljs-keyword\">import</span> session <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa-generic-session'</span>;\n<span class=\"hljs-keyword\">const</span> RedisStore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'koa-redis'</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">middleware</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> compose([\n    helmet(), <span class=\"hljs-comment\">// 提供安全的header</span>\n    convert(cors()), <span class=\"hljs-comment\">// 跨域 配置 Access-Control-Allow-Origin CORS header.</span>\n    convert(bodyParser()), <span class=\"hljs-comment\">// 解析 body，存储在 ctx.request.body 里</span>\n    convert(session({ <span class=\"hljs-comment\">// session</span>\n      <span class=\"hljs-attr\">store</span>: <span class=\"hljs-keyword\">new</span> RedisStore()\n    })),\n  ]);\n}</code></pre>\n<h3 id=\"database\">DataBase</h3>\n<p>对于MongoDB作为数据库的后端一般用Mongoose开发，数据库的连接：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// db/mongodb.js</span>\n<span class=\"hljs-keyword\">import</span> mongoose <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'mongoose'</span>\n<span class=\"hljs-keyword\">import</span> log <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../utils/log'</span>\nmongoose.Promise = global.Promise; <span class=\"hljs-comment\">// 内置的promise已经弃用了，需要用自己的promise库，这里选择用原生的ES6 Promise</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">connectDatabase</span>(<span class=\"hljs-params\">uri</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    mongoose.connection\n      .on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> reject(error))\n      .on(<span class=\"hljs-string\">'close'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> log.warn(<span class=\"hljs-string\">'Database connection closed.'</span>))\n      .once(<span class=\"hljs-string\">'open'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> resolve(mongoose.connections[<span class=\"hljs-number\">0</span>]))\n\n    mongoose.connect(uri)\n  })\n}</code></pre>\n<p>Models的创建(以Category为例)：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// models/category.js</span>\n<span class=\"hljs-keyword\">import</span> mongoose <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'mongoose'</span>\n<span class=\"hljs-keyword\">const</span> categorySchema = <span class=\"hljs-keyword\">new</span> mongoose.Schema({\n  name: <span class=\"hljs-built_in\">String</span>,\n  <span class=\"hljs-built_in\">number</span>: {\n    <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n    <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-number\">0</span>\n  }\n}, {\n  versionKey: <span class=\"hljs-literal\">false</span>\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> mongoose.model(<span class=\"hljs-string\">'category'</span>, categorySchema)</code></pre>\n<h3 id=\"router\">Router</h3>\n<p>最初的models是有四个，article，category，tag，user。为了避免一个一个去配置路由逻辑，所以通过importDir获取Models的集合，文件名就是key，通过generateRouter给每个model加上增删改查的路由，并对应generateAction里的不同的action，对于个别的请求需要加上权限验证。除此之外增加了两个路由，登录后台的<code>/admin/login</code>和统计文章浏览数的<code>/view/blog</code>。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// api/index.js</span>\n<span class=\"hljs-keyword\">import</span> compose <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa-compose'</span>\n<span class=\"hljs-keyword\">import</span> Router <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'koa-router'</span>\n<span class=\"hljs-keyword\">import</span> importDir <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'import-dir'</span>\n<span class=\"hljs-keyword\">import</span> generateRouter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./router'</span>\n<span class=\"hljs-keyword\">import</span> generateAction <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./actions'</span>\n<span class=\"hljs-keyword\">import</span> Admin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./admin'</span>\n<span class=\"hljs-keyword\">import</span> Article <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../models/article.js'</span>\n<span class=\"hljs-keyword\">import</span> log <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../utils/log'</span>\n\n<span class=\"hljs-keyword\">const</span> prefix = <span class=\"hljs-string\">'/api'</span>\n<span class=\"hljs-keyword\">const</span> models = importDir(<span class=\"hljs-string\">'../models'</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> Router({ prefix }) <span class=\"hljs-comment\">// url前缀</span>\n  <span class=\"hljs-built_in\">Object</span>.keys(models).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> generateRouter(key, router, Admin.permission, generateAction(models[key])));\n  router\n    .post(<span class=\"hljs-string\">'/admin/login'</span>, Admin.login)\n    .post(<span class=\"hljs-string\">'/view/blog'</span>, <span class=\"hljs-keyword\">async</span> ctx =&gt; {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> blog = <span class=\"hljs-keyword\">await</span> Article.find(ctx.request.query)\n        <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> Article.findByIdAndUpdate(blog[<span class=\"hljs-number\">0</span>].id, {visits: ++blog[<span class=\"hljs-number\">0</span>].visits}, {<span class=\"hljs-keyword\">new</span>: <span class=\"hljs-literal\">true</span>})\n        <span class=\"hljs-keyword\">if</span> (result) <span class=\"hljs-keyword\">return</span> ctx.status = <span class=\"hljs-number\">200</span>\n      } <span class=\"hljs-keyword\">catch</span> (e) {\n        log.error(e)\n      }\n    })\n  <span class=\"hljs-keyword\">return</span> compose([\n    router.routes(),\n    router.allowedMethods()\n  ])\n}\n</code></pre>\n<p>RESTful  API：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// api/router.js (generateRouter)</span>\nexport default (<span class=\"hljs-keyword\">model</span>, router, permission, actions) =&gt; {\n  router\n    .get(<span class=\"hljs-string\">'/'</span>+ <span class=\"hljs-keyword\">model</span> + <span class=\"hljs-string\">'s'</span>, actions.find)\n    .post(<span class=\"hljs-string\">'/'</span>+ <span class=\"hljs-keyword\">model</span> + <span class=\"hljs-string\">'s'</span>, permission, actions.create)\n    .get(<span class=\"hljs-string\">'/'</span>+ <span class=\"hljs-keyword\">model</span> + <span class=\"hljs-string\">'s/:id'</span>, actions.findById)\n    .<span class=\"hljs-keyword\">put</span>(<span class=\"hljs-string\">'/'</span>+ <span class=\"hljs-keyword\">model</span> + <span class=\"hljs-string\">'s/:id'</span>, permission, actions.updateById)\n    .delete(<span class=\"hljs-string\">'/'</span>+ <span class=\"hljs-keyword\">model</span> + <span class=\"hljs-string\">'s/:id'</span>, permission, actions.deleteById)\n}</code></pre>\n<h3 id=\"config\">Config</h3>\n<p>之所以把user去掉了，是因为想了下这个blog就自己在用，不会有好几个用户的情况，所以直接把用户名密码保存在config里了。除了用户名密码，config里还有mongoDB的地址，redis的地址，服务器运行端口，鉴权秘钥，token过期时间这些配置。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">export</span> <span class=\"hljs-selector-tag\">default</span> {\n  <span class=\"hljs-attribute\">admin</span>: {\n    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'test'</span>,\n    <span class=\"hljs-attribute\">passwd</span>: <span class=\"hljs-string\">'test'</span>\n  },\n  <span class=\"hljs-attribute\">mongoDB</span>: <span class=\"hljs-string\">'mongodb://localhost/blog'</span>,\n  <span class=\"hljs-attribute\">redis</span>: {\n    <span class=\"hljs-attribute\">host</span>: <span class=\"hljs-string\">'127.0.0.1'</span>,\n    <span class=\"hljs-attribute\">port</span>: <span class=\"hljs-number\">6379</span>\n  },\n  <span class=\"hljs-attribute\">port</span>: process.env.PORT || <span class=\"hljs-number\">3000</span>,\n  <span class=\"hljs-attribute\">authSecret</span>: <span class=\"hljs-string\">'blogAuth'</span>,\n  <span class=\"hljs-attribute\">expiresIn</span>: <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>, <span class=\"hljs-comment\">// token 1h</span>\n}</code></pre>\n<h3 id=\"auth\">Auth</h3>\n<p>再来说说权限验证，这里我用的是redis + JWT 的方式。用户在登录成功的时候，后台会生成一个token，用redis保存1h。并且这个token会返回给浏览器端，浏览器端保存在localStorage里，并且当localStorage存在token时，每次请求都会作为header的一个字段带上它，供后端验证。</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// api/admin.js  (permission 权限验证)</span>\n<span class=\"hljs-keyword\">const</span> token = ctx.request.headers[<span class=\"hljs-string\">'authorization'</span>] || <span class=\"hljs-literal\">null</span>\n<span class=\"hljs-keyword\">if</span> (!token) <span class=\"hljs-keyword\">return</span> ctx.body = {\n  status: <span class=\"hljs-string\">'fail'</span>,\n  message: <span class=\"hljs-string\">'Token not found'</span>\n}\n<span class=\"hljs-keyword\">const</span> result = Token.verifyToken(token)\n\n<span class=\"hljs-keyword\">if</span> (!result) <span class=\"hljs-keyword\">return</span> ctx.body = {\n  status: <span class=\"hljs-string\">'fail'</span>,\n  message: <span class=\"hljs-string\">'Token verify failed'</span>\n}\n\n<span class=\"hljs-keyword\">const</span> reply = await redis.getAsync(token)\n\n<span class=\"hljs-keyword\">if</span> (!reply) <span class=\"hljs-keyword\">return</span> ctx.body = {\n  status: <span class=\"hljs-string\">'fail'</span>,\n  message: <span class=\"hljs-string\">'Token invalid'</span>\n}\n\n<span class=\"hljs-keyword\">return</span> next()</code></pre>\n<h3 id=\"test\">Test</h3>\n<p>在写完api路由的时候用Mocha + Chai做了一下单元测试，用模拟数据测试增删改查功能，下面例子是上传文章的api测试：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// test/api/routes/articles.js</span>\nit(<span class=\"hljs-string\">'should create article'</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> request.post(<span class=\"hljs-string\">'/api/articles'</span>)\n    .send(article)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect(<span class=\"hljs-string\">'Content-Type'</span>, /json/)\n\n  <span class=\"hljs-built_in\">Object</span>.keys(res.body).should.have.length(<span class=\"hljs-number\">11</span>);\n  res.body.should.have.property(<span class=\"hljs-string\">'_id'</span>);\n  res.body.title.should.equal(article.title);\n  res.body.content.should.equal(article.content);\n  res.body.status.should.equal(<span class=\"hljs-keyword\">true</span>);\n});</code></pre>\n<h3 id=\"总结\">总结</h3>\n<p>作为一个前后端分离的blog的后端，做好增啥改查，权限验证就好，用Koa实现起来并不难，不过当时写的时候也是看了很多资料，毕竟从零开始，学习别人代码的过程也让我受益匪浅，代码规范性有很大提高，比如下面这个就用了try-catch进行错误处理。</p>\n<p>整个后端比较复杂的地方就是对api每个请求的处理了，算是业务逻辑吧（api/actions.js）：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// api/actions.js (create)</span>\ncreate: async<span class=\"hljs-function\"> <span class=\"hljs-params\">ctx</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">try</span> {\n    const body = ctx.request.body <span class=\"hljs-comment\">// 获取数据</span>\n    <span class=\"hljs-keyword\">if</span> (model.modelName<span class=\"hljs-operator\"> === </span>'article') { <span class=\"hljs-comment\">// 如果是article的话进行这些操作</span>\n      markdown<span class=\"hljs-constructor\">Parse(<span class=\"hljs-params\">body</span>)</span>; <span class=\"hljs-comment\">// markdown 语法解析</span>\n      !!body.tags<span class=\"hljs-operator\"> &amp;&amp; </span>await save<span class=\"hljs-constructor\">Tags(<span class=\"hljs-params\">body</span>.<span class=\"hljs-params\">tags</span>)</span>\n      !!body.category<span class=\"hljs-operator\"> &amp;&amp; </span>await save<span class=\"hljs-constructor\">Category(<span class=\"hljs-params\">body</span>.<span class=\"hljs-params\">category</span>)</span>\n    }\n    ctx.body = await model.create(body) <span class=\"hljs-comment\">// Mongoose create</span>\n  } catch(e) {\n    <span class=\"hljs-comment\">// statements</span>\n    log.error(e)\n  }\n},</code></pre>\n<p>下一篇讲一下前端部分，用vue2写的服务端渲染(SSR)单页应用(SPA).</p>\n","title":"基于Vue2 + Koa2搭建前后端分离的博客系统","tags":["blog","vue","koa"],"slug":"based-on-vue2-%2B-koa2-to-build-a-separate-front-end-and-back-end-blog-system","createDate":1501171200000,"id":"based-on-vue2-%2B-koa2-to-build-a-separate-front-end-and-back-end-blog-system","thumb":"https://images.unsplash.com/photo-1581670819508-2a3a1e736774?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>这是一个vue的练手项目，也是koa的练手项目。\n这是一个js写的完整的博客系统。\n这是一个前后端分离 + 服务端渲染的博客系统。\n这是一个前端 SPA + 后端 RESTful API 的博客系统。\n这是一个为了找实习做的个人作品，虽然是在找完实习后完成的。\n这是我以后的试验田，也是个人分享的平台。\n当然还有很多不足，今后会逐渐完善。</p>\n","content":"<p>这是一个vue的练手项目，也是koa的练手项目。\n这是一个js写的完整的博客系统。\n这是一个前后端分离 + 服务端渲染的博客系统。\n这是一个前端 SPA + 后端 RESTful API 的博客系统。\n这是一个为了找实习做的个人作品，虽然是在找完实习后完成的。\n这是我以后的试验田，也是个人分享的平台。\n当然还有很多不足，今后会逐渐完善。</p>\n<h3 id=\"开发环境\">开发环境</h3>\n<ul>\n<li>MacOS + iTerm2 + Sublime（前期） + Atom（后期）</li>\n<li>Node v7.7.0 + MongoDB + Redis</li>\n<li>Docker</li>\n</ul>\n<h3 id=\"技术栈\">技术栈</h3>\n<h5 id=\"后端：\">后端：</h5>\n<ul>\n<li>服务器 Koa2</li>\n<li>路由 Koa-Router</li>\n<li>数据库 MongoDB + Mongoose</li>\n<li>权限验证 Redis + JWT</li>\n<li>日志 log4js</li>\n<li>测试 mocha + chai</li>\n</ul>\n<h5 id=\"前端：\">前端：</h5>\n<ul>\n<li>单页应用 Vue2</li>\n<li>状态管理 Vuex</li>\n<li>前端路由 Vue-Router</li>\n<li>服务端渲染 Express</li>\n<li>Markdown生成目录 + 渲染 marked + uslug + highlight.js</li>\n<li>通信库 axios</li>\n<li>缓存 lru-cache</li>\n</ul>\n<h5 id=\"服务器端：\">服务器端：</h5>\n<ul>\n<li>腾讯云 Ubuntu 16.04</li>\n<li>守护进程 pm2</li>\n<li>反向代理 Nginx</li>\n<li>ssl证书 acme-tiny自动化脚本</li>\n<li>Docker</li>\n</ul>\n<h5 id=\"cdn：\">CDN：</h5>\n<ul>\n<li>netlify（免费 + 支持https + 支持 github repo导入）</li>\n</ul>\n<h3 id=\"usage\">Usage</h3>\n<p>最近除了Nginx，Node.js, MongoDB, Redis三部分都上了Docker，要用docker运行的话需要配好docker环境了, 将<code>blog</code>目录复制到<code>docker/node</code>目录下在<code>docker</code>目录运行</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-symbol\">docker</span>-compose <span class=\"hljs-keyword\">build\n</span><span class=\"hljs-symbol\">docker</span>-compose up</code></pre>\n<p>访问yourdomain:5050 就可以看到博客前端页面了，再按照下面步骤配置Nginx即可，省去了很多步骤。不过<code>build</code>的时间可能有十几分钟（有docker加速器），所以<code>build</code>的时候可以去喝杯茶，聊聊天~~</p>\n<p>不想用docker的话，只需要切换到<code>blog</code>目录，按照下面步骤一步一步走即可。</p>\n<h4 id=\"安装-node\">安装 Node</h4>\n<p>推荐使用 <a href=\"https://github.com/creationix/nvm\">NVM</a> 管理Node版本，我的开发版本是 v7.7.0</p>\n<h4 id=\"安装-mongodb\">安装 MongoDB</h4>\n<ul>\n<li><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\">Ubuntu上安装</a></li>\n<li><a href=\"http://www.linuxdiyf.com/linux/26151.html\">国内推荐阿里云镜像安装</a></li>\n<li><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\">Mac上安装</a></li>\n</ul>\n<p>貌似Ubuntu上有些坑，比如用官网的教程安装巨慢，可能被墙了，推荐阿里云镜像，后面写一篇记录一下吧。\n朋友说apt-get默认是腾讯的源，速度很快，我没默认装过...</p>\n<h4 id=\"安装-redis\">安装 Redis</h4>\n<ul>\n<li><a href=\"http://blog.fens.me/linux-redis-install/\">Ubuntu</a></li>\n<li><a href=\"http://blog.csdn.net/pingpangbing0902/article/details/47104545\">Mac</a></li>\n</ul>\n<p>还是Homebrew方便啊，网上找的一个教程，应该没问题</p>\n<h4 id=\"安装-pm2\">安装 pm2</h4>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">npm</span> i -g pm2</code></pre>\n<p>用法: <a href=\"https://github.com/Unitech/pm2#commands-overview\">github</a></p>\n<h4 id=\"安装依赖\">安装依赖</h4>\n<p>在<code>client</code> 和 <code>server</code> 目录下分别运行</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-built_in\">npm</span> i</code></pre>\n<h4 id=\"运行服务端\">运行服务端</h4>\n<h5 id=\"配置\">配置</h5>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// config/index.js</span>\n<span class=\"hljs-selector-tag\">export</span> <span class=\"hljs-selector-tag\">default</span> {\n  <span class=\"hljs-attribute\">admin</span>: { <span class=\"hljs-comment\">// 管理后台用户名，密码</span>\n    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'yourname'</span>,\n    <span class=\"hljs-attribute\">passwd</span>: <span class=\"hljs-string\">'yourpassword'</span>\n  },\n  <span class=\"hljs-attribute\">mongoDB</span>: <span class=\"hljs-string\">'mongodb://localhost/blog'</span>, <span class=\"hljs-comment\">// mongoDB数据库连接uri</span>\n  <span class=\"hljs-attribute\">redis</span>: { <span class=\"hljs-comment\">// Redis</span>\n    <span class=\"hljs-attribute\">host</span>: <span class=\"hljs-string\">'127.0.0.1'</span>,\n    <span class=\"hljs-attribute\">port</span>: <span class=\"hljs-number\">6379</span>\n  },\n  <span class=\"hljs-attribute\">port</span>: process.env.PORT || <span class=\"hljs-number\">3000</span>, <span class=\"hljs-comment\">// 服务器运行端口</span>\n  <span class=\"hljs-attribute\">authSecret</span>: <span class=\"hljs-string\">'blogAuth'</span>, <span class=\"hljs-comment\">// 验证密钥</span>\n  <span class=\"hljs-attribute\">expiresIn</span>: <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>, <span class=\"hljs-comment\">// JWT token 保存时间 1h</span>\n}</code></pre>\n<h5 id=\"运行\">运行</h5>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> start</span>\n\n// pm2\nnpm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> pm</span></code></pre>\n<h5 id=\"说明\">说明</h5>\n<ul>\n<li>增加了pm script：<code>&quot;NODE_ENV=production pm2 start entry.js --name=&#39;blogServer&#39;&quot;</code>, 方便部署</li>\n<li>JWT 的token expiresIn 代表在redis中的存储时间，在有效期内可以通过admin后台进行各种操作，过期了需要重新登录生成token</li>\n<li>API访问时统一加前缀api，比如查看公开文章<a href=\"https://www.xiao555.com.cn/api/articles?status=Published\">https://www.xiao555.com.cn/api/articles?status=Published</a></li>\n<li>生产环境下log输出到<code>log/cheese.log</code>，格式如下：<pre><code class=\"language-javascript\">[<span class=\"hljs-number\">2017</span><span class=\"hljs-number\">-06</span><span class=\"hljs-number\">-09</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">50.579</span>] [INFO] Blog - Redis <span class=\"hljs-keyword\">is</span> ready\n[<span class=\"hljs-number\">2017</span><span class=\"hljs-number\">-06</span><span class=\"hljs-number\">-09</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">50.602</span>] [INFO] Blog - Connected to localhost:<span class=\"hljs-number\">27017</span>/blog\n[<span class=\"hljs-number\">2017</span><span class=\"hljs-number\">-06</span><span class=\"hljs-number\">-09</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">50.605</span>] [INFO] Blog - Server started on port <span class=\"hljs-number\">3000</span>\n[<span class=\"hljs-number\">2017</span><span class=\"hljs-number\">-06</span><span class=\"hljs-number\">-09</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">22.140</span>] [INFO] Blog - GET /api/ <span class=\"hljs-number\">404</span> - <span class=\"hljs-number\">7</span>ms\n[<span class=\"hljs-number\">2017</span><span class=\"hljs-number\">-06</span><span class=\"hljs-number\">-09</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">29.507</span>] [INFO] Blog - GET /api/articles、 <span class=\"hljs-number\">404</span> - <span class=\"hljs-number\">2</span>ms\n[<span class=\"hljs-number\">2017</span><span class=\"hljs-number\">-06</span><span class=\"hljs-number\">-09</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">33.603</span>] [INFO] Blog - GET /api/articles/ <span class=\"hljs-number\">200</span> - <span class=\"hljs-number\">14</span>ms\n[<span class=\"hljs-number\">2017</span><span class=\"hljs-number\">-06</span><span class=\"hljs-number\">-09</span> <span class=\"hljs-number\">19</span>:<span class=\"hljs-number\">23</span>:<span class=\"hljs-number\">34.390</span>] [INFO] Blog - POST /api/admin/login <span class=\"hljs-number\">200</span> - <span class=\"hljs-number\">55</span>ms</code></pre>\n</li>\n</ul>\n<h4 id=\"运行客户端\">运行客户端</h4>\n<h5 id=\"配置-1\">配置</h5>\n<p>暂时硬编码上，后面放到数据库，通过admin后台来修改</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// config/index.js</span>\n<span class=\"hljs-selector-tag\">export</span> <span class=\"hljs-selector-tag\">default</span> {\n  <span class=\"hljs-attribute\">dev</span>: { <span class=\"hljs-comment\">// dev 环境下相关链接</span>\n    <span class=\"hljs-attribute\">api</span>: <span class=\"hljs-string\">'http://localhost:3000/api'</span>,\n    <span class=\"hljs-attribute\">siteInfo</span>: {\n      <span class=\"hljs-attribute\">siteUrl</span>: <span class=\"hljs-string\">'http://localhost:5050/'</span>,\n      <span class=\"hljs-attribute\">postUrl</span>: <span class=\"hljs-string\">'http://localhost:5050/posts/'</span>\n    }\n  },\n  <span class=\"hljs-attribute\">prod</span>: { <span class=\"hljs-comment\">// 生产环境下相关链接</span>\n    <span class=\"hljs-attribute\">api</span>: <span class=\"hljs-string\">'https://www.xiao555.com.cn/api'</span>,\n    <span class=\"hljs-attribute\">siteInfo</span>: {\n      <span class=\"hljs-attribute\">siteUrl</span>: <span class=\"hljs-string\">'https://www.xiao555.com.cn/'</span>,\n      <span class=\"hljs-attribute\">postUrl</span>: <span class=\"hljs-string\">'https://www.xiao555.com.cn/posts/'</span>\n    }\n  },\n  <span class=\"hljs-attribute\">links</span>: { <span class=\"hljs-comment\">// 各种链接</span>\n    <span class=\"hljs-attribute\">github</span>: <span class=\"hljs-string\">\"https://github.com/xiao555\"</span>,\n    <span class=\"hljs-attribute\">facebook</span>: <span class=\"hljs-string\">\"https://www.facebook.com/profile.php?id=100009127309661\"</span>,\n    <span class=\"hljs-attribute\">email</span>: <span class=\"hljs-string\">\"mailto: zhangruiwu32@gmail.com\"</span>,\n    <span class=\"hljs-attribute\">weibo</span>: <span class=\"hljs-string\">\"http://weibo.com/u/5315649743\"</span>,\n    <span class=\"hljs-attribute\">zhihu</span>: <span class=\"hljs-string\">\"https://www.zhihu.com/people/zhang-rui-wu-50\"</span>,\n    <span class=\"hljs-attribute\">rss</span>: <span class=\"hljs-string\">\"#\"</span>\n  },\n  <span class=\"hljs-attribute\">headerImg</span>: <span class=\"hljs-string\">\"https://xiao555.netlify.com/header.jpg\"</span>, <span class=\"hljs-comment\">// 头像</span>\n  <span class=\"hljs-attribute\">titleTemplate</span>: <span class=\"hljs-string\">\"%s | Xiao555's Blog\"</span>, <span class=\"hljs-comment\">// Vue-meta title 格式</span>\n}</code></pre>\n<h5 id=\"运行-1\">运行</h5>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\">// dev</span>\nnpm <span class=\"hljs-built_in\">run</span> dev\n\n<span class=\"hljs-comment\">// prod</span>\nnpm <span class=\"hljs-built_in\">run</span> build &amp;&amp; npm <span class=\"hljs-built_in\">run</span> start\n<span class=\"hljs-comment\">// pm</span>\nnpm <span class=\"hljs-built_in\">run</span> build &amp;&amp; npm <span class=\"hljs-built_in\">run</span> pm</code></pre>\n<h5 id=\"说明-1\">说明</h5>\n<ul>\n<li>增加了pm script：<code>&quot;NODE_ENV=production pm2 start server.js --name=&#39;blogClient&#39;&quot;</code>, 方便部署</li>\n<li>dev 模式下，自动打开浏览器，支持热重载，跑在本地<code>8008</code>端口</li>\n<li>prod 模式跑在本地<code>5050</code>端口</li>\n<li>css预处理器用<code>stylus</code>，webpack默认打包<code>/src/assets/css/variables.styl</code>, 里面配置一些全局变量</li>\n<li>加载其他字体文件请参考<code>variables.styl</code>里的<code>font-face(&#39;Meta&#39;, &#39;FFMetaPro-Normal&#39;, 400)</code>，字体文件放在<code>/src/assets/font/</code>目录</li>\n<li>admin管理后台通过<code>yoursite.com/admin</code>访问</li>\n<li>网站icon放在<code>public</code>目录下，通过<code>server.js</code>里的<code>app.use(favicon(&#39;./public/header.jpg&#39;))</code>引入。</li>\n</ul>\n<h4 id=\"配置服务器\">配置服务器</h4>\n<h5 id=\"nginx\">Nginx</h5>\n<p>安装时候记得要支持http2的，貌似现在直接安装的已经支持了？\n本站的nginx配置：</p>\n<pre><code><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">443</span> ssl http2 default_server;\n    <span class=\"hljs-attribute\">server_name</span> xiao555.com.cn www.xiao555.com.cn;\n\n    <span class=\"hljs-attribute\">ssl</span> <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">ssl_certificate</span> /root/ssl/chained.pem;\n    <span class=\"hljs-attribute\">ssl_certificate_key</span> /root/ssl/domain.key;\n    <span class=\"hljs-attribute\">ssl_session_timeout</span> <span class=\"hljs-number\">5m</span>;\n    <span class=\"hljs-attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"hljs-number\">1</span> TLSv1.<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-attribute\">ssl_ciphers</span> ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;\n    <span class=\"hljs-attribute\">ssl_session_cache</span> shared:SSL:<span class=\"hljs-number\">50m</span>;\n    <span class=\"hljs-attribute\">ssl_dhparam</span> /root/ssl/dhparams.pem;\n    <span class=\"hljs-attribute\">ssl_prefer_server_ciphers</span> <span class=\"hljs-literal\">on</span>;\n\n    <span class=\"hljs-attribute\">index</span> index.php index.html;\n    <span class=\"hljs-attribute\">location</span><span class=\"hljs-regexp\"> ^~</span> /api/ {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://localhost:3000;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Host <span class=\"hljs-variable\">$host</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP <span class=\"hljs-variable\">$remote_addr</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n        <span class=\"hljs-attribute\">proxy_redirect</span> <span class=\"hljs-literal\">off</span>;\n    }\n\n    <span class=\"hljs-attribute\">location</span><span class=\"hljs-regexp\"> ^~</span>  /.well-known/acme-challenge/ {\n        <span class=\"hljs-attribute\">alias</span> /var/www/challenges/;\n        <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> =<span class=\"hljs-number\">404</span>;\n    }\n\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://localhost:5050;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Host <span class=\"hljs-variable\">$host</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP <span class=\"hljs-variable\">$remote_addr</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n        <span class=\"hljs-attribute\">proxy_redirect</span> <span class=\"hljs-literal\">off</span>;\n    }\n}\n\n<span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> www.xiao555.com.cn xiao555.com.cn;\n\n    <span class=\"hljs-attribute\">location</span><span class=\"hljs-regexp\"> ^~</span> /.well-known/acme-challenge/ {\n        <span class=\"hljs-attribute\">alias</span> /var/www/challenges/;\n        <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> =<span class=\"hljs-number\">404</span>;\n    }\n}\n\n<span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> xiao555.com.cn www.xiao555.com.cn;\n    <span class=\"hljs-attribute\">index</span> index.php index.html;\n    <span class=\"hljs-attribute\">location</span><span class=\"hljs-regexp\"> ^~</span> / {\n        <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^(.*)$</span>  https://<span class=\"hljs-variable\">$host</span><span class=\"hljs-variable\">$request_uri</span>;\n    }\n}</code></pre><p><code>/usr/local/nginx/conf/nginx.conf</code>，里其他的配置都删掉了，但是不知道为什么访问80端口不会转发, 无奈只好index.html强制刷新网页，在80端口会访问到的html里加上<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=https://www.xiao555.com.cn/&quot;&gt;</code></p>\n<h5 id=\"获取-lets-encyrpt-证书\">获取 Let&#39;s Encyrpt 证书</h5>\n<p>这是一个免费的ssl证书，通过<a href=\"https://github.com/diafygi/acme-tiny\">acme-tiny</a>脚本自动化获取, 简单说一下步骤：</p>\n<ol>\n<li><p>创建帐号\n 首先创建一个目录用来放生成的各种东西，我是在<code>~/ssl</code>目录下。创建一个 RSA 私钥用于 Let&#39;s Encrypt 识别你的身份：</p>\n<pre><code> openssl genrsa <span class=\"hljs-number\">4096</span> &gt; account.<span class=\"hljs-type\">key</span></code></pre></li>\n<li><p>创建 CSR 文件\n生成 CSR（Certificate Signing Request，证书签名请求）文件：</p>\n<pre><code>openssl genrsa <span class=\"hljs-number\">4096</span> &gt; <span class=\"hljs-built_in\">domain</span>.<span class=\"hljs-built_in\">key</span>\nopenssl req -<span class=\"hljs-built_in\">new</span> -sha256 -<span class=\"hljs-built_in\">key</span> <span class=\"hljs-built_in\">domain</span>.<span class=\"hljs-built_in\">key</span> -subj <span class=\"hljs-string\">\"/CN=yoursite.com\"</span> &gt; <span class=\"hljs-built_in\">domain</span>.csr</code></pre></li>\n<li><p>配置验证服务\n 创建建用于存放验证文件的目录：</p>\n<pre><code> mkdir -p <span class=\"hljs-regexp\">/var/</span>www<span class=\"hljs-regexp\">/challenges/</span></code></pre><p> 配置服务器(Nginx为例)：</p>\n<pre><code> #example <span class=\"hljs-keyword\">for</span> nginx\n<span class=\"hljs-built_in\"> server </span>{\n     listen 80;\n     server_name yoursite.com www.yoursite.com;\n\n     location /.well-known/acme-challenge/ {\n         alias /var/www/challenges/;\n         try_files <span class=\"hljs-variable\">$uri</span> =404;\n     }\n\n     <span class=\"hljs-built_in\">..</span>.the rest of your<span class=\"hljs-built_in\"> config\n</span> }</code></pre><p> 也可以看我nginx的配置，主要就是访问<code>/.well-known/acme-challenge/</code>的时候能访问到<code>/var/www/challenges/</code>目录</p>\n</li>\n<li><p>获取网站证书\n 先下载 acme-tiny 脚本：</p>\n<pre><code> wget https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/diafygi/</span>acme-tiny<span class=\"hljs-regexp\">/master/</span>acme_tiny.py</code></pre><p> 指定账户私钥、CSR 以及验证目录，执行脚本：</p>\n<pre><code> python acme_tiny.py <span class=\"hljs-params\">--account-key</span> <span class=\"hljs-string\">./account.key</span> <span class=\"hljs-params\">--csr</span> <span class=\"hljs-string\">./domain.csr</span> <span class=\"hljs-params\">--acme-dir</span> <span class=\"hljs-string\">/var/www/challenges/</span> &gt; <span class=\"hljs-string\">./signed.crt</span></code></pre><p> 下载 Let&#39;s Encrypt 的中间证书：</p>\n<pre><code class=\"language-bash\"> wget -O - https:<span class=\"hljs-comment\">//letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span>\n\n   cat signed<span class=\"hljs-selector-class\">.crt</span> intermediate<span class=\"hljs-selector-class\">.pem</span> &gt; chained.pem</code></pre>\n</li>\n<li><p>Nginx 配置</p>\n<pre><code><span class=\"hljs-built_in\"> server </span>{\n     listen 443;\n     server_name yoursite.com, www.yoursite.com;\n\n     ssl on;\n     ssl_certificate /path/<span class=\"hljs-keyword\">to</span>/chained.pem;\n     ssl_certificate_key /path/<span class=\"hljs-keyword\">to</span>/domain.key;\n     ssl_session_timeout 5m;\n     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;\n     ssl_session_cache shared:SSL:50m;\n     # openssl dhparam -out dhparams.pem 2048\n     ssl_dhparam /path/<span class=\"hljs-keyword\">to</span>/dhparams.pem;\n     ssl_prefer_server_ciphers on;\n\n     <span class=\"hljs-built_in\">..</span>.the rest of your<span class=\"hljs-built_in\"> config\n</span> }\n\n<span class=\"hljs-built_in\"> server </span>{\n     listen 80;\n     server_name yoursite.com, www.yoursite.com;\n\n     location /.well-known/acme-challenge/ {\n         alias /var/www/challenges/;\n         try_files <span class=\"hljs-variable\">$uri</span> =404;\n     }\n\n     <span class=\"hljs-built_in\">..</span>.the rest of your<span class=\"hljs-built_in\"> config\n</span> }</code></pre><p> 那个dhparams.pem是增强安全性的，用<code>openssl dhparam -out dhparams.pem 2048</code>生成就可以</p>\n</li>\n<li><p>配置脚本自动更新\nLet&#39;s Encrypt 签发的证书只有 90 天有效期，所以创建一个脚本自动更新</p>\n<pre><code><span class=\"hljs-comment\"># renew_cert.sh</span>\ncd ~<span class=\"hljs-regexp\">/ssl/</span>\npython acme_tiny.py --account-key account.key --csr domain.csr --acme-dir <span class=\"hljs-regexp\">/var/</span>www<span class=\"hljs-regexp\">/challenges/</span> &gt; signed.crt || <span class=\"hljs-keyword\">exit</span>\nwget -O - https:<span class=\"hljs-regexp\">//</span>letsencrypt.org<span class=\"hljs-regexp\">/certs/</span>lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem\ncat signed.crt intermediate.pem &gt; chained.pem\nnginx -s reload</code></pre><p>通过 <code>chmod a+x renew_cert.sh</code> 赋予执行权限。\n<code>crontab -e</code>加入以下内容：</p>\n<pre><code><span class=\"hljs-symbol\">0 </span><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> * * ~/ssl/renew_cert.sh &gt;/dev/null <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span></code></pre><p>这样以后证书每个月都会自动更新</p>\n</li>\n</ol>\n<h3 id=\"更新日志\">更新日志</h3>\n<p>之前做的时候没有记录，所以说一下大体流程吧。\n这个项目是从服务端开始开发的，先是要搭建一个RESTful API的服务器，用Mocha + chai 测试功能。\n后端功能实现后，开始搞前端，一开始是用vue-cli搭的脚手架，而且admin跟client是分开相互独立的，先开发的admin，最后是client。\n开发过程中对<code>build</code>目录下的webpack配置文件修改了很多次，结合<code>vue-hackernews-2.0</code>加入了服务端渲染的功能，并去掉了dev开发模式的配置。\n随着前端功能的增多也在不断修改后端逻辑，最终形成了beta版本——<a href=\"https://github.com/xiao555/New-Blog/tree/c8b6e2d909f284d10a484272ac215043978900ed\">github</a>, 后面因为其他事情就没再搞。</p>\n<p>在考完java和算法之后，花了两三天才把之前的半成品完善了一下，改动如下：</p>\n<ul>\n<li>改为比较正常sidebar</li>\n<li>取消顶部导航菜单</li>\n<li>markdown渲染弃用vue-markdown，自己用marked + highlight.js + uslug 打造一个语法高亮，能自动生成toc的组件</li>\n<li>取消了category和tag页面，增加archive页面</li>\n<li>构建工具上切换回dev模式，毕竟还要边改边看效果</li>\n</ul>\n<h4 id=\"201767\">2017.6.7</h4>\n<ul>\n<li>实现Archive页面逻辑</li>\n<li>测试production环境下build &amp; start 失败，只有外部css，没有组件内css，原因是都用<code>extract-text-webpack-plugin</code> 单独打包到<code>style.css</code>，外部css把组件内的覆盖掉了，解决办法：查询文档，用<code>const extractCSS = new ExtractTextPlugin(&#39;css/[name].css&#39;);</code>来实现Multiple Instances。</li>\n<li>用<code>vue-meta</code>实现title的自动更新，同时服务端<code>server.js</code>也要进行相应的修改，优化SEO</li>\n</ul>\n<h4 id=\"201768\">2017.6.8</h4>\n<ul>\n<li>增加响应式布局</li>\n<li>服务器上跑了下，修复了部分依赖没有的问题</li>\n<li>发现admin和client分开的话，部署运行都要各跑一遍，太麻烦，于是admin合并到client，重构后的client由blog和admin组成，也算同构了一下</li>\n<li>每个过程都在不断的优化代码结构，明天把一些配置项整合出来，统一管理</li>\n</ul>\n<h4 id=\"2017612\">2017.6.12</h4>\n<p>这两天太浪了~</p>\n<ul>\n<li>增加文章阅读计数功能</li>\n<li>配置项统一在 <code>config/index.js</code> 里</li>\n<li>部署后发现https图标不是绿色的，以为我的免费Let&#39;s Encrypt 证书有问题...最后搞了半天发现是因为有http的图片外链，图片之前放在七牛上的，打算服务器上搞一波，再看看有没有什么好的支持https的CDN</li>\n<li>调试服务器过程中发现我的网页加载有点慢，主要是生成的<code>app.js</code>太大了，有1M多，后面可以优化一下，减少依赖库的使用，发现一个<code>highlight.js</code>就占了三四百K。</li>\n</ul>\n<p>所以后面主要任务是解决一下http外链的问题，优化一下性能。</p>\n<ul>\n<li>外链问题解决了，用的<a href=\"https://www.netlify.com/\">netlify</a>，可以直接导入github的repo，很方便，就是国外的有点慢</li>\n</ul>\n<h4 id=\"2017722\">2017.7.22</h4>\n<p>趁周末在公司做些自己的事23333\n之前分析了提高性能的一些方法，主要是减少打包生成的app.js的体积，这次更新前运行<code>npm run build</code>的结果是这样的：</p>\n<pre><code class=\"language-bash\">Total precache size <span class=\"hljs-keyword\">is</span> about <span class=\"hljs-number\">2.75</span> MB <span class=\"hljs-keyword\">for</span> <span class=\"hljs-number\">12</span> resources.\nHash: <span class=\"hljs-number\">8</span>a46e668ed80f8d7a493\nVersion: webpack <span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.1</span>\nTime: <span class=\"hljs-number\">32802</span>ms\n                                         Asset       Size  Chunks                    Chunk Names\n    static/fonts/FFMetaPro-Normal.ec7ccf1.woff    <span class=\"hljs-number\">71.7</span> kB          [emitted]\n    static/img/fontawesome-webfont<span class=\"hljs-number\">.912</span>ec66.svg     <span class=\"hljs-number\">444</span> kB          [emitted]  [big]\n  static/fonts/fontawesome-webfont.b06871f.ttf     <span class=\"hljs-number\">166</span> kB          [emitted]\nstatic/fonts/fontawesome-webfont.af7ae50.woff2    <span class=\"hljs-number\">77.2</span> kB          [emitted]\n static/fonts/fontawesome-webfont.fee66e7.woff      <span class=\"hljs-number\">98</span> kB          [emitted]\n       static/img/FFMetaPro-Normal<span class=\"hljs-number\">.5</span>d836bf.svg    <span class=\"hljs-number\">2.12</span> MB          [emitted]  [big]\n     static/fonts/FFMetaPro-Normal<span class=\"hljs-number\">.4</span>eebf0c.eot     <span class=\"hljs-number\">200</span> kB          [emitted]\n     static/fonts/FFMetaPro-Normal<span class=\"hljs-number\">.3767f</span>35.ttf     <span class=\"hljs-number\">199</span> kB          [emitted]\n  static/fonts/fontawesome-webfont<span class=\"hljs-number\">.674f</span>50d.eot     <span class=\"hljs-number\">166</span> kB          [emitted]\n                                        app.js    <span class=\"hljs-number\">1.27</span> MB       <span class=\"hljs-number\">0</span>  [emitted]  [big]  app\n                                     vendor.js  <span class=\"hljs-number\">810</span> bytes       <span class=\"hljs-number\">1</span>  [emitted]         vendor\n                                      style.js  <span class=\"hljs-number\">263</span> bytes       <span class=\"hljs-number\">2</span>  [emitted]         style\n                                   manifest.js    <span class=\"hljs-number\">1.39</span> kB       <span class=\"hljs-number\">3</span>  [emitted]         manifest\n                                   css/app.css    <span class=\"hljs-number\">27.5</span> kB       <span class=\"hljs-number\">0</span>  [emitted]         app\n                                 css/style.css    <span class=\"hljs-number\">39.1</span> kB       <span class=\"hljs-number\">2</span>  [emitted]         style\n                                    index.html    <span class=\"hljs-number\">1.26</span> kB          [emitted]\n\n&gt; <span class=\"hljs-symbol\">client@</span><span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span> build:server /var/www/New-Blog/client\n&gt; cross-env NODE_ENV=production webpack --config build/webpack.server.config.js --progress --hide-modules\n\nHash: c1685fd6bd9a9bb148a6\nVersion: webpack <span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.1</span>\nTime: <span class=\"hljs-number\">9352</span>ms\n              Asset     Size  Chunks                    Chunk Names\nvue-ssr-bundle.json  <span class=\"hljs-number\">1.72</span> MB          [emitted]  [big]</code></pre>\n<p>可以看到一个app.js就占了1.27MB, 此时网页加载的情况是这样的:\n<img src=\"https://xiao555.netlify.com/preyouhua.jpg\" alt=\"\">\n然后我看了一下别人的app.js，压缩后基本都是几十k大小，而我是几百k，所以app.js的大小是一个优化点，在分析了为何app.js这么大后，我进行了如下优化：</p>\n<ul>\n<li>减少对这些库的依赖，&#39;marked&#39;,&#39;highlight.js&#39;,&#39;uslug&#39;, &#39;vuejs-datepicker&#39;, &#39;Vuex&#39;</li>\n<li>markdown 渲染放在server端进行，article Model增加存放markdown的字段，对数据库中的旧数据创建Migration脚本</li>\n</ul>\n<p>优化后运行<code>npm run build</code>的结果是这样的：</p>\n<pre><code class=\"language-bash\">Total precache size <span class=\"hljs-keyword\">is</span> about <span class=\"hljs-number\">1.63</span> MB <span class=\"hljs-keyword\">for</span> <span class=\"hljs-number\">12</span> resources.\nHash: <span class=\"hljs-number\">85</span>db4cfa5f72482c3c59\nVersion: webpack <span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.0</span>\nTime: <span class=\"hljs-number\">10386</span>ms\n                                         Asset       Size  Chunks                    Chunk Names\n                                        app.js     <span class=\"hljs-number\">203</span> kB       <span class=\"hljs-number\">0</span>  [emitted]         app\n    static/img/fontawesome-webfont<span class=\"hljs-number\">.912</span>ec66.svg     <span class=\"hljs-number\">444</span> kB          [emitted]  [big]\n  static/fonts/fontawesome-webfont.b06871f.ttf     <span class=\"hljs-number\">166</span> kB          [emitted]\nstatic/fonts/fontawesome-webfont.af7ae50.woff2    <span class=\"hljs-number\">77.2</span> kB          [emitted]\n static/fonts/fontawesome-webfont.fee66e7.woff      <span class=\"hljs-number\">98</span> kB          [emitted]\n       static/img/FFMetaPro-Normal<span class=\"hljs-number\">.5</span>d836bf.svg    <span class=\"hljs-number\">2.12</span> MB          [emitted]  [big]\n     static/fonts/FFMetaPro-Normal<span class=\"hljs-number\">.4</span>eebf0c.eot     <span class=\"hljs-number\">200</span> kB          [emitted]\n     static/fonts/FFMetaPro-Normal<span class=\"hljs-number\">.3767f</span>35.ttf     <span class=\"hljs-number\">199</span> kB          [emitted]\n    static/fonts/FFMetaPro-Normal.ec7ccf1.woff    <span class=\"hljs-number\">71.7</span> kB          [emitted]\n  static/fonts/fontawesome-webfont<span class=\"hljs-number\">.674f</span>50d.eot     <span class=\"hljs-number\">166</span> kB          [emitted]\n                                     vendor.js  <span class=\"hljs-number\">810</span> bytes       <span class=\"hljs-number\">1</span>  [emitted]         vendor\n                                      style.js  <span class=\"hljs-number\">253</span> bytes       <span class=\"hljs-number\">2</span>  [emitted]         style\n                                   manifest.js    <span class=\"hljs-number\">1.38</span> kB       <span class=\"hljs-number\">3</span>  [emitted]         manifest\n                                   css/app.css    <span class=\"hljs-number\">22.1</span> kB       <span class=\"hljs-number\">0</span>  [emitted]         app\n                                 css/style.css    <span class=\"hljs-number\">39.2</span> kB       <span class=\"hljs-number\">2</span>  [emitted]         style\n                               css/app.css.map    <span class=\"hljs-number\">29.6</span> kB       <span class=\"hljs-number\">0</span>  [emitted]         app\n                             css/style.css.map    <span class=\"hljs-number\">36.1</span> kB       <span class=\"hljs-number\">2</span>  [emitted]         style\n                                    index.html    <span class=\"hljs-number\">1.23</span> kB          [emitted]\n\n&gt; <span class=\"hljs-symbol\">client@</span><span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span> build:server /Users/zhangruiwu/Desktop/demo-learn/newBlog/client\n&gt; cross-env NODE_ENV=production webpack --config build/webpack.server.config.js --progress --hide-modules\n\nHash: <span class=\"hljs-number\">5</span>b9d7f18053508c4e7a5\nVersion: webpack <span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.0</span>\nTime: <span class=\"hljs-number\">4008</span>ms\n              Asset    Size  Chunks                    Chunk Names\nvue-ssr-bundle.json  <span class=\"hljs-number\">556</span> kB          [emitted]  [big]</code></pre>\n<p>效果显著，可以看到总大小由2.75 MB减小的1.63 MB， app.js由1.27 MB减小到203 kB， vue-ssr-bundle.json也从1.72 MB减小到556 kB。我们再看看部署到服务器后网页加载情况：\n<img src=\"https://xiao555.netlify.com/afteryouhua.jpg\" alt=\"\">\n效果显著有没有，Load从4.15s减小到了1.31s，如果再要优化的话，其实也就是减少请求数，然后优化一下头像的处理，想到两种方案，一种换成base64，结果发现app.js变大了许多，编码有点多。第二种换成webp格式，效果如下：\n<img src=\"https://xiao555.netlify.com/afterwebp.jpg\" alt=\"\">\n加载速度减小的1s以内了。</p>\n<p>后面再该合并的合并，cdn的cdn，首屏加载性能方面的问题就基本解决的差不多了。先睡觉了==！</p>\n<h4 id=\"2017827\">2017.8.27</h4>\n<p>对client部分进行了一次重构，参考最新的<a href=\"https://github.com/vuejs/vue-hackernews-2.0\">vue-hackernews-2.0</a>，很多module都升级了几个小版本，功能也越来越多，一些功能也出现了一些新的实现方式。</p>\n<p>preFetch 变成了 asyncData，之前的版本我把preFetch去掉了，后来感觉这样会影响组件加载速度吧，感觉不妥。所以这次把asyncData和vuex都重新启用。为什么要启用vuex呢，因为个人感觉asyncData是需要靠一个全局对象来保存状态或者说是数据的，要自己实现还不如直接用vuex...而且新版本webpack打包起来大小比以前小了好多好多，多一个vuex不会影响app.js，会打包到vendor里。打包后的组件部分js是分成若干个文件按需加载，也分担了app.js的大小。</p>\n<ul>\n<li>重新启用vuex，探索了一下数据获取的方式，最后还是加入了asyncData异步加载。</li>\n<li>加入了文章列表分页功能，虽然现在只有一页</li>\n<li>精简优化webpack配置文件</li>\n<li>新的title机制</li>\n<li>顶部进度条</li>\n<li>font-awesome字体文件改为CDN引入</li>\n</ul>\n<h4 id=\"2017831\">2017.8.31</h4>\n<p>上Docker！！！Node.js, MongoDB, Redis三部分各一个容器，本来还用Nginx,但是涉及到https证书什么的好麻烦，要迁移的话反而麻烦，所以除了上面那三部分可以随时随地跑，nginx就单独配置吧。</p>\n<h3 id=\"todo\">TODO</h3>\n<ul>\n<li>评论区</li>\n<li>管理后台界面优化，目前是仿WordPress</li>\n<li>重构，改成同构Web应用</li>\n<li>服务器端（腾讯云）的优化</li>\n<li>数据库定期备份</li>\n</ul>\n<h3 id=\"license\">LICENSE</h3>\n<p><a href=\"https://www.apache.org/licenses/LICENSE-2.0\">Apache License 2.0</a></p>\n","title":"新的博客正式上线","tags":["blog","vue","koa","nginx"],"slug":"new-blog-officially-launched","createDate":1497283200000,"id":"new-blog-officially-launched","thumb":"https://images.unsplash.com/photo-1580629905303-faaa03202631?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>本人西电软院大三，之前在一个外包团队实习，(广告：我们的团队<a href=\"https://www.wpninja.com.au/\">WPNinja . Sydney, Australia</a>)。\n本来不打算大三找实习的, 但是觉得可以参加一下春招为以后积累经验吧。所以投了AT的内推，B说实话不想去，虽然不一定能进去。然后就开始等待，中间看了看前端的一些面试题。</p>\n","content":"<p>本人西电软院大三，之前在一个外包团队实习，(广告：我们的团队<a href=\"https://www.wpninja.com.au/\">WPNinja . Sydney, Australia</a>)。\n本来不打算大三找实习的, 但是觉得可以参加一下春招为以后积累经验吧。所以投了AT的内推，B说实话不想去，虽然不一定能进去。然后就开始等待，中间看了看前端的一些面试题。</p>\n<h3 id=\"二面挂了的阿里\">二面挂了的阿里</h3>\n<p>3月7日，北京的电话，阿里一面，感觉像是工作没几年的学长，问我什么专业，我说软件工程，然后他就问各种基础知识：</p>\n<ol>\n<li>OSI七层模型知道吗？   我上学期学的网络已经忘了，也有点懵，为啥问这些。。当时只记得应用层，物理层，数据链路层了...</li>\n<li>对TCP/IP有什么了解？   已经完全不知道怎么回答了，现在想想知道什么说什么就是了</li>\n<li>知道BFC吗？   这个我确实不知道，虽然我是搞前端的，后来查了一下</li>\n<li>数据结构算法之类的。。忘了</li>\n</ol>\n<p>基本是问啥啥不会的状态，电话结束看一下时间： 12min。本来以为gg了，结果又接到电话了</p>\n<p>3月14日，杭州的电话，感觉应该是部门的leader把，说话很随和，也会引导你，整个面试过程下来感觉很舒服。问的问题比较广，大部分是诸如 让你负责一个项目你怎么安排，怎么设计一个三层的什么什么之类的。。。问我快排会吗，我说忘了。。。最后我还问了一下他的名字，也跟我说了，当时觉得我回答的还可以，结果就没有后文了。</p>\n<p>总结：</p>\n<ol>\n<li>准备不充分吧，以积累经验为目的面的，没准备多少。数据结构什么的都忘了，快排都不会人家敢要你？感觉阿里挺注重基础的，自己之前看了看的前端面试题反而一个都没用上</li>\n<li>是感觉自己最后应该问一下对我有什么看法建议之类的，毕竟人家有多年经验了，能给你一些有用的指导。后面基本每次面试都问了</li>\n</ol>\n<p>说实话阿里这个挺打击我的，感觉到了找实习的难度，觉得不能积累经验了，要正八经找个实习。</p>\n<p>后面经常关注v2ex的酷工作，投了家上海的<a href=\"https://www.v2ex.com/t/340614#reply123\">Strikingly</a>, 3月28投的，4月10才有反馈，4月13日电话面试，hr，问我职业规划什么的，最后说我可能有些迷茫，挂了....我想说我不迷茫啊，可能语言表达有问题吧。</p>\n<p>然后就是在实习僧上投了一些，没有后文或不合适，投了头条，做了笔试题，到现在都是评估中，没有后文，其他像去哪儿，网易等错过了时间，华为根本不知道。</p>\n<h3 id=\"腾讯西安现场面（拿到offer）\">腾讯西安现场面（拿到offer）</h3>\n<p>腾讯我是内推的，然而深圳那边打了两次电话我都没接到，平时手机静音的，然后级就没有然后了。\n4月2日做了腾讯的笔试题，编程题怎么也输出不来东西，放弃了，没收到4月16日的面试通知。\n然而同学收到了，说我可以霸面，我正纠结要不要去的时候，面试组发了个腾讯校招&quot;&lt;西安&gt;补增需求及霸面&quot;登记表 ，我临时把简历改了改，缩成了一页，填上去了，晚上收到了面试短信，通知4月16日 18:00 去悦豪酒店面试。一个舍友也填了，也收到了面试通知 下午五点，于是那天我们一起去的，结果从4点等到了晚上7点20才轮到我，那天人真的多。我一个同学上午先面的，跟我说了说她问的问题：</p>\n<ol>\n<li>解释js继承</li>\n<li>jsonp原理</li>\n<li>h5里跨域资源共享</li>\n<li>ajax原理</li>\n<li>原型链</li>\n<li>作用域链</li>\n<li>服务端客户端获取cookie的方法</li>\n<li>用过哪些构建工具</li>\n<li>用过哪些压缩工具</li>\n<li>项目相关...</li>\n</ol>\n<p>然后我就看了好多面试题资料什么的，感觉准备一面的过程中收获了不少知识。分享几个：</p>\n<ol>\n<li><a href=\"http://m.blog.csdn.net/article/details?id=47023771\">http://m.blog.csdn.net/article/details?id=47023771</a></li>\n<li><a href=\"http://gcdn.gcpowertools.com.cn/showtopic-36594-1-3.html?utm_source=segmentfault&amp;utm_medium=referral&amp;utm_campaign=20170327\">http://gcdn.gcpowertools.com.cn/showtopic-36594-1-3.html?utm_source=segmentfault&amp;utm_medium=referral&amp;utm_campaign=20170327</a></li>\n<li><a href=\"http://zhangwenli.com/blog/2015/04/01/2015-front-end-engineer-interview/\">http://zhangwenli.com/blog/2015/04/01/2015-front-end-engineer-interview/</a> 这个我觉得还是要好好看看的，说的很详细，尤其是this那一段，让我感觉看书真有用。。而且我的简历模板也是照着zwl大神来的</li>\n</ol>\n<p>到了房间，面试官很年轻，先说抱歉让你久等了，我笑着说没事没事。问的问题也是从项目着手：</p>\n<ol>\n<li>我看你项目里有弹出层，怎么用js实现一个弹出层呢？</li>\n<li>怎么点击取消弹出层？我说通过增删class来控制吧，他说不用class，然后我们在纸上比比划划半天，最后他说弹出层和document绑定click事件，我才突然明白他想考我的是事件冒泡，我说那就取消冒泡，你想问的是这个吧，面试官感觉是默认了，开始在简历上写东西，还突然问我在哪取消冒泡，我说弹出层...</li>\n<li>跨域相关的，jsonp原理，我说了一下，然后说我没用过，我只用过postMessage</li>\n<li>cookie， 与域名有关，之前的问题忘了，后来问如果同一个域名不同端口能不能共享cookie，我当时回答的是不能，后来回去查了查，是可以的，只与域名有关</li>\n<li>js异常知道吧，怎么设置一个全局的异常处理，我当时说用try catch？ 回去查了查，是有个error事件的，我感觉可以参考<a href=\"http://jixianqianduan.com/article-translation/2016/05/12/proper-error-handler-in-javascript.html\">javascript中的错误处理</a></li>\n<li>mongoDB 跟 Mysql有什么区别？我说了说自己的理解，但是没说到NoSQL，感觉应该先说这个的</li>\n<li>雪碧图用过吗？ 我说用过啊，我说我之前写了个小动画用雪碧图实现的，然后问怎么让他动起来，我说transition</li>\n<li>网站优化问题，诸如减少http请求之类的，提到了cdn，他问cdn原理是什么，我说我也不了解，但是人家是专业干这个的，肯定有一套加快访问速度的方法</li>\n<li>其他的想不起来了，这些都是我零零碎碎拼起来的，真不知道为啥别人记性这么好。</li>\n</ol>\n<p>4月17日晚上11点收到了二面通知，第二天下午2点，舍友是上午9点半，所以我们不能一块走了。\n第二天起床十点了，先打开电脑把各种排序写了一遍，好怕会问些其他方面的基础问题，或者让你手写代码什么的。\n结果去了之后，面试官应该是个总监级别的，什么技术问题都没问：</p>\n<ol>\n<li>你遇到的最大的困难是什么，怎么解决的</li>\n<li>平时除了学习还有什么兴趣爱好</li>\n<li>平时做的东西有什么总结思考吗</li>\n<li>你觉得你有哪些优势？我所项目经验多，学习能力强，有上进心，他说你说的这些太泛了，然后我就挑事例具体说明。</li>\n<li>为什么不考研？</li>\n<li>先问了他，不像感觉中的问很多技术问题，他说基本是是问这些的，看一面面试官的反馈吧，如果有哪里不清楚会继续问问</li>\n<li>最后习惯性的问了对我有什么建议，面试官说你做的东西挺多，在本科生看来项目经验是很丰富了，不过平时要注意多总结思考，反思自己，这样才能不断的进步(具体的我也忘了，说了很多，基本是这个意思，不过我觉得说的很好很有帮助)</li>\n</ol>\n<p>我感觉这种考的完全是平时的学习习惯，平时的积累，如果平时多想想这些问题，多思考总结的话，这些问题回答起来肯定没问题</p>\n<p>4月19号收到hr面通知，舍友挂了，我感觉有点紧张，那天晚上看了好多hr面的例子，我前几次面试都是背书包带电脑去的，结果电脑一次也没用上，第二天就没带电脑，去了发现简历也没拿，又紧张了，不过前两面面试官都是自备的简历，感觉hr面应该也有吧。等待的地方也换到了一个小会议室，从一面满满的都是人，到二面人大大减少，hr面的时候当时算上我就两三个人。</p>\n<p>下午一点收到通知去面试官房间，hr不是想象中的妹子==！ 问的问题是</p>\n<ol>\n<li>你工作方向啊，项目里扮演什么角色啊，看看你对你工作的理解，未来发展的方向。</li>\n<li>然后总会提一些高并发，数据库什么的，我感觉与部门有关吧，</li>\n<li>部门做的东西是面向腾讯内部的，与面向客户那种偏c方向的有什么区别？</li>\n<li>你兴趣方向在哪方面？</li>\n<li>看你用MongoDB，与Mysql的区别在哪？什么情况下会用MongoDb，什么情况下用Mysql？我说Mysql应该在数据量比较大的情况下用吧，我自己搞的东西数据量都比较小，就怎么方便怎么来</li>\n<li>其他数据库有用过吗？oracle，baseocean。。好像是这些，没有用过，我说最近写Blog用了Redis也算吧</li>\n<li>Linux了解吗？我说我租了vps，搭了ss，然后部署些网站。 那除了这些操作以外有没有深入一些的，内核之类的？我说之前上课有写过一些（正在想写过啥，然后就问下一个问题了...orz）</li>\n<li>你觉得有什么需要加强的地方？ 我说我感觉计算机基础，网络，操作系统等等还是要多了解了解，这学期有算法和Java想好好学一下。 算法研究什么，数据结构吗？ 我说各种排序肯定要熟练的，然后主要是一些思想上的，比如最近讲的...（正在想，开始下一个问题）</li>\n<li>Java会吗？我说正在学</li>\n<li>除了前端平时其他方面有了解吗？ 我说我后端也了解一下，express， koa 都用过，怎么跟数据库交互，设计RESTful API啊等等，又提到高并发，我说高并发用Node嘛</li>\n<li>看你之前投的的omg，了解吗？我说应该是腾讯视频的，在北京，然后....（沉默）hr说看来你不了解。我说我是内推的，必须选那个。之前的面试官跟你说部门了吗?没有。 然后hr跟我说了一下部门，我问了一下部门做什么产品的等等，他说部门也比较接纳新技术，我觉得挺好的</li>\n</ol>\n<p>hr面感觉是我面的最长的了，问的问题也很多\n然而接下来就是漫长的等待了。。。加了西安的群和全国的群，天天看一群大佬们等offer，拿到offer的就在群里发红包，哈哈。想着万一我腾讯过不了的话后面也就没什么招聘了吧，实习怎么办呢 ，很紧张的状态。</p>\n<p>4月20hr面，4月25号微信状态终于变成了已完成所有面试。4月26号看到好多人拿了offer，虽然不是我们teg的，但是心里好着急啊，什么也做不进去。听说可以找内推人查后台状态，然而我内推人不理我，最后联系上了一个学长，帮我查了，录取已通过！</p>\n<p>果然，4月27号下午接到了深圳的电话(第一次跟hr小姐姐交流)，一路恩，对，同意。我的春招之旅也就告一段落。</p>\n<p>总结：</p>\n<ol>\n<li>感觉腾讯的招聘有一些幸运吧，没问我一些计算机，网络等基础知识，算法也没问，也没让手写代码，就这么过了。</li>\n<li>感觉研究生好多啊，我加的群里面大部分都是研究生，本科找个实习也不容易啊，不过研究生薪资应该比本科生高，所以公司也会考虑性价比的</li>\n</ol>\n<p>最后，附上我的<a href=\"https://xiao555.github.io/Resume/\">简历</a>, 我语言表达能力可能差一些，说的可能比较随意，欢迎提出意见。</p>\n","title":"大三狗实习面经（拿了腾讯offer）","tags":["offer","interview"],"slug":"junior-interview","createDate":1493308800000,"id":"junior-interview","thumb":"https://images.unsplash.com/photo-1582359037590-7c7bbba83b67?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>本文从一个小Demo开始，通过不断增加功能来说明webpack的基本配置，只针对新手，也欢迎指正错误。</p>\n","content":"<p>本文从一个小Demo开始，通过不断增加功能来说明webpack的基本配置，只针对新手，也欢迎指正错误。</p>\n<p>Node.js version： -v7.7.0\nwebpack 最好全局装一下</p>\n<h3 id=\"base\">Base</h3>\n<p>我们先从简单的Demo开始，首先我创建了一个项目目录<code>webpack</code>，在该目录下运行命令：</p>\n<pre><code class=\"language-bash\">npm init\nnpm <span class=\"hljs-keyword\">install</span> webpack html-loader <span class=\"hljs-keyword\">style</span>-loader css-loader <span class=\"hljs-comment\">--save-dev</span></code></pre>\n<p>安装完成后我的<code>package.json</code>是这样子的：</p>\n<pre><code class=\"language-json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"webpack-example\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"A webpack example\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  },\n  <span class=\"hljs-attr\">\"keywords\"</span>: [\n    <span class=\"hljs-string\">\"webpack\"</span>\n  ],\n  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"xiao555\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n    <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^0.28.0\"</span>,\n    <span class=\"hljs-attr\">\"html-loader\"</span>: <span class=\"hljs-string\">\"^0.4.5\"</span>,\n    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^2.3.3\"</span>\n  }\n}</code></pre>\n<p>然后我在根目录下创建了<code>index.html</code>，<code>style.css</code>，<code>entry.js</code>，<code>webpack.config.js</code>:</p>\n<pre><code class=\"language-html\">// index.html\n<span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Hello Webpack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"./style.css\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello Webpack!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/bundle.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n<pre><code class=\"language-css\"><span class=\"hljs-comment\">// style.css</span>\n<span class=\"hljs-class\">h1 </span>{\n<span class=\"hljs-symbol\">  color:</span> lightblue;\n}</code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// entry.js</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'./style.css'</span>)</span></span></code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">let</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  entry: <span class=\"hljs-string\">'./entry.js'</span>,\n  output: {\n    path: __dirname,\n    filename: <span class=\"hljs-string\">'bundle.js'</span>\n  },\n  <span class=\"hljs-keyword\">module</span>: {\n    rules: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        loader: <span class=\"hljs-string\">'style-loader!css-loader'</span>\n      }\n    ]\n  }\n}</code></pre>\n<p>然后修改一下<code>package.json</code>的scripts:</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"webpack --config webpack.config.js\"</span>,\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"</span><span class=\"hljs-keyword\">Error</span>: <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">test</span> specified\\<span class=\"hljs-string\">\" &amp;&amp; exit 1\"</span>\n  },</code></pre>\n<p>好了，这样一个简单的Demo就完成了，让我们看一下效果：</p>\n<pre><code class=\"language-bash\">➜  webpack npm start\n\n&gt; webpack-<span class=\"hljs-symbol\">example@</span><span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.0</span> start /Users/zhangruiwu/Desktop/webpack\n&gt; webpack --config webpack.config.js\n\nHash: f9e8a168c2845147afb4\nVersion: webpack <span class=\"hljs-number\">2.3</span><span class=\"hljs-number\">.3</span>\nTime: <span class=\"hljs-number\">384</span>ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  <span class=\"hljs-number\">73.1</span> kB       <span class=\"hljs-number\">0</span>  [emitted]  main\n   [<span class=\"hljs-number\">0</span>] ./style.css <span class=\"hljs-number\">895</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">1</span>] ./entry.js <span class=\"hljs-number\">22</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">2</span>] ./~/base64-js/index.js <span class=\"hljs-number\">3.48</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">3</span>] ./~/buffer/index.js <span class=\"hljs-number\">48.6</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">4</span>] ./~/css-loader!./style.css <span class=\"hljs-number\">190</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">5</span>] ./~/css-loader/lib/css-base.js <span class=\"hljs-number\">2.19</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">6</span>] ./~/ieee754/index.js <span class=\"hljs-number\">2.05</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">7</span>] ./~/isarray/index.js <span class=\"hljs-number\">132</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">8</span>] ./~/style-loader/addStyles.js <span class=\"hljs-number\">8.51</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">9</span>] ./~/style-loader/fixUrls.js <span class=\"hljs-number\">3.01</span> kB {<span class=\"hljs-number\">0</span>} [built]\n  [<span class=\"hljs-number\">10</span>] (webpack)/buildin/global.js <span class=\"hljs-number\">509</span> bytes {<span class=\"hljs-number\">0</span>} [built]</code></pre>\n<p>可以看到目录里生成了一个<code>bundle.js</code>，这就是webpack打包后的文件，我们在浏览器里打开<code>index.html</code>:\n<img src=\"https://xiao555.netlify.com/hello_webpack.jpg\" alt=\"\">\nOK, 可以看到我们的css已经渲染上去了。\n我们的webpack配置文件做了什么呢？</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">let</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  entry: <span class=\"hljs-string\">'./entry.js'</span>, <span class=\"hljs-comment\">// 入口文件，根据这个文件来决定打包哪些文件</span>\n  output: {\n    path: __dirname,   <span class=\"hljs-comment\">// 打包后文件存放的路径</span>\n    filename: <span class=\"hljs-string\">'bundle.js'</span> <span class=\"hljs-comment\">// 打包后文件的名称</span>\n  },\n  <span class=\"hljs-keyword\">module</span>: { <span class=\"hljs-comment\">// 决定不同类型的模块如何处理</span>\n    rules: [ <span class=\"hljs-comment\">// 决定了模块创建规则，</span>\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>, <span class=\"hljs-comment\">// 匹配文件类型</span>\n        loader: <span class=\"hljs-string\">'style-loader!css-loader'</span> <span class=\"hljs-comment\">// 应用加载器，'-loader'可以省略(v2好像不可以了)</span>\n      }\n    ]\n  }\n}</code></pre>\n<h3 id=\"loader\">Loader</h3>\n<p>好了，让我们改一下，我再目录里加了一张图片<code>bg.jpg</code>,修改了<code>style.css</code> ：</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: lightblue;\n}\n\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'./bg.jpg'</span>);\n}</code></pre>\n<p><code>npm start</code> 一下：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-keyword\">ERROR </span>in ./bg.jpg\nModule parse failed: /Users/zhangruiwu/Desktop/webpack/bg.jpg Unexpected character '�' (1:0)\nYou may need an appropriate loader to handle this file type.\n(Source code omitted for this binary file)\n @ ./~/css-loader!./style.css 6:94<span class=\"hljs-string\">-113</span>\n @ ./style.css\n @ ./entry.js</code></pre>\n<p>报错了，这个错误是什么呢？因为我们引入了一个jpg图片文件，要打包的话需要一个处理这种文件类型的loader：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// bash</span>\nnpm i url-loader --save-dev\n<span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">module</span>: {\n    rules: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        loader: <span class=\"hljs-string\">'style-loader!css-loader'</span>\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.(jpe?g|png|gif|svg)$/</span>,\n        loader: <span class=\"hljs-string\">'url-loader'</span> <span class=\"hljs-comment\">// copy文件的loader</span>\n      }\n    ]\n  }</code></pre>\n<p>重新<code>npm start</code>，发现根目录下多了一个<code>f58125a1fa5c143130104dc5fa9af77b.jpg</code>, 浏览器打开<code>index.html</code>:\n<img src=\"https://xiao555.netlify.com/webpack_bg.jpg\" alt=\"\"></p>\n<p>OK!</p>\n<h3 id=\"我们改造一下：\">我们改造一下：</h3>\n<ol>\n<li>css用stylus</li>\n<li>css,img等资源放在<code>/src</code>目录下</li>\n<li>打包后图片文件放在<code>/dist/static</code>目录下</li>\n<li>打包文件统一放在一个目录下<code>/dist</code></li>\n</ol>\n<pre><code class=\"language-bash\">npm i stylus stylus-loader html-webpack-plugin --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span></code></pre>\n<p>调整目录结构：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-bullet\">- </span>webpack\n<span class=\"hljs-bullet\">    - </span>src\n<span class=\"hljs-bullet\">        - </span>assets\n<span class=\"hljs-bullet\">            - </span>img\n<span class=\"hljs-bullet\">                - </span>bg.jpg\n<span class=\"hljs-bullet\">        - </span>style\n<span class=\"hljs-bullet\">            - </span>main.styl\n<span class=\"hljs-bullet\">            - </span>entry.js\n<span class=\"hljs-bullet\">    - </span>index.html\n<span class=\"hljs-bullet\">    - </span>webpack.config.js\n<span class=\"hljs-bullet\">    - </span>package.json</code></pre>\n<pre><code class=\"language-html\">// index.html\n<span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Hello Webpack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello Webpack!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n<pre><code class=\"language-stylus\"><span class=\"hljs-comment\">// main.styl</span>\n<span class=\"hljs-selector-tag\">h1</span>\n  <span class=\"hljs-attribute\">color</span> lightblue\n<span class=\"hljs-selector-tag\">body</span>\n  <span class=\"hljs-attribute\">background-image</span> url(<span class=\"hljs-string\">'~assets/image/bg.jpg'</span>)</code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// entry.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./main.styl'</span></code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">let</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>)\n<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">let</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  entry: {\n    style: <span class=\"hljs-string\">'./src/style/entry.js'</span> <span class=\"hljs-comment\">// 新的入口文件</span>\n  },\n  output: {\n    path: path.join(__dirname, <span class=\"hljs-string\">'./dist'</span>), <span class=\"hljs-comment\">// 新的打包目录</span>\n    filename: <span class=\"hljs-string\">'[name].js'</span> <span class=\"hljs-comment\">// 这里的name对应entry的key值，这里是style，如果增加一个入口文件scrit的话，同样生成一个script.js</span>\n  },\n  <span class=\"hljs-keyword\">module</span>: {\n    rules: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        loader: <span class=\"hljs-string\">'style-loader!css-loader?sourceMap'</span>\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.(jpe?g|png|gif|svg)$/</span>,\n        loader: <span class=\"hljs-string\">'url-loader?name=static/[hash].[ext]'</span> <span class=\"hljs-comment\">// '?'后跟loader的配置参数，这里name指文件名，static目录下</span>\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.styl$/</span>,  <span class=\"hljs-comment\">// 增加stylus文件的loader</span>\n        loader: <span class=\"hljs-string\">\"style-loader!css-loader!stylus-loader?sourceMap\"</span> <span class=\"hljs-comment\">// 可以通过'!'来级联loader</span>\n      }\n    ]\n  },\n  resolve: {\n    alias: {\n      <span class=\"hljs-string\">'assets'</span>: path.join(__dirname, <span class=\"hljs-string\">'./src/assets'</span>) <span class=\"hljs-comment\">// 定义别名，用法见main.styl 里 background-image url('~assets/image/bg.jpg')</span>\n    }\n  },\n  plugins: [\n      <span class=\"hljs-comment\">// 这个插件用来处理html文件，https://github.com/jantimon/html-webpack-plugin , 这里的作业是吧index.html打包到dist目录下</span>\n    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n      filename: <span class=\"hljs-string\">'index.html'</span>,\n      template: <span class=\"hljs-string\">'index.html'</span>\n    })\n  ]\n}</code></pre>\n<p><code>npm start</code> 之后生成的目录结构：</p>\n<pre><code><span class=\"hljs-bullet\">- </span>dist\n<span class=\"hljs-bullet\">    - </span>static\n<span class=\"hljs-bullet\">        - </span>f58125a1fa5c143130104dc5fa9af77b.jpg\n<span class=\"hljs-bullet\">    - </span>index.html\n<span class=\"hljs-bullet\">    - </span>style.js</code></pre><p>浏览器访问这个目录下的<code>index.html</code>，没有问题，为什么要把html搞到<code>dist</code>目录下呢？  可以F12看看body背景图片的url，是相对与打包目录<code>dist</code>的，也就是说这里访问的根目录是打包目录，我们的html也要放进去。</p>\n<h3 id=\"让我们继续改造：\">让我们继续改造：</h3>\n<h4 id=\"1-引入第三方css\">1. 引入第三方css</h4>\n<p>以FontAwesome为例：</p>\n<pre><code class=\"language-path\">npm install <span class=\"hljs-built_in\">font</span>-awesome --<span class=\"hljs-built_in\">save</span></code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">{</span>\n    <span class=\"hljs-attr\">rules:</span> <span class=\"hljs-string\">[</span>\n      <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">test:</span> <span class=\"hljs-string\">/\\.css$/,</span>\n        <span class=\"hljs-attr\">loader:</span> <span class=\"hljs-string\">'style-loader!css-loader?sourceMap'</span>\n      <span class=\"hljs-string\">},</span>\n      <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">test:</span> <span class=\"hljs-string\">/\\.(jpe?g|png|gif|svg)$/,</span>\n        <span class=\"hljs-attr\">loader:</span> <span class=\"hljs-string\">'url-loader?name=static/[hash].[ext]'</span>\n      <span class=\"hljs-string\">},</span>\n      <span class=\"hljs-string\">{</span>\n        <span class=\"hljs-attr\">test:</span> <span class=\"hljs-string\">/\\.styl$/,</span>\n        <span class=\"hljs-attr\">loader:</span> <span class=\"hljs-string\">\"style-loader!css-loader!stylus-loader?sourceMap\"</span>\n      <span class=\"hljs-string\">},</span>\n      <span class=\"hljs-string\">{</span>\n          <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">FontAwesome</span> <span class=\"hljs-string\">需要加载字体文件，(\\?.*)</span> <span class=\"hljs-string\">处理带版本号的文件</span>\n        <span class=\"hljs-attr\">test:</span> <span class=\"hljs-string\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,</span>\n        <span class=\"hljs-attr\">loader:</span> <span class=\"hljs-string\">'url-loader'</span><span class=\"hljs-string\">,</span>\n        <span class=\"hljs-attr\">options:</span> <span class=\"hljs-string\">{</span>\n          <span class=\"hljs-attr\">limit:</span> <span class=\"hljs-number\">10000</span><span class=\"hljs-string\">,</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">'fonts/[name].[hash:7].[ext]'</span>\n        <span class=\"hljs-string\">}</span>\n      <span class=\"hljs-string\">}</span>\n    <span class=\"hljs-string\">]</span>\n  <span class=\"hljs-string\">},</span></code></pre>\n<h4 id=\"2-多html文件\">2. 多html文件</h4>\n<p><code>html-webpack-plugin</code> 这个插件处理多html文件，就是多new几次，也可以通过数组ForEach的方法：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> config = {\n  entry: {\n    style: <span class=\"hljs-string\">'./src/style/entry.js'</span>\n  },\n  outpu<span class=\"hljs-variable\">t:</span> {\n    path: path.<span class=\"hljs-keyword\">join</span>(__dirname, <span class=\"hljs-string\">'./dist'</span>),\n    filename: <span class=\"hljs-string\">'[name].js'</span>\n  },\n  module: {\n    rule<span class=\"hljs-variable\">s:</span> [\n      {\n        tes<span class=\"hljs-variable\">t:</span> /\\.css$/,\n        loader: <span class=\"hljs-string\">'style-loader!css-loader?sourceMap'</span>\n      },\n      {\n        tes<span class=\"hljs-variable\">t:</span> /\\.(jpe?g|png|gif|svg)$/,\n        loader: <span class=\"hljs-string\">'url-loader?name=static/[hash].[ext]'</span>\n      },\n      {\n        tes<span class=\"hljs-variable\">t:</span> /\\.styl$/,\n        loader: <span class=\"hljs-string\">\"style-loader!css-loader!stylus-loader?sourceMap\"</span>\n      },\n      {\n        tes<span class=\"hljs-variable\">t:</span> /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: <span class=\"hljs-string\">'url-loader'</span>,\n        option<span class=\"hljs-variable\">s:</span> {\n          limi<span class=\"hljs-variable\">t:</span> <span class=\"hljs-number\">10000</span>,\n          name: <span class=\"hljs-string\">'fonts/[name].[hash:7].[ext]'</span>\n        }\n      }\n    ]\n  },\n  <span class=\"hljs-built_in\">resolve</span>: {\n    extension<span class=\"hljs-variable\">s:</span> [<span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.vue'</span>, <span class=\"hljs-string\">'.json'</span>],\n    alia<span class=\"hljs-variable\">s:</span> {\n      <span class=\"hljs-string\">'assets'</span>: path.<span class=\"hljs-keyword\">join</span>(__dirname, <span class=\"hljs-string\">'./src/assets'</span>)\n    }\n  },\n  plugin<span class=\"hljs-variable\">s:</span> []\n}\nconst array = [<span class=\"hljs-string\">'index'</span>, <span class=\"hljs-string\">'test'</span>]\narray.forEach((<span class=\"hljs-keyword\">file</span>) =&gt; {\n  const <span class=\"hljs-keyword\">conf</span> = {\n    filename: `${<span class=\"hljs-keyword\">file</span>}.html`,\n    template: `${<span class=\"hljs-keyword\">file</span>}.html`\n  }\n  config.plugins.push(<span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(<span class=\"hljs-keyword\">conf</span>))\n})\n\nmodule.exports = config</code></pre>\n<h4 id=\"3-某些文件单独打包\">3. 某些文件单独打包</h4>\n<p>以jquery为例：</p>\n<pre><code class=\"language-bash\">npm i <span class=\"hljs-built_in\">file</span>-loader <span class=\"hljs-comment\">--save-dev</span>\nnpm i jquery <span class=\"hljs-comment\">--save</span></code></pre>\n<pre><code>- src\n    - script\n        - <span class=\"hljs-keyword\">entry</span>.js\n\n// <span class=\"hljs-keyword\">entry</span>.js\nimport <span class=\"hljs-symbol\">'copy</span>!jquery/dist/jquery.min.js'</code></pre><pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-attribute\">entry</span>: {\n  <span class=\"hljs-attribute\">style</span>: <span class=\"hljs-string\">'./src/style/entry.js'</span>,\n  <span class=\"hljs-attribute\">script</span>: <span class=\"hljs-string\">'./src/script/entry.js'</span> <span class=\"hljs-comment\">// 新增入口文件</span>\n},\n...\n<span class=\"hljs-selector-tag\">resolveLoader</span>: { <span class=\"hljs-comment\">// 处理loader</span>\n  <span class=\"hljs-attribute\">alias</span>: {\n    <span class=\"hljs-string\">'copy'</span>: <span class=\"hljs-string\">'file-loader?name=[name].[ext]'</span>, <span class=\"hljs-comment\">//&amp;context=./src</span>\n  }\n},</code></pre>\n<p><code>npm start</code> 后会发现<code>/dist</code> 目录下<code>jquery.min.js</code>已经单独打包出来了</p>\n<h4 id=\"4-热加载\">4. 热加载</h4>\n<p>以BrowserSync为例：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-symbol\">npm</span> i <span class=\"hljs-keyword\">browser-sync </span><span class=\"hljs-keyword\">browser-sync-webpack-plugin </span>--save-dev</code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> BrowserSyncPlugin   = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'browser-sync-webpack-plugin'</span>)\n\n<span class=\"hljs-keyword\">let</span> config = {\n <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>,\n <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> BrowserSyncPlugin(\n      <span class=\"hljs-comment\">// BrowserSync options</span>\n      {\n        <span class=\"hljs-comment\">// browse to http://localhost:3000/ during development</span>\n        <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">'localhost'</span>,\n        <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">4000</span>,\n        <span class=\"hljs-comment\">// proxy the Webpack Dev Server endpoint</span>\n        <span class=\"hljs-comment\">// (which should be serving on http://localhost:3100/)</span>\n        <span class=\"hljs-comment\">// through BrowserSync</span>\n        <span class=\"hljs-comment\">// proxy: 'http://localhost:3100/'</span>\n        <span class=\"hljs-attr\">server</span>: {\n          <span class=\"hljs-attr\">baseDir</span>: [<span class=\"hljs-string\">'dist'</span>],\n          <span class=\"hljs-attr\">directory</span>: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// with directory listing</span>\n        }\n      },\n      <span class=\"hljs-comment\">// plugin options</span>\n      {\n        <span class=\"hljs-comment\">// prevent BrowserSync from reloading the page</span>\n        <span class=\"hljs-comment\">// and let Webpack Dev Server take care of this</span>\n        <span class=\"hljs-attr\">reload</span>: <span class=\"hljs-literal\">true</span>\n      }\n    )\n  ]\n}</code></pre>\n<p>会自动打开浏览器访问<code>http://localhost:4000/</code>, 修改被打包的文件会自动刷新</p>\n<h4 id=\"5-配置stylus和babel\">5. 配置stylus和babel</h4>\n<pre><code class=\"language-bash\"><span class=\"hljs-symbol\">npm</span> i autoprefixer nib poststylus <span class=\"hljs-keyword\">babel-core </span><span class=\"hljs-keyword\">babel-loader </span><span class=\"hljs-keyword\">babel-plugin-transform-runtime </span><span class=\"hljs-keyword\">babel-preset-es2015 </span>--save-dev</code></pre>\n<pre><code class=\"language-stylus\">/<span class=\"hljs-regexp\">/ ./src</span><span class=\"hljs-regexp\">/style/variables</span>.styl\nblue = <span class=\"hljs-comment\">#0073aa</span></code></pre>\n<pre><code class=\"language-stylus\"><span class=\"hljs-comment\">// ./src/style/main.styl</span>\nh1\n  <span class=\"hljs-built_in\">color</span> <span class=\"hljs-built_in\">blue</span></code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> poststylus = require(<span class=\"hljs-string\">'poststylus'</span>)\n...\nplugin<span class=\"hljs-variable\">s:</span> [\n    <span class=\"hljs-keyword\">new</span> webpack.LoaderOptionsPlugin({\n      // tes<span class=\"hljs-variable\">t:</span> /\\.xxx$/, // may apply this <span class=\"hljs-keyword\">only</span> <span class=\"hljs-keyword\">for</span> some modules\n      option<span class=\"hljs-variable\">s:</span> {\n        stylu<span class=\"hljs-variable\">s:</span> {\n          use: [\n            poststylus([ <span class=\"hljs-string\">'autoprefixer'</span> ]),\n          ],\n          impor<span class=\"hljs-variable\">t:</span> [\n            <span class=\"hljs-string\">'~nib/index.styl'</span>,\n            path.<span class=\"hljs-keyword\">join</span>(__dirname, <span class=\"hljs-string\">'src/style/variables.styl'</span>)\n          ]\n        },\n        babe<span class=\"hljs-variable\">l:</span> {\n          preset<span class=\"hljs-variable\">s:</span> [<span class=\"hljs-string\">'es2015'</span>],\n          plugin<span class=\"hljs-variable\">s:</span> [<span class=\"hljs-string\">'transform-runtime'</span>]\n        }\n      }\n    }),\n    ...\n  ]</code></pre>\n<p><code>autoprefixer</code>是个自动添加前缀的插件，<code>nib</code>是一个不错的css库，<code>variables.styl</code>可以作为stylus的全局变量加载，babel不用说，可以写es6的代码。</p>\n<h3 id=\"总结\">总结</h3>\n<p>感觉把以上说的走一遍，webpack基本的配置就可以熟悉了，会引入loader，配置loader选项，会设置alias，会用plugins差不多。</p>\n<p>至于现在一些比较大的项目中分多个配置文件，是根据不同的场景拆分开的，基本的一个<code>webpack.base.config.js</code>,主要包含<code>loader</code>，<code>resolve</code>等全局通用的部分，剩下的根据开发或者生产环境分成<code>webpack.dev.config.js</code>，<code>webpack.prod.config.js</code>，除了都会合并base的内容，其他可能跟去环境不一样像<code>output</code>， <code>plugins</code>也都有所不同。</p>\n<p>另外，我说的不是很详细，有些东西还要自己去踩坑，比如loader和plugins的配置可以看官方文档，我没有详细说。</p>\n","title":"如何写 Webpack 配置文件","tags":["webpack"],"slug":"how-to-config-webpack","createDate":1492012800000,"id":"how-to-config-webpack","thumb":"https://images.unsplash.com/photo-1581200755095-81990f2e27fd?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>最近要搭建新的博客，之前写博客图片一般是保存到本地，或者上传到微博，微博会有水印啊，所以打算折腾一下七牛了，采用qrsync命令行同步工具打造一个图床。</p>\n","content":"<p>最近要搭建新的博客，之前写博客图片一般是保存到本地，或者上传到微博，微博会有水印啊，所以打算折腾一下七牛了，采用qrsync命令行同步工具打造一个图床。</p>\n<h3 id=\"准备工作\">准备工作</h3>\n<ol>\n<li>首先你要有一个七牛账户啊</li>\n<li>下载<a href=\"http://docs.qiniu.com/tools/v6/qrsync.html\">qrync命令行同步工具</a></li>\n</ol>\n<h3 id=\"配置-qrync\">配置 qrync</h3>\n<p>要做的是把下载的zip文件夹里的qrync移到<code>/usr/local/bin</code> 目录下，方法很多。</p>\n<p>例如命令行：</p>\n<pre><code class=\"language-bash\">cp <span class=\"hljs-regexp\">/Users/</span>zhangruiwu<span class=\"hljs-regexp\">/Downloads/</span>qiniu-devtools-darwin_amd64-v2.<span class=\"hljs-number\">6.20131211</span><span class=\"hljs-regexp\">/qrsync /u</span>sr<span class=\"hljs-regexp\">/local/</span>bin</code></pre>\n<p>这样在你的shell里就可以用qrsync这个命令了</p>\n<h3 id=\"配置-confjson\">配置 conf.json</h3>\n<p>先建立一个配置文件，比如叫 conf.json，内容大体如下：</p>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attr\">\"access_key\"</span>: <span class=\"hljs-string\">\"Please apply your access key here\"</span>,\n    <span class=\"hljs-attr\">\"secret_key\"</span>: <span class=\"hljs-string\">\"Dont send your secret key to anyone\"</span>,\n    <span class=\"hljs-attr\">\"bucket\"</span>: <span class=\"hljs-string\">\"Bucket name on qiniu resource storage\"</span>,\n    <span class=\"hljs-attr\">\"sync_dir\"</span>: <span class=\"hljs-string\">\"Local directory to upload\"</span>,\n    <span class=\"hljs-attr\">\"async_ops\"</span>: <span class=\"hljs-string\">\"fop1;fop2;fopN\"</span>,\n    <span class=\"hljs-attr\">\"debug_level\"</span>: <span class=\"hljs-number\">1</span>\n}</code></pre>\n<p>其中，<code>access_key</code> 和 <code>secret_key</code>在七牛云存储平台上申请，登录七牛开发者自助平台，查看 <code>Access Key</code> 和 <code>Secret Key</code></p>\n<p><code>bucket</code> 是你在七牛云存储上希望保存数据的 <code>Bucket</code>名（类似于数据库的表），这个自己选择一个合适的就可以，要求是只能由字母、数字、下划线等组成。</p>\n<p><code>sync_dir</code> 是本地需要上传的目录，绝对路径完整表示。这个目录中的所有内容会被同步到指定的 <code>bucket</code>上。注意：Windows 平台上路径的表示格式为：<code>盘符:/目录</code>，比如 E 盘下的目录 data 表示为：<code>e:/data</code> 。</p>\n<p><code>async_ops</code> 是设置上传预转参数，一般上传的音视频如果需要转码，可以使用该参数。</p>\n<p><code>ignore_patterns</code>参数是一个关于忽略文件或目录的匹配字符串数组，匹配规则类似.gitignore.\n具体参考<a href=\"http://docs.qiniu.com/tools/v6/qrsync.html\">官方文档</a></p>\n<h3 id=\"使用命令行进行同步\">使用命令行进行同步</h3>\n<p>命令行输入：</p>\n<pre><code class=\"language-bash\">qrsync <span class=\"hljs-string\">/qnblog.json</span></code></pre>\n<p>出现如下结果则是上传成功：\n<img src=\"https://xiao555.netlify.com/qntc-1.png\" alt=\"\"></p>\n<p>而图床的外链前缀是固定的，所以命名好图片后，直接在固定前缀后面加上文件名就行了，比较方便：</p>\n<p><img src=\"https://xiao555.netlify.com/qntc-2.png\" alt=\"\"></p>\n<p>参考资料：<a href=\"http://docs.qiniu.com/tools/v6/qrsync.html\">qrsync 命令行同步工具 </a></p>\n","title":"搭建七牛图床","tags":["七牛","图床"],"slug":"build-a-chart-bed-with-qiniu","createDate":1484582400000,"id":"build-a-chart-bed-with-qiniu","thumb":"https://images.unsplash.com/photo-1582617730166-e55e5f82780b?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>最近做大作业需要研究一下Node.js，需要了解node与mongoDB的链接，前后端的通信，后端的逻辑结构等，怎么快速上手呢？那就做个聊天室吧。</p>\n","content":"<p>最近做大作业需要研究一下Node.js，需要了解node与mongoDB的链接，前后端的通信，后端的逻辑结构等，怎么快速上手呢？那就做个聊天室吧。</p>\n<h2 id=\"安装nodejs和mongodb\">安装Node.JS和MongoDB</h2>\n<p>Node.js就不多说了，MongoDB可以看我上一篇<a href=\"http://www.xiao555.club/2016/04/30/win7%20%E5%AE%89%E8%A3%85MongoDB/\">博客</a></p>\n<h2 id=\"构建express项目\">构建Express项目</h2>\n<p>找一个合适的地方：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attr\">mkdir</span> <span class=\"hljs-string\">chatroom</span>\n\n<span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">chatroom</span>\n\n<span class=\"hljs-attr\">npm</span> <span class=\"hljs-string\">install express</span>\n\n<span class=\"hljs-attr\">express</span> <span class=\"hljs-string\">-e  //-e 是用ejs作为模板引擎</span>\n\n<span class=\"hljs-attr\">npm</span> <span class=\"hljs-string\">install //安装依赖，目录在package.json中</span>\n</code></pre>\n<p>这样就创建好了，结构如下：</p>\n<pre><code class=\"language-bash\">-<span class=\"ruby\"> chatroom\n</span>\n    -<span class=\"ruby\"> bin\n</span>        -<span class=\"ruby\"> www           /<span class=\"hljs-regexp\">/配置端口启动文件\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> node_modules        /</span><span class=\"hljs-regexp\">/下载的模块\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> express\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> public            /</span><span class=\"hljs-regexp\">/静态资源\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> images\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> javascripts\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> stylesheets\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> routes            /</span><span class=\"hljs-regexp\">/后端逻辑、路由\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> index.js\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> users.js\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> views                /</span><span class=\"hljs-regexp\">/视图\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> error.ejs\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> index.ejs\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> app.js             /</span><span class=\"hljs-regexp\">/入口文件，相当于main();\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> package.json         /</span><span class=\"hljs-regexp\">/配置信息</span></span></code></pre>\n<p>我按照个人习惯做一些调整</p>\n<pre><code>-<span class=\"ruby\"> chatroom\n</span>\n    -<span class=\"ruby\"> node_modules        /<span class=\"hljs-regexp\">/下载的模块\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> express\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> public            /</span><span class=\"hljs-regexp\">/静态资源\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> img\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> js\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> css\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> routes            /</span><span class=\"hljs-regexp\">/后端逻辑、路由\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> index.js\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> users.js\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> views                /</span><span class=\"hljs-regexp\">/视图\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> error.ejs\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> index.ejs\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> app.js             /</span><span class=\"hljs-regexp\">/入口文件，相当于main();\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> package.json         /</span><span class=\"hljs-regexp\">/配置信息</span></span></code></pre><p>我把public目录下目录改一下名称，www文件删了，用app.js作为启动文件，就需要修改一下app.js：</p>\n<pre><code class=\"language-javascript\">var <span class=\"hljs-keyword\">debug</span> = require(<span class=\"hljs-string\">'debug'</span>)(<span class=\"hljs-string\">'chat'</span>);\n//var users = require(<span class=\"hljs-string\">'./routes/users'</span>);    //单页面不需要这个\n\napp.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">'port'</span>, process.env.PORT || <span class=\"hljs-number\">3000</span>);\n\nvar <span class=\"hljs-keyword\">server</span> = app.<span class=\"hljs-keyword\">listen</span>(app.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-string\">'port'</span>), <span class=\"hljs-keyword\">function</span>(){\n  <span class=\"hljs-keyword\">debug</span>(<span class=\"hljs-string\">'Express server listening on port '</span> + <span class=\"hljs-keyword\">server</span>.address().port);\n})\n\n//app.use(<span class=\"hljs-string\">'/users'</span>, users);</code></pre>\n<p>增加，注释这些后，运行 <code>DEBUG=chatroom &amp; node app.js</code> 或 <code>node app.js</code> ,然后浏览器打开<a href=\"127.0.0.1:3000\">127.0.0.1:3000</a>,如下图所示，就说明配置好了</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f3fsnv448uj311y0kg0vk.jpg\" alt=\"\"></p>\n<h2 id=\"实现前端页面\">实现前端页面</h2>\n<p>这个没什么好说的，修改views目录下的index.ejs文件，效果如下：</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f3ftv2386qj311y0kg0wl.jpg\" alt=\"\"></p>\n<h2 id=\"数据库设计\">数据库设计</h2>\n<p>注意使用数据库前一定要先开启mongodb服务！</p>\n<p>安装 mongodb 和 mongoose 模块：</p>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-keyword\">install</span> mongodb mongoose</code></pre>\n<p>在主目录下新建chat_server.js :</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\n<span class=\"hljs-comment\">//连接数据库</span>\n<span class=\"hljs-keyword\">var</span> db = mongoose.createConnection(<span class=\"hljs-string\">'localhost'</span>,<span class=\"hljs-string\">'chatroom'</span>);\ndb.on(<span class=\"hljs-string\">'error'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.error(err);\n});\n<span class=\"hljs-keyword\">var</span> Schema = mongoose.Schema;\n\n<span class=\"hljs-comment\">//聊天记录表</span>\n<span class=\"hljs-keyword\">var</span> ChatSchema = <span class=\"hljs-keyword\">new</span> Schema({\n    <span class=\"hljs-attr\">nickname</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">time</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">String</span>\n});\n<span class=\"hljs-keyword\">var</span> ChatModel = db.model(<span class=\"hljs-string\">'chats'</span>,ChatSchema);\n\n\n<span class=\"hljs-comment\">// 这里的listen函数在 app.js 文件中被调用</span>\nexports.listen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_server</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> io.listen(_server);\n}</code></pre>\n<p>在app.js中增加：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">require</span>(<span class=\"hljs-string\">'./chat\\_server'</span>)<span class=\"hljs-selector-class\">.listen</span>(server);</code></pre>\n<h2 id=\"前后端通信socketio\">前后端通信Socket.io</h2>\n<p>借用这篇<a href=\"http://my.oschina.net/voler/blog/626226?fromerr=UumMewCx\">博客</a>里讲的介绍一下socket.io：</p>\n<p>首先先简单讲解下Socket.io的原理. 操作系统有一个非常伟大的设计就是轮询机制,而Node.js中的callback机制正是基于此机制:</p>\n<p><img src=\"https://xiao555.netlify.com/084929_dx2L_1017135.png\" alt=\"\"></p>\n<p>JS的异步编程就是这么来的.但是对于类似聊天这种应用,使用轮询机制明显不合理.轮询机制在于你触发了一个事件后异步处理,但这里异步本身就是硬伤,毕竟聊天要实时的.</p>\n<p>而Node.js中有另外一种伟大的模型: 观察者模式. 即我就一直监听,监听到的某个事件后,执行相应的处理函数.</p>\n<p><img src=\"https://xiao555.netlify.com/084956_5TlW_1017135.png\" alt=\"\"></p>\n<h3 id=\"举个栗子\">举个栗子</h3>\n<p>在chat_server.js中添加：</p>\n<pre><code class=\"language-javascript\">var io = require('socket.io')<span class=\"hljs-literal\">()</span>;\nvar xssEscape = require('xss-escape');\n\nvar nickname_list = <span class=\"hljs-literal\">[]</span>;\n\n<span class=\"hljs-comment\">// 检查是昵称是否已经存在</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-constructor\">HasNickname(<span class=\"hljs-params\">_nickname</span>)</span>{\n    for(var i=<span class=\"hljs-number\">0</span>; i&lt;nickname_list.length; i++){\n        <span class=\"hljs-keyword\">if</span>(nickname_list<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span><span class=\"hljs-operator\"> == </span>_nickname){\n            return <span class=\"hljs-literal\">true</span>;\n        }\n    }\n};\n\n<span class=\"hljs-comment\">// 删除昵称</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-constructor\">RemoveNickname(<span class=\"hljs-params\">_nickname</span>)</span>{\n    for(var i=<span class=\"hljs-number\">0</span>; i&lt; nickname_list.length; i++){\n        <span class=\"hljs-keyword\">if</span>(nickname_list<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span><span class=\"hljs-operator\"> == </span>_nickname){\n            nickname_list.splice(i, <span class=\"hljs-number\">1</span>);\n        }\n    }\n}\n\nio.on('connection', <span class=\"hljs-keyword\">function</span>(_socket){\n    console.log(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>id + ':connection');\n\n    <span class=\"hljs-comment\">// 向当前用户发送命令和消息</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('user_list', nickname_list);\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('need_nickname');\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('server_message<span class=\"hljs-character\">','</span>欢迎来到聊天室 :)');\n\n    <span class=\"hljs-comment\">// 监听当前用户的请求和数据</span>\n\n    <span class=\"hljs-comment\">// 离开</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>on('disconnect', <span class=\"hljs-keyword\">function</span><span class=\"hljs-literal\">()</span>{\n        console.log(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>id + ':disconnect');\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname != null<span class=\"hljs-operator\"> &amp;&amp; </span><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname != <span class=\"hljs-string\">\"\"</span>){\n            <span class=\"hljs-comment\">// 广播 用户退出</span>\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>broadcast.emit('user_quit', <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname);\n            <span class=\"hljs-constructor\">RemoveNickname(<span class=\"hljs-params\">_socket</span>.<span class=\"hljs-params\">nickname</span>)</span>;\n        }\n    });\n\n    <span class=\"hljs-comment\">// 添加 和 修改 昵称</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>on('change_nickname', <span class=\"hljs-keyword\">function</span>(_nickname, clr){\n        console.log(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>id + ': change<span class=\"hljs-constructor\">_nickname('+<span class=\"hljs-params\">_nickname</span>+')</span>');\n\n        _nickname = xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">_nickname</span>.<span class=\"hljs-params\">trim</span>()</span>);\n\n        <span class=\"hljs-comment\">// 半角替换为tt，模拟为全角字符判断长度</span>\n        var name_len = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_nickname</span>.</span></span>replace(/<span class=\"hljs-literal\">[^\\<span class=\"hljs-identifier\">u0000</span>-\\<span class=\"hljs-identifier\">u00ff</span>]</span>/g, <span class=\"hljs-string\">\"tt\"</span>).length;\n\n        <span class=\"hljs-comment\">// 字符长度必须在4到16个字符之间</span>\n        <span class=\"hljs-keyword\">if</span>(name_len &lt; <span class=\"hljs-number\">4</span><span class=\"hljs-operator\"> || </span>name_len &gt; <span class=\"hljs-number\">16</span>){\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('change_nickname_error', '请填写正确的用户昵称，应在<span class=\"hljs-number\">4</span>到<span class=\"hljs-number\">16</span>个字符之间。')\n        }\n\n        <span class=\"hljs-comment\">// 昵称重复</span>\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname<span class=\"hljs-operator\"> == </span>_nickname){\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('change_nickname_error', '你本来就叫这个名字。')\n        }\n\n        <span class=\"hljs-comment\">// 昵称已经被占用</span>\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-constructor\">HasNickname(<span class=\"hljs-params\">_nickname</span>)</span>){\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('change_nickname_error', '此昵称已经被占用。')\n        }\n\n        var old_name = '';\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname != ''<span class=\"hljs-operator\"> &amp;&amp; </span><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname != null){\n            old_name = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname;\n            <span class=\"hljs-constructor\">RemoveNickname(<span class=\"hljs-params\">old_name</span>)</span>;\n        }\n\n        nickname_list.push(_nickname);\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname = _nickname;\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>color = clr;\n\n        console.log(nickname_list);\n\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('change_nickname_done', old_name, _nickname, clr);\n\n        <span class=\"hljs-keyword\">if</span>(old_name<span class=\"hljs-operator\"> == </span>''){\n            <span class=\"hljs-comment\">// 广播 用户加入</span>\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>broadcast.emit('user_join', _nickname);\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-comment\">// 广播 用户改名</span>\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>broadcast.emit('user_change_nickname', old_name, _nickname);\n        }\n    });\n\n    <span class=\"hljs-comment\">// 说话</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>on('say', <span class=\"hljs-keyword\">function</span>(_time, _content){\n        <span class=\"hljs-keyword\">if</span>(''<span class=\"hljs-operator\"> == </span><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname<span class=\"hljs-operator\"> || </span>null<span class=\"hljs-operator\"> == </span><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname){\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('need_nickname');\n        }\n\n        _content = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_content</span>.</span></span>trim<span class=\"hljs-literal\">()</span>;\n        var chatinfo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ChatModel()</span>;\n        chatinfo.nickname = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname;\n        chatinfo.time = _time;\n        chatinfo.content = _content;\n        chatinfo.save(<span class=\"hljs-keyword\">function</span>(err) {\n            <span class=\"hljs-keyword\">if</span> (err) throw err;\n        });\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ChatModel</span>.</span></span>find({nickname: <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname},<span class=\"hljs-keyword\">function</span>(err,data) {\n            <span class=\"hljs-keyword\">if</span> (err) {\n             console.log('存储失败' + err);\n             return;\n             } <span class=\"hljs-keyword\">else</span> {\n             console.log('存储成功：' + data);\n             }\n        });\n        console.log(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname + ': say('+_content+<span class=\"hljs-character\">')'</span>);\n        <span class=\"hljs-comment\">// 广播 用户新消息</span>\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>broadcast.emit('user_say', <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname, xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">_content</span>)</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>color);\n        return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('say_done', <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname, xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">_content</span>)</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>color);\n    });\n\n    <span class=\"hljs-comment\">//显示历史记录</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>on('show_history',<span class=\"hljs-keyword\">function</span>(clr){\n        console.log('ok');\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ChatModel</span>.</span></span>find({},<span class=\"hljs-keyword\">function</span>(err,data) {\n            <span class=\"hljs-keyword\">if</span> (err) {\n             console.error(err);\n             return;\n             } <span class=\"hljs-keyword\">else</span> {\n                 console.log('data = ' + data);\n                 console.log(data<span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.nickname);\n                 for(var i = <span class=\"hljs-number\">0</span>;i &lt; data.length;i++){\n                    console.log(data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>.nickname, data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>.time, xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">data</span>[<span class=\"hljs-params\">i</span>].<span class=\"hljs-params\">content</span>)</span>, clr);\n                    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('return_history', data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>.nickname, data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>.time, xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">data</span>[<span class=\"hljs-params\">i</span>].<span class=\"hljs-params\">content</span>)</span>, clr);\n                }\n             }\n        });\n    });\n})</code></pre>\n<p>这是后端的响应机制，前端逻辑在public目录下js中的index.js中,这里就简单举个例子，显示历史消息：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> chat_Utils,     <span class=\"hljs-comment\">//聊天室 工具类</span>\n    chat_UI,         <span class=\"hljs-comment\">//聊天室 界面逻辑</span>\n    chat_Socket;     <span class=\"hljs-comment\">//聊天室 数据逻辑</span>\n\n<span class=\"hljs-comment\">// 与后台服务器建立websocket连接</span>\n<span class=\"hljs-keyword\">var</span> chat_server = <span class=\"hljs-string\">\"http://\"</span> + location.hostname + <span class=\"hljs-string\">':3000'</span>;\n<span class=\"hljs-keyword\">var</span> socket = io.connect(chat_server);\n\n\nchat_UI = {\n    <span class=\"hljs-attr\">init</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">this</span>.historyShow();        <span class=\"hljs-comment\">//点击显示历史消息事件</span>\n    },\n    <span class=\"hljs-attr\">historyShow</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n            <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>;\n            $(<span class=\"hljs-string\">\"#showHistory\"</span>).on(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                <span class=\"hljs-keyword\">if</span>($(<span class=\"hljs-string\">'#history-modal'</span>).css(<span class=\"hljs-string\">'display'</span>) == <span class=\"hljs-string\">'none'</span>) {\n                    $(<span class=\"hljs-string\">'.history-list-body'</span>).empty();\n                }\n                $(<span class=\"hljs-string\">\"#history-modal\"</span>).modal(<span class=\"hljs-string\">'show'</span>);\n                chat_Socket.showHistory(chat_Utils.getUserColor());\n            })\n    },\n    <span class=\"hljs-attr\">chatBodyToBottom</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">var</span> chat_body = $(<span class=\"hljs-string\">'.chat-body'</span>);\n        <span class=\"hljs-keyword\">var</span> height = chat_body.prop(<span class=\"hljs-string\">'scrollHeight'</span>);\n        chat_body.prop(<span class=\"hljs-string\">'scrollTop'</span>, height);\n    },\n    <span class=\"hljs-attr\">addHistoryMessage</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_time, _content, _name, clr</span>)</span>{\n        <span class=\"hljs-keyword\">var</span> history_list = $(<span class=\"hljs-string\">'.history-list-body'</span>);\n        _content = QxEmotion.Parse(_content);\n        <span class=\"hljs-keyword\">var</span> msgAlignCls = _name ==$(<span class=\"hljs-string\">'#my-nickname'</span>).text() ? <span class=\"hljs-string\">'msg-right'</span>:<span class=\"hljs-string\">'msg-left'</span>;\n        history_list.append(\n            <span class=\"hljs-string\">'&lt;div class=\"msg-item clearfix '</span>+msgAlignCls+<span class=\"hljs-string\">'\"&gt;\\\n                    &lt;div class=\"msg-avatar\" style=\"background-color:'</span>+clr+<span class=\"hljs-string\">';\"&gt;&lt;i class=\"glyphicon glyphicon-user\"&gt;&lt;/i&gt;&lt;/div&gt;\\\n                    &lt;div class=\"msg-con-box\" style=\"background-color:'</span>+clr+<span class=\"hljs-string\">';\"&gt;\\\n                        &lt;p class=\"con\"&gt;'</span>+_content+<span class=\"hljs-string\">'&lt;/p&gt;\\\n                        &lt;time class=\"time\"&gt;'</span>+_time+<span class=\"hljs-string\">'&lt;/time&gt;\\\n                    &lt;/div&gt;\\\n                &lt;/div&gt;'</span>\n            );\n        <span class=\"hljs-keyword\">this</span>.chatBodyToBottom();\n\n    },\n};\n\nchat_Socket = {\n    <span class=\"hljs-attr\">init</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">this</span>.chatHistoryEv();<span class=\"hljs-comment\">//监听后端 获取历史消息</span>\n    },\n    <span class=\"hljs-attr\">showHistory</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">clr</span>)</span>{\n        socket.emit(<span class=\"hljs-string\">'show_history'</span>,clr);\n    },\n    <span class=\"hljs-attr\">chatHistoryEv</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        socket.on(<span class=\"hljs-string\">'return_history'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_nickname, _time, _content, clr</span>) </span>{\n            <span class=\"hljs-built_in\">console</span>.log(_nickname, _time, _content, clr);\n            chat_UI.addHistoryMessage(_time, _content, _nickname, clr);\n        });\n    },\n}\n\nchat_UI.init();\nchat_Socket.init();</code></pre>\n<p>我们过一下思路，首先当用户点击显示历史消息时，调用chat_UI.historyShow函数，先清空一下历史记录列表，然后显示历史记录弹窗，调用chat_Socket.showHistory函数：</p>\n<pre><code class=\"language-javascript\">historyShow:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n            <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>;\n            $(<span class=\"hljs-string\">\"#showHistory\"</span>).on(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                <span class=\"hljs-keyword\">if</span>($(<span class=\"hljs-string\">'#history-modal'</span>).css(<span class=\"hljs-string\">'display'</span>) == <span class=\"hljs-string\">'none'</span>) {\n                    $(<span class=\"hljs-string\">'.history-list-body'</span>).empty();\n                }\n                $(<span class=\"hljs-string\">\"#history-modal\"</span>).modal(<span class=\"hljs-string\">'show'</span>);\n                chat_Socket.showHistory(chat_Utils.getUserColor());\n            })\n    },</code></pre>\n<p>chat_Socket.showHistory这个函数调用socket.emit发射show_history事件：</p>\n<pre><code class=\"language-javascript\">showHistory:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(clr)</span></span>{\n        socket.emit(<span class=\"hljs-string\">'show_history'</span>,clr);\n    },</code></pre>\n<p>后端chat_server.js 中用socket.on(‘show_history’)捕获了这一事件,从数据库中获取数据发送return_history事件到前端：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">//显示历史记录</span>\n    _socket.on(<span class=\"hljs-string\">'show_history'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">clr</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'ok'</span>);\n        ChatModel.find({},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>) </span>{\n            <span class=\"hljs-keyword\">if</span> (err) {\n             <span class=\"hljs-built_in\">console</span>.error(err);\n             <span class=\"hljs-keyword\">return</span>;\n             } <span class=\"hljs-keyword\">else</span> {\n                 <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i &lt; data.length;i++){\n                    _socket.emit(<span class=\"hljs-string\">'return_history'</span>, data[i].nickname, data[i].time, xssEscape(data[i].content), clr);\n                }\n             }\n        });\n    });</code></pre>\n<p>前端index.js 中 chat_Socket.chatHistoryEv()函数捕获return_history事件，调用chat_UI.addHistoryMessage添加到历史记录列表中：</p>\n<pre><code class=\"language-javascript\">chatHistoryEv:function(){\n        socket.on(<span class=\"hljs-string\">'return_history'</span>,function(<span class=\"hljs-variable\">_nickname</span>, <span class=\"hljs-variable\">_time</span>, <span class=\"hljs-variable\">_content</span>, clr) {\n            console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-variable\">_nickname</span>, <span class=\"hljs-variable\">_time</span>, <span class=\"hljs-variable\">_content</span>, clr);\n            chat_UI.addHistoryMessage(<span class=\"hljs-variable\">_time</span>, <span class=\"hljs-variable\">_content</span>, <span class=\"hljs-variable\">_nickname</span>, clr);\n        });\n    },</code></pre>\n<p>整个显示历史记录的过程就结束了。</p>\n<h2 id=\"数据库的操作\">数据库的操作</h2>\n<p>前面我们已经设计好了数据库：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\n<span class=\"hljs-comment\">//连接数据库</span>\n<span class=\"hljs-keyword\">var</span> db = mongoose.createConnection(<span class=\"hljs-string\">'localhost'</span>,<span class=\"hljs-string\">'chatroom'</span>);\ndb.on(<span class=\"hljs-string\">'error'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.error(err);\n});\n<span class=\"hljs-keyword\">var</span> Schema = mongoose.Schema;\n\n<span class=\"hljs-comment\">//聊天记录表</span>\n<span class=\"hljs-keyword\">var</span> ChatSchema = <span class=\"hljs-keyword\">new</span> Schema({\n    <span class=\"hljs-attr\">nickname</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">time</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">String</span>\n});\n<span class=\"hljs-keyword\">var</span> ChatModel = db.model(<span class=\"hljs-string\">'chats'</span>,ChatSchema);</code></pre>\n<p>数据库的设计包括Schema 模式(数据记录的格式)、Model 编译模型、Documents 文档实例化。上面的代码中我们连接了chatroom数据库，设计了ChatSchema模式，编译了ChatModel 模型，编译好模型后我们创建一条新的记录只需要new一下就行。</p>\n<h3 id=\"保存新数据\">保存新数据</h3>\n<pre><code class=\"language-javascript\">var chatinfo = new ChatModel()<span class=\"hljs-comment\">;</span>\n        chatinfo.nickname = _socket.nickname<span class=\"hljs-comment\">;</span>\n        chatinfo.time = _time<span class=\"hljs-comment\">;</span>\n        chatinfo.content = _content<span class=\"hljs-comment\">;</span>\n        chatinfo.save(function(err) {\n            if (err) throw err<span class=\"hljs-comment\">;</span>\n        })<span class=\"hljs-comment\">;</span></code></pre>\n<h3 id=\"查询数据\">查询数据</h3>\n<pre><code class=\"language-javascript\">ChatModel.<span class=\"hljs-built_in\">find</span>({nickname: _socket.nickname},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err,data)</span></span> {\n            <span class=\"hljs-keyword\">if</span> (err) {\n             console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'存储失败'</span> + err);\n             <span class=\"hljs-keyword\">return</span>;\n             } <span class=\"hljs-keyword\">else</span> {\n             console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'存储成功：'</span> + data);\n             }\n        });</code></pre>\n<p>除了.find() 查找所有符合的数据，还有.findOne() 查找一条数据，第二个参数中的data就是返回的数据。</p>\n<p>至此基本的逻辑和操作我们都了解了，接下来就是Codeing的时间了！</p>\n<h2 id=\"部署到vps上\">部署到vps上</h2>\n<p>将项目搬到/var/www/chatroom/下，这里我是用git传到github上然后git clone过去的。</p>\n<h3 id=\"安装mongodb服务\">安装mongodb服务</h3>\n<p>由于我的vps是32位的CentOS，一直很头痛这个32位还有CentOS,但是里面又配置了一些梯子，不想折腾就没换，连Docker也用不了。。。那怎么安装mongodb呢？</p>\n<p>参考：<a href=\"http://www.thinksaas.cn/topics/0/424/424694.html\">CentOS 6.5系统中使用yum安装MongoDB 2.6 教程</a></p>\n<h4 id=\"创建mongodbrepo文件\">创建mongodb.repo文件</h4>\n<p>在/etc/yum.repos.d/目录下创建文件mongodb.repo，它包含MongoDB仓库的配置信息，内容如下：</p>\n<pre><code><span class=\"hljs-section\">[mongodb]</span>\n<span class=\"hljs-attr\">name</span>=MongoDB Repository\n<span class=\"hljs-attr\">baseurl</span>=http://downloads-distro.mongodb.org/repo/redhat/os/i686/\n<span class=\"hljs-attr\">gpgcheck</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-number\">1</span></code></pre><h4 id=\"执行安装命令\">执行安装命令</h4>\n<pre><code>sudo yum <span class=\"hljs-keyword\">install</span> mongodb-org</code></pre><h4 id=\"启动mongodb\">启动MongoDB</h4>\n<pre><code>sudo<span class=\"hljs-built_in\"> service </span>mongod start</code></pre><h3 id=\"运行appjs\">运行app.js</h3>\n<p>切换到项目目录，为了能一直自行程序，我们用forever模块：</p>\n<pre><code>sudo npm -g install <span class=\"hljs-keyword\">forever</span> <span class=\"hljs-comment\"> //安装</span>\n\n<span class=\"hljs-keyword\">forever</span> <span class=\"hljs-built_in\">start</span> app.js         <span class=\"hljs-comment\"> //开启进程</span>\n\n<span class=\"hljs-keyword\">forever</span> list                 <span class=\"hljs-comment\"> //查看所有进程</span>\n\n<span class=\"hljs-keyword\">forever</span> stopall                <span class=\"hljs-comment\"> //关闭所有进程</span>\n</code></pre><p>现在在你服务器的3000端口我们的聊天室已经完美运行了！</p>\n","title":"用Express + Socket.io + MongoDB实现简易聊天室","tags":["用Express","Socket.io","MongoDB"],"slug":"simple-chat-room-with-express-%2B-socket.io-%2B-mongodb","createDate":1462086345088,"id":"simple-chat-room-with-express-%2B-socket.io-%2B-mongodb","thumb":"https://images.unsplash.com/photo-1582020738577-2e7a48043902?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>最近玩node需要用到MongoDB数据库，试过各种方法终于配置好了，记录下来防坑。</p>\n","content":"<p>最近玩node需要用到MongoDB数据库，试过各种方法终于配置好了，记录下来防坑。</p>\n<h2 id=\"下载\">下载</h2>\n<p>官网地址：<a href=\"http://www.mongodb.org/downloads\">http://www.mongodb.org/downloads</a></p>\n<h2 id=\"安装\">安装</h2>\n<p>无论是压缩包还是安装程序，都可以放在你想放的位置，然后在目录下建立DB目录存储数据库和Log目录记录日志</p>\n<pre><code><span class=\"hljs-bullet\">- </span>bin\n<span class=\"hljs-bullet\">- </span>DB\n<span class=\"hljs-bullet\">- </span>Log\n...</code></pre><h2 id=\"安装成系统服务\">安装成系统服务</h2>\n<p>在目录下建立mongo.conf和mongo.cfg</p>\n<p>mongo.conf:</p>\n<pre><code><span class=\"hljs-symbol\">storage:</span>\n<span class=\"hljs-symbol\">   dbPath:</span> <span class=\"hljs-string\">\"C:\\MongoDB\\DB\"</span></code></pre><p>mongo.cfg:</p>\n<pre><code>logpath=C:<span class=\"hljs-symbol\">\\M</span>ongoDB<span class=\"hljs-symbol\">\\L</span>og<span class=\"hljs-symbol\">\\m</span>ongo.log</code></pre><p>然后cmd切换到bin目录下，运行：</p>\n<pre><code>mongod.exe <span class=\"hljs-params\">--config</span> <span class=\"hljs-string\">\"C:\\MongoDB\\mongo.cfg\"</span> <span class=\"hljs-params\">--install</span></code></pre><p>这样就安装好了，要启动mongodb服务只需要输入：</p>\n<pre><code><span class=\"hljs-built_in\">net</span> <span class=\"hljs-built_in\">start</span> mongodb</code></pre><p>会提示MongoDB 服务已经启动成功。</p>\n<p>然后再输入<code>mongo</code>即可进入shell环境。</p>\n","title":"win7 安装 mongodb","tags":["MongoDB","win7"],"slug":"install-mongodb-on-win7","createDate":1461998526384,"id":"install-mongodb-on-win7","thumb":"https://images.unsplash.com/flagged/photo-1580232629990-f94c97e83bf2?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>寒假将过，感觉不能荒废了，要找点事做，于是整理了一下这个。</p>\n<p>额，先<a href=\"http://weibo.com/p/1001593933059845084440?from=singleweibo&amp;mod=recommand_article&amp;sudaref=www.baidu.com\">介绍一下freecodecamp</a>吧：</p>\n<p>FreeCodeCamp 是一个基于 MEAN 架构的开源社区，它可以帮助人们学习编程以及构建他们的非盈利项目，内容以前端为主。</p>\n","content":"<p>寒假将过，感觉不能荒废了，要找点事做，于是整理了一下这个。</p>\n<p>额，先<a href=\"http://weibo.com/p/1001593933059845084440?from=singleweibo&amp;mod=recommand_article&amp;sudaref=www.baidu.com\">介绍一下freecodecamp</a>吧：</p>\n<p>FreeCodeCamp 是一个基于 MEAN 架构的开源社区，它可以帮助人们学习编程以及构建他们的非盈利项目，内容以前端为主。</p>\n<p>在GitHub上，FreeCodeCamp拥有超过5万Star， 而且还在持续增长之中，对于大多数项目而言，增加一个Star也不容易。2015年，在《软件开发时代》杂志(SD Times)总结的GitHub优秀项目中，FreeCodeCamp名列前十。目前，该社区有7159次代码提交和250个代码贡献者。</p>\n<p>如此神奇的一个开源项目，到底有哪些优势呢？</p>\n<p>1.学习编程技能，比如HTML5、CSS3、JavaScript、数据库、Git、Node.js、Angular.js和敏捷开发。</p>\n<p>3.从事自由和开源项目。</p>\n<p>5.获得实时帮助。</p>\n<p>下面进入正题。</p>\n<h2 id=\"html5-and-css\">HTML5 and CSS</h2>\n<h3 id=\"1-say-hello-to-html-elements\">1. Say Hello to HTML Elements</h3>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1\\</span>&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1\\</span>&gt;</span></code></pre><h3 id=\"2-headline-with-the-h2-element\">2. Headline with the h2 Element</h3>\n<p>添加一个h2元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1\\</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1\\</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2\\</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2\\</span>&gt;</span></code></pre><h3 id=\"3-inform-with-the-paragraph-element\">3. Inform with the Paragraph Element</h3>\n<p>添加一个p元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1\\</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1\\</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2\\</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2\\</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p\\</span>&gt;</span>Hello Paragraph<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p\\</span>&gt;</span></code></pre><h3 id=\"4-uncomment-html\">4. Uncomment HTML</h3>\n<p>取消注释：</p>\n<pre><code><span class=\"hljs-comment\">&lt;!--\n&lt;h1&gt;Hello World&lt;/h1&gt;\n\n&lt;h2&gt;CatPhotoApp&lt;/h2&gt;\n\n&lt;p&gt;Hello Paragraph&lt;/p&gt;\n\\--&gt;</span></code></pre><pre><code>去掉`<span class=\"hljs-comment\">&lt;!--`和`--&gt;</span>`即可。</code></pre><h3 id=\"5-comment-out-html\">5. Comment out HTML</h3>\n<p>注释h1和p：</p>\n<pre><code><span class=\"hljs-comment\">&lt;!--\n&lt;h1&gt;Hello World&lt;/h1&gt;\n\\--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2\\</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2\\</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--\n&lt;p&gt;Hello Paragraph&lt;/p&gt;\n\\--&gt;</span></code></pre><h3 id=\"6-fill-in-the-blank-with-placeholder-text\">6. Fill in the Blank with Placeholder Text</h3>\n<p>把那段红色段落复制粘贴到p元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p\\</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p\\</span>&gt;</span></code></pre><h3 id=\"7-delete-html-elements\">7. Delete HTML Elements</h3>\n<p>删除h1元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"8-change-the-color-of-text\">8. Change the Color of Text</h3>\n<p>啊哈，进入CSS的部分了==\n给h2上红色：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: red\"</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></code></pre><h3 id=\"9-use-css-selectors-to-style-elements\">9. Use CSS Selectors to Style Elements</h3>\n<p>这里删掉h2元素里的style，创建style元素，并为h2设置color属性为blue(然而例子中给的是red，还要自己修改一下- -！)</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">h2</span> {<span class=\"hljs-attribute\">color</span>:blue;}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></code></pre><h3 id=\"10-use-a-css-class-to-style-an-element\">10. Use a CSS Class to Style an Element</h3>\n<p>给h2加个class属性，在style元素里吧h2换成.red-text，blue换成red：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.red-text</span> {\n    <span class=\"hljs-attribute\">color</span>: red;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>`</code></pre><h3 id=\"11-style-multiple-elements-with-a-css-class\">11. Style Multiple Elements with a CSS Class</h3>\n<p>给<code>&lt;p&gt;</code>加一个red-text的class属性</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.red-text</span> {\n    <span class=\"hljs-attribute\">color</span>: red;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"12-change-the-font-size-of-an-element\">12. Change the Font Size of an Element</h3>\n<p>设置字体大小font-size，没啥好说的</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">p</span> {\n    <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">16px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"13-set-the-font-family-of-an-element\">13. Set the Font Family of an Element</h3>\n<p>设置字体font-family：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n\n  <span class=\"hljs-selector-tag\">p</span> {\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n    <span class=\"hljs-attribute\">font-family</span>:Monospace;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"14-import-a-google-font\">14. Import a Google Font</h3>\n<p>设置Lobster字体</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://fonts.googleapis.com/css?family=Lobster\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">h2</span> {\n    <span class=\"hljs-attribute\">font-family</span>:Lobster;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></code></pre><h3 id=\"15-specify-how-fonts-should-degrade\">15. Specify How Fonts Should Degrade</h3>\n<p>设置字体降级,注释掉Google字体的请求，观察变化</p>\n<pre><code><span class=\"hljs-comment\">&lt;!--&lt;link href=\"http://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&gt;--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n\n  <span class=\"hljs-selector-tag\">h2</span> {\n    <span class=\"hljs-attribute\">font-family</span>: Lobster, Monospace;\n  }\n\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></code></pre><h3 id=\"16-add-images-to-your-website\">16. Add Images to your Website</h3>\n<p>添加图片：</p>\n<pre><code>&lt;img <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</code></pre><h3 id=\"17-size-your-images\">17. Size your Images</h3>\n<p>设置图片大小：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.smaller-image</span> {\n    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">100px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"smaller-image\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</span></code></pre><h3 id=\"18-add-borders-around-your-elements\">18. Add Borders Around your Elements</h3>\n<p>添加边线：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.smaller-image</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  }\n  <span class=\"hljs-selector-class\">.thick-green-border</span> {\n    <span class=\"hljs-attribute\">border-color</span>: green;\n    <span class=\"hljs-attribute\">border-width</span>:<span class=\"hljs-number\">10px</span>;\n    <span class=\"hljs-attribute\">border-style</span>:solid;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</span></code></pre><h3 id=\"19-add-rounded-corners-with-a-border-radius\">19. Add Rounded Corners with a Border Radius</h3>\n<p>添加圆角border-radius：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.thick-green-border</span> {\n    <span class=\"hljs-attribute\">border-color</span>: green;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">10px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid;\n    <span class=\"hljs-attribute\">border-radius</span>:<span class=\"hljs-number\">10px</span>;\n  }\n\n  <span class=\"hljs-selector-class\">.smaller-image</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</span></code></pre><h3 id=\"20-make-circular-images-with-a-border-radius\">20. Make Circular Images with a Border Radius</h3>\n<p>制作圆形图片：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.thick-green-border</span> {\n    <span class=\"hljs-attribute\">border-color</span>: green;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">10px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid;\n    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;\n  }\n  <span class=\"hljs-selector-class\">.smaller-image</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</span></code></pre><h3 id=\"21-link-to-external-pages-with-anchor-elements\">21. Link to External Pages with Anchor Elements</h3>\n<p>设置链接：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://freecatphotoapp.com\"</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></code></pre><h3 id=\"22-nest-an-anchor-element-within-a-paragraph\">22. Nest an Anchor Element within a Paragraph</h3>\n<p>使用嵌套：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>View more <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://www.freecatphotoapp.com\"</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"23-make-dead-links-using-the-hash-symbol\">23. Make Dead Links using the Hash Symbol</h3>\n<p>死链接：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Click here for <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre><h3 id=\"24-turn-an-image-into-a-link\"><a href=\"#24-_Turn_an_Image_into_a_Link\" title=\"24. Turn an Image into a Link\"></a>24. Turn an Image into a Link</h3>\n<p>把图片变成链接：</p>\n<pre><code>&lt;a <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;&lt;img <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;&lt;/a&gt;</code></pre><h3 id=\"25-add-alt-text-to-an-image-for-accessibility\">25. Add Alt Text to an Image for Accessibility</h3>\n<p>给图片添加alt属性：</p>\n<pre><code>&lt;a <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;&lt;img <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span> <span class=\"hljs-attribute\">alt</span>=<span class=\"hljs-string\">\"A cute orange cat lying on its back\"</span>&gt;&lt;/a&gt;</code></pre><h3 id=\"26-create-a-bulleted-unordered-list\">26. Create a Bulleted Unordered List</h3>\n<p>创建子弹无序列表(中文是这样吗？好吧是项目符号无序列表),删除两个<code>&lt;p&gt;</code>，列表是三个cat喜欢的东西。</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>milk<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>cheese<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>girl<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></code></pre><h3 id=\"27-create-an-ordered-list\">27. Create an Ordered List</h3>\n<p>创建一个有序列表，内容是三个cat讨厌的东西:</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>boy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>gays<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>html<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span></code></pre><h3 id=\"28-create-a-text-field\">28. Create a Text Field</h3>\n<p>创建一个文本字段：</p>\n<pre><code>&lt;input <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span></span>=<span class=\"hljs-string\">\"text\"</span>&gt;</code></pre><h3 id=\"29-add-placeholder-text-to-a-text-field\">29. Add Placeholder Text to a Text Field</h3>\n<p>添加占位文本到一个文本字段:</p>\n<pre><code>&lt;input <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attribute\">placeholder</span>=<span class=\"hljs-string\">\"cat photo URL\"</span>&gt;</code></pre><h3 id=\"30-create-a-form-element\">30. Create a Form Element</h3>\n<p>创建一个表单元素,嵌套input元素:</p>\n<pre><code>&lt;form <span class=\"hljs-attribute\">action</span>=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;&lt;input <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attribute\">placeholder</span>=<span class=\"hljs-string\">\"cat photo URL\"</span>&gt;&lt;/form&gt;</code></pre><h3 id=\"31-add-a-submit-button-to-a-form\">31. Add a Submit Button to a Form</h3>\n<p>为表单添加提交按钮：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"cat photo URL\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre><h3 id=\"32-use-html5-to-require-a-field\">32. Use HTML5 to Require a Field</h3>\n<p>使用HTML5需要一个字段(required):</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"cat photo URL\"</span> <span class=\"hljs-attr\">required</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre><h3 id=\"33-create-a-set-of-radio-buttons\">33. Create a Set of Radio Buttons</h3>\n<p>设置单选框：</p>\n<pre><code>&lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; indoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;&lt;/<span class=\"hljs-keyword\">br</span>&gt;\n&lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; outdoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;</code></pre><h3 id=\"34-create-a-set-of-checkboxes\">34. Create a Set of Checkboxes</h3>\n<p>设置复选框：</p>\n<pre><code>&lt;<span class=\"hljs-keyword\">form</span> action=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; Indoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; Outdoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"text\"</span> placeholder=<span class=\"hljs-string\">\"cat photo URL\"</span> required&gt;\n  &lt;button <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;Submit&lt;/button&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> name=<span class=\"hljs-string\">\"personality\"</span>&gt; Loving&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> name=<span class=\"hljs-string\">\"personality\"</span>&gt; Loving&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> name=<span class=\"hljs-string\">\"personality\"</span>&gt; Loving&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n&lt;/<span class=\"hljs-keyword\">form</span>&gt;</code></pre><h3 id=\"35-check-radio-buttons-and-checkboxes-by-default\">35. Check Radio Buttons and Checkboxes by Default</h3>\n<p>检查默认单选按钮和复选框(第一个单选和复选添加checked):</p>\n<pre><code>&lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span> checked&gt; Indoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; Outdoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> name=<span class=\"hljs-string\">\"personality\"</span> checked&gt; Loving&lt;/<span class=\"hljs-keyword\">label</span>&gt;</code></pre><h3 id=\"36-nest-many-elements-within-a-single-div-element\">36. Nest Many Elements within a Single Div Element</h3>\n<p>用简单的div元素嵌套一些元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Things cats love:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>cat nip<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>laser pointers<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>lasagna<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Top 3 things cats hate:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>flea treatment<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>thunder<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>other cats<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre><h3 id=\"37-give-a-background-color-to-a-div-element\">37. Give a Background Color to a Div Element</h3>\n<p>为div元素设置背景色：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.gray-background</span>{\n    <span class=\"hljs-attribute\">background-color</span>:gray;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"gray-background\"</span>&gt;</span></code></pre><h3 id=\"38-set-the-id-of-an-element\">38. Set the ID of an Element</h3>\n<p>为元素设置id：</p>\n<pre><code>&lt;form <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">\"cat-photo-form\"</span> <span class=\"hljs-attribute\">action</span>=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;</code></pre><h3 id=\"39-use-an-id-attribute-to-style-an-element\">39. Use an ID Attribute to Style an Element</h3>\n<p>使用ID属性设计元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-id\">#cat-photo-form</span> {\n    <span class=\"hljs-attribute\">background-color</span>:green;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"40-adjusting-the-padding-of-an-element\">40. Adjusting the Padding of an Element</h3>\n<p>设置内边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"41-adjust-the-margin-of-an-element\">41. Adjust the Margin of an Element</h3>\n<p>设置内边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span>;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"43-add-a-negative-margin-to-an-element\">43. Add a Negative Margin to an Element</h3>\n<p>设置负的外边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin</span>: -<span class=\"hljs-number\">15px</span>;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"44-add-different-padding-to-each-side-of-an-element\">44. Add Different Padding to Each Side of an Element</h3>\n<p>为元素的每一边添加不同的内边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">40px</span>;\n    <span class=\"hljs-attribute\">padding-right</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">padding-bottom</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">padding-left</span>: <span class=\"hljs-number\">40px</span>;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"45-add-different-margins-to-each-side-of-an-element\">45. Add Different Margins to Each Side of an Element</h3>\n<p>为元素的每一边添加不同的外边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">40px</span>;\n    <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">40px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"46-use-clockwise-notation-to-specify-the-padding-of-an-element\">46. Use Clockwise Notation to Specify the Padding of an Element</h3>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">40px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"47-use-clockwise-notation-to-specify-the-margin-of-an-element\">47. Use Clockwise Notation to Specify the Margin of an Element</h3>\n<p>用顺时针符号来指定一个元素的外边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">40px</span>;\n  }\n&lt;<span class=\"hljs-selector-tag\">style</span>&gt;</span></code></pre><h3 id=\"48-style-the-html-body-element\">48. Style the HTML Body Element</h3>\n<p>设计html body元素的样式：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-color</span>: black;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"49-inherit-styles-from-the-body-element\">49. Inherit Styles from the Body Element</h3>\n<p>从body元素继承样式：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: black;\n    <span class=\"hljs-attribute\">color</span>: green;\n    <span class=\"hljs-attribute\">font-family</span>: Monospace;\n  }\n\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></code></pre><h3 id=\"50-prioritize-one-style-over-another\">50. Prioritize One Style Over Another</h3>\n<p>优先考虑一个样式：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: black;\n    <span class=\"hljs-attribute\">font-family</span>: Monospace;\n    <span class=\"hljs-attribute\">color</span>: green;\n  }\n  <span class=\"hljs-selector-class\">.pink-text</span>{\n    <span class=\"hljs-attribute\">color</span>:pink;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"pink-text\"</span>&gt;</span>Hello World!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></code></pre><h3 id=\"51-override-styles-in-subsequent-css\">51. Override Styles in Subsequent CSS</h3>\n<p>在后来的CSS中覆盖样式,注释中的样式跟未注释的一样：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: black;\n    <span class=\"hljs-attribute\">font-family</span>: Monospace;\n    <span class=\"hljs-attribute\">color</span>: green;\n  }\n  <span class=\"hljs-selector-class\">.pink-text</span> {\n    <span class=\"hljs-attribute\">color</span>: pink;\n  }\n  <span class=\"hljs-selector-class\">.blue-text</span>{\n    <span class=\"hljs-attribute\">color</span>:blue;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blue-text pink-text\"</span>&gt;</span>Hello World!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- &lt;h1 class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; --&gt;</span></code></pre><h3 id=\"52-override-class-declarations-by-styling-id-attributes\">52. Override Class Declarations by Styling ID Attributes</h3>\n<p>用ID属性式样覆盖类声明(英语不好。。。)：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n\n<span class=\"hljs-selector-id\">#orange-text</span> {\n    <span class=\"hljs-attribute\">color</span>:orange;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"53-override-class-declarations-with-inline-styles\">53. Override Class Declarations with Inline Styles</h3>\n<p>用内联样式覆盖类声明：</p>\n<pre><code>&lt;h1 id=<span class=\"hljs-string\">\"orange-text\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"pink-text blue-text\"</span> style=<span class=\"hljs-string\">\"color:white\"</span>&gt;Hello World!<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></code></pre><h3 id=\"54-override-all-other-styles-by-using-important\">54. Override All Other Styles by using Important</h3>\n<p>使用 important 覆盖其他所有样式</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.pink-text</span> {\n    <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"55-use-hex-code-for-specific-colors\">55. Use Hex Code for Specific Colors</h3>\n<p>为特殊的颜色使用十六进制代码</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#000</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"56-use-hex-code-to-color-elements-white\">56. Use Hex Code to Color Elements White</h3>\n<p>使用十六进制的白色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"57-use-hex-code-to-color-elements-red\">57. Use Hex Code to Color Elements Red</h3>\n<p>使用十六进制的红色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#FF0000</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"58-use-hex-code-to-color-elements-green\">58. Use Hex Code to Color Elements Green</h3>\n<p>使用十六进制的绿色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#00FF00</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"59-use-hex-code-to-color-elements-blue\">59. Use Hex Code to Color Elements Blue</h3>\n<p>使用十六进制的蓝色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#0000FF</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"60-use-hex-code-to-mix-colors\">60. Use Hex Code to Mix Colors</h3>\n<p>使用十六进制代码混合颜色</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#FFA500</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"61-use-hex-code-to-color-elements-gray\">61. Use Hex Code to Color Elements Gray</h3>\n<p>使用十六进制的灰色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#808080</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"62-use-hex-code-for-specific-shades-of-gray\">62. Use Hex Code for Specific Shades of Gray</h3>\n<p>使用十六进制代码为了特殊灰度的灰色</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#111111</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"63-use-abbreviated-hex-code\">63. Use Abbreviated Hex Code</h3>\n<p>使用缩写十六进制代码</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F00</span> ;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"64-use-rgb-values-to-color-elements\">64. Use RGB values to Color Elements</h3>\n<p>使用RGB值颜色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(0, 0, 0);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"65-use-rgb-to-color-elements-white\">65. Use RGB to Color Elements White</h3>\n<p>使用RGB颜色白色的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>:  <span class=\"hljs-built_in\">rgb</span>(255, 255, 255);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"66-use-rgb-to-color-elements-red\">66. Use RGB to Color Elements Red</h3>\n<p>使用RGB颜色红色的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(255, 0, 0);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"67-use-rgb-to-color-elements-green\">67. Use RGB to Color Elements Green</h3>\n<p>使用RGB 颜色绿色的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(0, 255, 0);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"68-use-rgb-to-color-elements-blue\">68. Use RGB to Color Elements Blue</h3>\n<p>使用RGB 颜色蓝色的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(0, 0, 255);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"69-use-rgb-to-mix-colors\">69. Use RGB to Mix Colors</h3>\n<p>使用RGB 颜色混合的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(255, 165, 0);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h2 id=\"basic-javascript\">Basic JavaScript</h2>\n<h3 id=\"1-comment-your-javascript-code\">1. Comment your JavaScript Code</h3>\n<p>注释你的Javascript代码</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Script</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-comment\">// This is an in-line comment.</span>\n<span class=\"hljs-comment\">/* This is a\n   multi-line comment */</span>\n   </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Script</span>&gt;</span></code></pre><h3 id=\"2-declare-javascript-variables\">2. Declare JavaScript Variables</h3>\n<p>声明JavaScript变量</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Script</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-comment\">// Define myName below this line</span>\n\n<span class=\"hljs-keyword\">var</span> myName;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Script</span>&gt;</span></code></pre><h3 id=\"3-storing-values-with-the-equal-operator\">3. Storing Values with the Equal Operator</h3>\n<p>用=存储值</p>\n<pre><code>&lt;Script&gt;\n// Only change code below this line\n<span class=\"hljs-attribute\">a</span> = <span class=\"hljs-number\">7</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-attribute\">b</span> = a<span class=\"hljs-comment\">;</span>\n&lt;/Script&gt;</code></pre><h3 id=\"4-initializing-variables-with-the-equal-operator\">4. Initializing Variables with the Equal Operator</h3>\n<p>用= 初始化变量</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-comment\">// Only change code below this line</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">9</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h3 id=\"5-understanding-uninitialized-variables\">5. Understanding Uninitialized Variables</h3>\n<p>了解未初始化变量</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-comment\">// Initialize these three variables</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-string\">\"I am a\"</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h3 id=\"6\">6.</h3>\n","title":"FreeCodeCamp学习笔记","tags":["FreeCodeCamp"],"slug":"free-code-camp","createDate":1458883963258,"id":"free-code-camp","thumb":"https://images.unsplash.com/photo-1582246915745-10e34377da98?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>昨晚在床上发现有学习笔记，也想写一个分享一下，写点什么呢？鉴于有不少人是初次接触Git，干脆就说说这个吧，我只会一些基本的操作，大神可以自动忽略。</p>\n","content":"<p>昨晚在床上发现有学习笔记，也想写一个分享一下，写点什么呢？鉴于有不少人是初次接触Git，干脆就说说这个吧，我只会一些基本的操作，大神可以自动忽略。</p>\n<h3 id=\"关于github\">关于github</h3>\n<p>什么是github(全球最大的同性交友平台，没有性别歧视==)呢？\n说白了就是一个仓库，你可以把你的代码放在一个小仓库上，别人也把他们的代码放在一个小仓库上，然后这些小仓库就组成了github，我们可以在里面互相串门，看到喜欢的人可以follow，看到喜欢的项目可以star或者fork。看到这，你是否迫不及待想有一个自己的仓库来保存你成果丰硕的代码呢？去<a href=\"https://github.com/\">官网</a>注册一个账号吧。</p>\n<h3 id=\"关于git\">关于Git</h3>\n<p>那么怎么把代码上传到github的仓库上呢？</p>\n<h4 id=\"1、首先我们在github上要建立一个仓库\">1、首先我们在github上要建立一个仓库</h4>\n<p>我们进入自己的官网，可以看见右上角头像左边有个加号,点击选择new repository</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ymc2ulnuj309h04y3yn.jpg\" alt=\"\"></p>\n<p>进入这样一个页面，填一下名字和描述，然后点击左下角的Creat</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ymenjrv4j30lj0fhq5w.jpg\" alt=\"\"></p>\n<p>然后进入这样一个页面，这表示这个仓库空空如也，需要我们上传东西，接下来就要用到Git喽，没有Git的去<a href=\"https://git-scm.com/downloads\">官网</a>下一个吧.图中箭头所指的就是我们新建的这个github仓库的地址，方框中的就是我们一会要用到的git命令。</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ymkab7fkj30o90hgwjf.jpg\" alt=\"\"></p>\n<p>好，现在我们在桌面新建一个文件夹，里面放了我们要上传的代码，安装好git后鼠标右键会有一个Git Bash here，点击出现一个熟悉的黑框框</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ymvjn5hnj30il0goq8z.jpg\" alt=\"\"></p>\n<p><code>git init</code> 就是初始化一下，我们会发现文件夹里多了一个<code>.git</code>的隐藏文件，这个不要随便改。<code>git add</code>就是把本机文件添加进去 <code>git add .</code>就是添加所有的意思。添加完了就要提交了，<code>git commit -m &quot;&quot;</code>,-m就是message的意思，后面的双引号里写上这次提交的信息。<code>git remote add ...</code>添加远程服务器，名字可以随便，地址就是你git仓库的地址，添加一次以后就不用再添加了。然后就是<code>git push 远程服务器名字 分支</code>，分支一般是master主分支。回车后会让你输入github账号和密码。可以使用 <a href=\"https://git-scm.com/docs/gitcredentials\">credential helper</a>来避免每次提交都要输入密码，如何配置可以参见：<a href=\"https://help.github.com/articles/caching-your-github-password-in-git/\">https://help.github.com/articles/caching-your-github-password-in-git/</a>.</p>\n<pre><code><span class=\"hljs-symbol\">XIAO555@</span>XIAO555-PC MINGW64 ~/Desktop/新建文件夹 (master)\n$ git push origin master\nCounting objects: <span class=\"hljs-number\">3</span>, done.\nDelta compression using up to <span class=\"hljs-number\">4</span> threads.\nCompressing objects: <span class=\"hljs-number\">100</span>% (<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">2</span>), done.\nWriting objects: <span class=\"hljs-number\">100</span>% (<span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">1.23</span> KiB | <span class=\"hljs-number\">0</span> bytes/s, done.\nTotal <span class=\"hljs-number\">3</span> (delta <span class=\"hljs-number\">0</span>), reused <span class=\"hljs-number\">0</span> (delta <span class=\"hljs-number\">0</span>)\nTo https:<span class=\"hljs-comment\">//github.com/xiao555/example.git</span>\n * [new branch]      master -&gt; master</code></pre><p>这样就表示上传完成了，回到你的github上看看吧。</p>\n<p><a href=\"http://ww3.sinaimg.cn/mw1024/005NJVkbjw1f1ynaltri1j30sg0ar41g.jpg\"><img src=\"http://ww3.sinaimg.cn/mw1024/005NJVkbjw1f1ynaltri1j30sg0ar41g.jpg\" alt=\"\"></a></p>\n<p>大功告成！咦，要是我们在本地修改了代码要同步到github上怎么办？没关系，继续下列步骤：</p>\n<pre><code><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add </span>. //会显示有几个改动\n<span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">\"...\"</span>\n<span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push </span>origin master</code></pre><h3 id=\"关于github-pages\">关于github pages</h3>\n<p>我想让我的代码可以在线演示怎么办？用Github Pages。让我们回到git bash那个黑框框，进行如下操作：</p>\n<pre><code>XIAO555<span class=\"hljs-meta\">@XIAO</span>555-PC MINGW64 <span class=\"hljs-regexp\">~/Desktop/</span>新建文件夹 (master)\n$ git checkout -b gh-pages\nSwitched to a <span class=\"hljs-keyword\">new</span> branch <span class=\"hljs-string\">'gh-pages'</span>\n<span class=\"hljs-comment\">//创建名为gh-pages的分支</span>\n\nXIAO555<span class=\"hljs-meta\">@XIAO</span>555-PC MINGW64 <span class=\"hljs-regexp\">~/Desktop/</span>新建文件夹 (gh-pages)\n$ git push origin gh-pages\nTotal <span class=\"hljs-number\">0</span> (delta <span class=\"hljs-number\">0</span>), reused <span class=\"hljs-number\">0</span> (delta <span class=\"hljs-number\">0</span>)\nTo <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//github.com/xiao555/example.git</span>\n * [<span class=\"hljs-keyword\">new</span> branch]      gh-pages -&gt; gh-pages\n<span class=\"hljs-comment\">//上传到gh-pages分支</span></code></pre><p>我们这时候回到github上刷新一下，会发现这里多了gh-pages的分支</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ynooepmdj30en0erwgg.jpg\" alt=\"\"></p>\n<p>我们的文件也在这个分支上。github pages需要index.html文件，我在本地新建了一个上传到gh-pages分支上，内容是 <code>Hello!</code>.然后我们进入这个链接：<a href=\"http://xiao555.github.io/example/\">http://xiao555.github.io/example/</a>,这不就是刚上传的那个index.html吗，</p>\n<p>关于github pages具体可以参考<a href=\"https://help.github.com/categories/github-pages-basics/\">这个</a>.</p>\n<p>哈哈，到这里就结束了，不过git使用过程中会遇到一些奇怪的问题，大家可以百度，找我也行.</p>\n","title":"关于Git 和 Github 以及Git pages","tags":["git","github","git-pages"],"slug":"about-git-github-and-git-pages","createDate":1458108281766,"id":"about-git-github-and-git-pages","thumb":"https://images.unsplash.com/photo-1580956990950-81503947e9f8?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>很早以前就想搭一个博客了，三个月前为了翻越伟大的防火墙，去搬瓦工买了个vps，配了个shadowsocks。既然有了vps，当然也希望搞个博客，这个寒假在家没事就开工了。</p>\n<p>之前一直不清楚搭一个博客需要啥，所以用了<a href=\"https://hexo.io/zh-cn/\">hexo</a>这个静态博客系统。</p>\n","content":"<p>很早以前就想搭一个博客了，三个月前为了翻越伟大的防火墙，去搬瓦工买了个vps，配了个shadowsocks。既然有了vps，当然也希望搞个博客，这个寒假在家没事就开工了。</p>\n<p>之前一直不清楚搭一个博客需要啥，所以用了<a href=\"https://hexo.io/zh-cn/\">hexo</a>这个静态博客系统。</p>\n<p>我的vps系统是Centos 6 x86。\n本机是windows7.</p>\n<h2 id=\"搭建过程\">搭建过程</h2>\n<p>搭建过程分两部分，需要在本机和服务端都安装Hexo和Git，VPS上还需要安装Nginx服务器，配置Git Hooks。</p>\n<h3 id=\"本机1\">本机1</h3>\n<h4 id=\"装git\">装Git</h4>\n<p>下载<a href=\"https://git-scm.com/download/win\">Git for windows</a>，一路默认安装</p>\n<h4 id=\"安装nodejs\">安装Node.js</h4>\n<p>在<a href=\"https://nodejs.org/en/\">Node.js</a>官网下载最新版，一路默认安装</p>\n<h4 id=\"创建网站目录\">创建网站目录</h4>\n<p>在你电脑的任意位置创建一个文件夹（我的是D:\\blog，下文以此代替），作为网站目录。</p>\n<h4 id=\"安装hexo\">安装Hexo</h4>\n<p>打开你创建的网站目录，右键git bash here打开命令行。</p>\n<pre><code><span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$npm</span> install -g hexo-cli</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$hexo</span> init</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$npm</span> install</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$hexo</span> d -fg</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$hexo</span> serve</span></code></pre><p>打开<a href=\"http://localhost:4000\">http://localhost:4000</a> 如果看到hexo的初始页面证明安装成功。</p>\n<p>PS:在我的电脑上4000貌似被占了，如果要改端口的话：</p>\n<pre><code><span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$hexo</span> serve -p ****</span></code></pre><h4 id=\"配置git\">配置Git</h4>\n<p>在网站目录git bash，执行</p>\n<pre><code><span class=\"hljs-variable\">$ </span>git init\n<span class=\"hljs-variable\">$ </span>git add .\n<span class=\"hljs-variable\">$ </span>git commit -m <span class=\"hljs-string\">\"Initial commit\"</span></code></pre><p>我们还要给他加个插件\n$npm install hexo-deployer-git –save</p>\n<h4 id=\"生成ssh密钥\">生成ssh密钥</h4>\n<p>输入命令 <code>ssh-keygen -t rsa -C “blog”</code> ,生成公钥和私钥，打开生成密钥的文件夹，找到id_rsa.pub。</p>\n<h3 id=\"vpscentos-6\">VPS(CentOS 6)</h3>\n<p>我们选择Git仓库+Git Hooks作为服务器端的解决方案.\nPS:我操作的用户是root，因为这样可以方便点.</p>\n<h4 id=\"安装git\">安装Git</h4>\n<pre><code>yum update &amp;&amp; apt-<span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> upgrade </span>-y #更新内核\nyum install git-core</code></pre><h4 id=\"git仓库\">Git仓库</h4>\n<pre><code><span class=\"hljs-keyword\">cd</span> ~\nmkdir blog.git &amp;&amp; <span class=\"hljs-keyword\">cd</span> blog.git <span class=\"hljs-comment\">#创建GIT仓库目录</span>\ngit init <span class=\"hljs-params\">--bare</span> <span class=\"hljs-comment\">#初始化一个空仓库</span></code></pre><h4 id=\"ssh公钥配置\">SSH公钥配置</h4>\n<p>为了本机不登录自动部署</p>\n<pre><code><span class=\"hljs-keyword\">cd</span> ~\nmkdir <span class=\"hljs-string\">.ssh</span> &amp;&amp; <span class=\"hljs-keyword\">cd</span> <span class=\"hljs-string\">.ssh</span>\nvim authorized_keys</code></pre><p>然后把id_rsa.pub里的那一串复制过去。</p>\n<p>本机Git Bash里实验一下</p>\n<pre><code><span class=\"hljs-selector-tag\">ssh</span> <span class=\"hljs-selector-tag\">username</span>@<span class=\"hljs-keyword\">yourVps</span>(<span class=\"hljs-keyword\">IP</span> Or URL)</code></pre><p>如果配置成功的话不用输入密码就会登陆。</p>\n<h4 id=\"配置本机hexo\">配置本机Hexo</h4>\n<p>设置git用户名</p>\n<pre><code>$ git<span class=\"hljs-built_in\"> config </span>--global user.email <span class=\"hljs-string\">\"email@example.com\"</span>\n$ git<span class=\"hljs-built_in\"> config </span>--global user.name <span class=\"hljs-string\">\"username\"</span></code></pre><p>配置站点目录里的_config.yml</p>\n<pre><code><span class=\"hljs-meta\"># Deployment</span>\n<span class=\"hljs-meta\"># Docs: https:<span class=\"hljs-comment\">//hexo.io/docs/deployment.html</span></span>\n<span class=\"hljs-symbol\">deploy:</span>\n<span class=\"hljs-symbol\">  type:</span> git\n<span class=\"hljs-symbol\">  message:</span> update\n<span class=\"hljs-symbol\">  repo:</span> root@YOURVPSIP:blog.git\n<span class=\"hljs-symbol\">  branch:</span> master</code></pre><p>这应该是单用户的设置，多用户请自行google,基本是</p>\n<pre><code><span class=\"hljs-attribute\">repo</span>:\n  <span class=\"hljs-attribute\">s1</span>: root<span class=\"hljs-variable\">@YOURVPSIP</span>:blog.git,master</code></pre><p>运行 <code>hexo g &amp;&amp; hexo d</code>，如果一切正常，静态文件已经被成功的push到了blog的仓库里</p>\n<p>PS:注意配置文件的冒号 ： 后面一定要有空格</p>\n<h4 id=\"配置nginx\">配置Nginx</h4>\n<h5 id=\"安装nginx和nodejs\">安装Nginx和Node.js</h5>\n<pre><code><span class=\"hljs-variable\">$yum</span> update &amp;&amp; apt-<span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> upgrade </span>-y #更新内核\n<span class=\"hljs-variable\">$yun</span> install nodejs -y\n<span class=\"hljs-variable\">$yum</span> install nginx -y\n<span class=\"hljs-variable\">$cd</span> /etc/nginx/conf.d/\n<span class=\"hljs-variable\">$vi</span> default.conf</code></pre><p>我这里为了方便直接改默认配置文件了，其他博客一般介绍新建一个vhost的方法。</p>\n<pre><code><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> IP:<span class=\"hljs-number\">80</span> ;\n    <span class=\"hljs-attribute\">root</span> /var/www/blog;  <span class=\"hljs-comment\"># 这里是你网站的路径 路径下包含index.html等一系列文件</span>\n    <span class=\"hljs-attribute\">server_name</span> _;   <span class=\"hljs-comment\"># 如果没有域名就像我这样写，有域名就写域名</span>\n    <span class=\"hljs-attribute\">access_log</span>  /var/log/nginx/example_access.log;\n    <span class=\"hljs-attribute\">error_log</span>   /var/log/nginx/example_error.log;\n    <span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~* ^.+\\.(ico|gif|jpg|jpeg|png)$</span> {\n            <span class=\"hljs-attribute\">root</span> /var/www/example.com/public;\n            <span class=\"hljs-attribute\">access_log</span>   <span class=\"hljs-literal\">off</span>;\n            <span class=\"hljs-attribute\">expires</span>      <span class=\"hljs-number\">1d</span>;\n        }\n    <span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~* ^.+\\.(css|js|txt|xml|swf|wav)$</span> {\n        <span class=\"hljs-attribute\">root</span> /var/www/example.com/public;\n        <span class=\"hljs-attribute\">access_log</span>   <span class=\"hljs-literal\">off</span>;\n        <span class=\"hljs-attribute\">expires</span>      <span class=\"hljs-number\">10m</span>;\n    }\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">root</span> /var/www/example.com/public;\n        <span class=\"hljs-attribute\">if</span> (-f <span class=\"hljs-variable\">$request_filename</span>) {\n            <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^/(.*)$</span>  /<span class=\"hljs-variable\">$1</span> <span class=\"hljs-literal\">break</span>;\n        }\n    }\n}</code></pre><h5 id=\"创建目录-分配权限\">创建目录 分配权限</h5>\n<pre><code><span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$cd</span> /var/www</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$mkdir</span> blog</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$chmod</span> 775 -R /var/www/blog</span></code></pre><p>顺便初始化一下仓库</p>\n<pre><code><span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">init</span>\n<span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">remote add origin ~/blog.git</span>\n<span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">fetch</span>\n<span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">checkout master</span></code></pre><h5 id=\"运行nginx\">运行Nginx</h5>\n<pre><code>$<span class=\"hljs-regexp\">/etc/i</span>nit.d<span class=\"hljs-regexp\">/nginx restart</span></code></pre><h4 id=\"配置-git-hooks\">配置 Git Hooks</h4>\n<p>这个是不同于网上搜的大多数方法的git hooks配置，因为他们那种方法我用不成功==</p>\n<pre><code><span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">~/blog.git/hooks</span>\n<span class=\"hljs-attr\">touch</span> <span class=\"hljs-string\">post-receive</span>\n<span class=\"hljs-attr\">vi</span> <span class=\"hljs-string\">post-receive</span></code></pre><p>配置如下</p>\n<pre><code><span class=\"hljs-meta\">#!/bin/sh\n</span>\n<span class=\"hljs-built_in\">unset</span> GIT_DIR\n\nNowPath=`<span class=\"hljs-built_in\">pwd</span>`\nDeployPath=<span class=\"hljs-string\">\"/var/www/blog\"</span>\n\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$DeployPath</span>\ngit pull origin master\n\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$NowPath</span>\n<span class=\"hljs-built_in\">exit</span> 0</code></pre><p>更改权限</p>\n<pre><code><span class=\"hljs-variable\">$ </span>chmod +x post-receive</code></pre><p>到这里就配置ok了，回到本机站点目录git bash测试一下，可以略作修改，比如换一下标题 <code>title: Xiao555</code>,然后</p>\n<pre><code>hexo g <span class=\"hljs-meta\">&amp;&amp; hexo d</span></code></pre><p>从浏览器打开你的网站或者服务器的ip看看是否成功。\n当然，每次更新完都要写这行虽然不多但是还有感觉有点麻烦，在这里我们可以给Git配置一下，编辑~/.bashrc文件，没有会加上：</p>\n<pre><code>vim ~<span class=\"hljs-string\">/.bashrc</span></code></pre><p>编辑内容：</p>\n<pre><code><span class=\"hljs-keyword\">alias</span> blog='<span class=\"hljs-keyword\">cd</span> D:<span class=\"hljs-string\">/blog</span>;hexo g &amp;&amp; hexo d'</code></pre><p>cd 后面是你的本机站点目录。保存并退出，再运行(不然不生效）：</p>\n<pre><code><span class=\"hljs-built_in\">source</span> ~/.bashrc</code></pre><p>这样以后写完一篇文章要更新只需要直接打开git bash输入blog就可以了。</p>\n<p>至于hexo站点的配置，参照官网就好。这里添加一项就是站点配置文件里的<code>auto_detect: false</code>要改为true，否则代码块行号只有1，其他为空白：</p>\n<p><img src=\"https://xiao555.netlify.com/codebug.png\" alt=\"\"></p>\n<p>啊，突然发现写个博客好难啊，记性不好怕写得不对，有错误还希望读者多多指出，参考资料基本就是你能google到的那些有关的博文，就不一一列举了,主要的区别就是git hooks的。</p>\n","title":"在vps上搭建hexo博客用Git Hooks 更新","tags":["vps","hexo","blog","git-hooks"],"slug":"set-up-a-hexo-blog-on-vps-and-update-it-with-git-hooks","createDate":1457431802283,"id":"set-up-a-hexo-blog-on-vps-and-update-it-with-git-hooks","thumb":"https://images.unsplash.com/photo-1581252167648-643051a9433e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>在这刚开学不久的，舍友们都无忧无虑的玩着游戏的时候，我的心情很不爽。这是为什么呢？因为我要补考！！！</p>\n","content":"<p>在这刚开学不久的，舍友们都无忧无虑的玩着游戏的时候，我的心情很不爽。这是为什么呢？因为我要补考！！！</p>\n<p>而在我默默准备补考的时候，正在进行着各大公司的春招工作，看着大三的学长学姐们都在积极地找内推，投简历，面试。我感到很不是滋味。这又是为什么呢？且听我娓娓道来：</p>\n<p>当我刚从东部沿海来到内陆的西电时，我在所谓的技术上完全是个小白，不懂什么是C语言，什么是html，什么是js。后来，参加雁塔E6的招新面试时，学长问我知道什么是web吗？我当时一脸懵逼啊，但是为了碰碰运气，我很没底气的说“外包?” 阿西吧，我现在能想象当时学长会怎么想，呵呵。于是学长跟我讲解了html的故事，于是我知道了有个叫w3school的东西，于是我在当时大一不允许带电脑的情况下毅然买了我的Dell游戏本开始学习html，css，js。在这个过程中我发现了许多有趣的东西。我尝试着做个人网站，但是页面写的一塌糊涂，让人不忍直视，哈哈。于是有自知之明的我去网上找别人的网页，然后试着改成我的(好无耻)，这是当时的<a href=\"http://1.jianli2015.applinzi.com/\">作品</a>(链接在左边)，很简陋有没有。哎，当时懵懂的我想以后就学这个了，吃前端的饭，加油，努力奋斗！！</p>\n<p>然而，真相是：上课睡觉，晚上LOL，然后上床扣手机，周末也是LOL。虽然有点夸张，我只是想表达感觉大一一年跟大二上学期基本都在游戏中荒废了。</p>\n<p>啊，少年你的理想呢？我们的征途是星辰大海啊！！看看周围那些努力奋斗的人，看看科协努力学技术的那群人，再看看你自己，这样对得起你的人生吗！！</p>\n<p>确实很多时候都感到没有学好一项技能，毕业后找不到工作，前途渺茫。本来就没有妹子相伴，以后穷困潦倒的时候去哪找你的颜如玉啊。\n其实我之前是想大二结束那个暑假出去找一份实习，但是现在看来，我需要学的还有很多，完全达不到人家的要求啊。</p>\n<p>哎，好吧，纯粹是无病呻吟。就是今天感觉心情沉重，脑子里想的都是这些，然后总想写点啥。然而好久没上语文的我早已失去了当初的50+的作文水平。</p>\n<p>言归正传，我觉得自己还有救。那就做个计划吧。这学期好好学js。今天看知乎的时候看到一个学习计划感觉不错的样子，摘抄如下：</p>\n<pre><code><span class=\"hljs-number\">1</span>、 css、html (ES5，ES2015，ES2016)遵循标准来学习。\n<span class=\"hljs-number\">2</span>、 http、socket等网络层协议。\n<span class=\"hljs-number\">3</span>、 数据结构和算法。\n<span class=\"hljs-number\">4</span>、 设计模式。这里不建议为了设计而学习，多了解，多思考。\n<span class=\"hljs-number\">5</span>、 项目(可能是锻炼？)抽象、建模、分层的能力。\n\n总之，代码尽可能不重复，易读易维护易扩展。\n\n软能力：\n<span class=\"hljs-number\">1</span>、 沟通能力\n<span class=\"hljs-number\">2</span>、 推动项目可执行，有反馈\n<span class=\"hljs-number\">3</span>、 提高英语能力\n<span class=\"hljs-number\">4</span>、 锻炼出自己的学习方法\n\n<span class=\"hljs-keyword\">final</span>：暑假有能力找到一份实习工作！（自己加的）\nao，对了，还有一条：每天尽量少熬夜啊骚年！</code></pre><p>好吧，骚年努力吧，既然已经戒撸，那就承担起你应该担负的责任，努力学习前端吧！(咦，有点似曾相识啊==！)</p>\n","title":"日记——2016.3.3","tags":["日记"],"slug":"diary-2016.3.3","createDate":1457018816993,"id":"diary-2016.3.3","thumb":"https://images.unsplash.com/photo-1581623301138-42e3513ddbf2?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>本教程适用于CentOS 6</p>\n","content":"<p>本教程适用于CentOS 6</p>\n<h2 id=\"安装pptp\">安装pptp</h2>\n<pre><code>wget --<span class=\"hljs-keyword\">no</span>-check-certificate http<span class=\"hljs-variable\">s:</span>//raw.githubusercontent.<span class=\"hljs-keyword\">com</span>/teddysun/across/master/pptp.<span class=\"hljs-keyword\">sh</span>\nchmod +<span class=\"hljs-keyword\">x</span> pptp.<span class=\"hljs-keyword\">sh</span>\n./pptp.<span class=\"hljs-keyword\">sh</span></code></pre><p><a href=\"http://www.bandwagong.com/wp-content/uploads/2015/04/258.png\">http://www.bandwagong.com/wp-content/uploads/2015/04/258.png</a></p>\n<p>安装成功后，会有相应信息</p>\n<p><a href=\"http://www.bandwagong.com/wp-content/uploads/2015/04/259.jpg\">http://www.bandwagong.com/wp-content/uploads/2015/04/259.jpg</a></p>\n<p>增加一个新用户，删除用户，修改密码等可以使用编辑：</p>\n<pre><code>vi <span class=\"hljs-regexp\">/etc/</span>ppp<span class=\"hljs-regexp\">/chap-secrets</span></code></pre><p>按i 编辑，格式如下：</p>\n<pre><code>vpn pptpd <span class=\"hljs-number\">123456</span> *\n<span class=\"hljs-meta\">#vpn 用户名</span>\n<span class=\"hljs-meta\">#123456 密码</span>\n<span class=\"hljs-meta\">#pptpd 和 * 不变，字符中间必须用一个空格隔开。数字123，选用键盘字母键上方，不要用数字小键盘</span></code></pre><p><a href=\"http://www.bandwagong.com/wp-content/uploads/2015/04/230.jpg\">http://www.bandwagong.com/wp-content/uploads/2015/04/230.jpg</a></p>\n<p>如上输入完成，按下键盘左上方ESC键盘，英文状态下输入 “：”再输入字母 wq ，回车即保存好了。\n现在只要电脑设置好，就可以自由的畅享网络了。</p>\n<p>参考文章：<a href=\"http://www.bandwagong.com/pptpd-vpn/\">http://www.bandwagong.com/pptpd-vpn/</a></p>\n","title":"搬瓦工VPS pptpd VPN配置","tags":["vps","pptpd","vpn"],"slug":"bandwagonhost-pptpd-vpn","createDate":1455155301793,"id":"bandwagonhost-pptpd-vpn","thumb":"https://images.unsplash.com/photo-1581626274639-07cb175d188d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>本文适用于CentOS 6 系统\nshadowsocks客户端下载链接：<a href=\"http://sourceforge.net/projects/shadowsocksgui/files/dist/\">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>\n","content":"<p>本文适用于CentOS 6 系统\nshadowsocks客户端下载链接：<a href=\"http://sourceforge.net/projects/shadowsocksgui/files/dist/\">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>\n<h2 id=\"安装shadowsocks\">安装shadowsocks</h2>\n<p>root用户运行：</p>\n<pre><code>wget --<span class=\"hljs-keyword\">no</span>-check-certificate http://www.bandwagong.<span class=\"hljs-keyword\">com</span>/vps/ss.<span class=\"hljs-keyword\">sh</span>\nchmod +<span class=\"hljs-keyword\">x</span> ss.<span class=\"hljs-keyword\">sh</span>\n./ss.<span class=\"hljs-keyword\">sh</span> <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> | tee shadowsocks.<span class=\"hljs-built_in\">log</span></code></pre><p>安装完成后，提示如下：</p>\n<pre><code>Congratulations, shadowsocks install completed!\nYour Server IP:your_server_ip\nYour Server Port:<span class=\"hljs-number\">443</span>\nYour Password:your_password\nYour Local IP:<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>\nYour Local Port:<span class=\"hljs-number\">1080</span>\nYour Encryption <span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span>:</span>aes-<span class=\"hljs-number\">256</span>-cfb\n\nWelcome <span class=\"hljs-keyword\">to</span> visit:http:<span class=\"hljs-comment\">//www.bandwagong.com</span>\nEnjoy it!</code></pre><h2 id=\"卸载方法\">卸载方法</h2>\n<p>root用户运行：</p>\n<pre><code><span class=\"hljs-string\">./ss.sh</span> uninstall</code></pre><p>#单用户配置文件</p>\n<p>配置文件路径：/etc/shadowsocks.json</p>\n<pre><code>{\n    <span class=\"hljs-attr\">\"server\"</span>:<span class=\"hljs-string\">\"your_server_ip\"</span>,\n    <span class=\"hljs-attr\">\"server_port\"</span>:<span class=\"hljs-number\">443</span>,\n    <span class=\"hljs-attr\">\"local_address\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,\n    <span class=\"hljs-attr\">\"local_port\"</span>:<span class=\"hljs-number\">1080</span>,\n    <span class=\"hljs-attr\">\"password\"</span>:<span class=\"hljs-string\">\"yourpassword\"</span>,\n    <span class=\"hljs-attr\">\"timeout\"</span>:<span class=\"hljs-number\">300</span>,\n    <span class=\"hljs-attr\">\"method\"</span>:<span class=\"hljs-string\">\"aes-256-cfb\"</span>,\n    <span class=\"hljs-attr\">\"fast_open\"</span>: <span class=\"hljs-literal\">false</span>\n}</code></pre><h2 id=\"多用户多端口配置文件\">多用户多端口配置文件</h2>\n<p>配置文件路径：/etc/shadowsocks.json</p>\n<pre><code>{\n    <span class=\"hljs-attr\">\"server\"</span>:<span class=\"hljs-string\">\"your_server_ip\"</span>,\n    <span class=\"hljs-attr\">\"local_address\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,\n    <span class=\"hljs-attr\">\"local_port\"</span>:<span class=\"hljs-number\">1080</span>,\n    <span class=\"hljs-attr\">\"port_password\"</span>:{\n         <span class=\"hljs-attr\">\"8989\"</span>:<span class=\"hljs-string\">\"password0\"</span>,\n         <span class=\"hljs-attr\">\"9001\"</span>:<span class=\"hljs-string\">\"password1\"</span>,\n         <span class=\"hljs-attr\">\"9002\"</span>:<span class=\"hljs-string\">\"password2\"</span>,\n         <span class=\"hljs-attr\">\"9003\"</span>:<span class=\"hljs-string\">\"password3\"</span>,\n         <span class=\"hljs-attr\">\"9004\"</span>:<span class=\"hljs-string\">\"password4\"</span>\n    },\n    <span class=\"hljs-attr\">\"timeout\"</span>:<span class=\"hljs-number\">300</span>,\n    <span class=\"hljs-attr\">\"method\"</span>:<span class=\"hljs-string\">\"aes-256-cfb\"</span>,\n    <span class=\"hljs-attr\">\"fast_open\"</span>: <span class=\"hljs-literal\">false</span>\n}</code></pre><h2 id=\"使用命令\">使用命令</h2>\n<p>启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status</p>\n","title":"搬瓦工VPS shadowsocks配置","tags":["vps","shadowsocks"],"slug":"bandwagonhost-vps-shadowsocks","createDate":1455155263549,"id":"bandwagonhost-vps-shadowsocks","thumb":"https://images.unsplash.com/photo-1581508525322-f5d437639ff9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"}]